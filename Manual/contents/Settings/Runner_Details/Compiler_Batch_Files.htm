<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <title>Compiler Batch Files / Scripts</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining the batch files that can be used with the compiler" />
  <meta name="rh-index-keywords" content="Compiler Batch Files Scripts" />
  <meta name="search-keywords" content="compiler, batch, files, shell, scripts, asset compiler, run, build" />
</head>
<body>
  <h1>Compiler Batch Files / Scripts</h1>
  <p>The <span data-keyref="GameMaker Name">GameMaker</span> compiler allows you to place Batch files (Windows) or Shell scripts (on macOS and Linux) in your project directory, and in the directory for each extension in your project.</p>
  <h2>Placement</h2>
  <p>A script file may be placed at the root of your project directory, alongside the project&#39;s <span class="inline2">.yyp</span> file.</p>
  <p>A script file may also be placed in the directory of an extension, which may look like this: <span class="inline2">&lt;project_directory&gt;/extensions/&lt;extension_folder&gt;/</span>.</p>
  <p>The extension versions of a script file will be executed first, and its root version will be executed last. The order in which extensions are executed can&#39;t be controlled, so an extension developer must ensure that one extension&#39;s scripts don&#39;t rely on another extension&#39;s scripts.</p>
  <h2>Execution</h2>
  <p>Script files with specific names, placed in any of the directories described above, are executed at various points during the compilation process:</p>
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"> </span> These steps are listed in the order that they are run, except for those under &quot;<strong>Platform-Specific Steps</strong>&quot;.</p>
  <table border="1" cellpadding="1" cellspacing="1">
    <colgroup>
      <col style="width:33.33%" />
      <col style="width:33.33%" />
      <col style="width:33.33%" />
    </colgroup>
    <tbody>
      <tr>
        <th>Windows Batch File Name</th>
        <th>macOS/Linux Shell Script Name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><strong>pre_project_step.bat</strong></td>
        <td><strong>pre_project_step.sh</strong></td>
        <td>This is executed before the asset compiler has loaded the project files</td>
      </tr>
      <tr>
        <td><strong>post_project_step.bat</strong></td>
        <td><strong>post_project_step.sh</strong></td>
        <td>This is executed after the asset compiler has loaded the project files</td>
      </tr>
      <tr>
        <td><strong>pre_run_step.bat</strong></td>
        <td><strong>pre_run_step.sh</strong></td>
        <td><em>Only runs when testing the game (&quot;Run&quot; or F5 in the IDE), not run when creating a package</em><br />
          <br />
          This is executed before the game deployment is about to start
        </td>
      </tr>
      <tr>
        <td><strong>pre_build_step.bat</strong></td>
        <td><strong>pre_build_step.sh</strong></td>
        <td>This is executed before the asset compiler is asked to build the game</td>
      </tr>
      <tr>
        <td><strong>post_textures.bat</strong></td>
        <td><strong>post_textures.sh</strong></td>
        <td>This is executed after the textures for your game have been generated. You can use this step to optimise your game textures manually.<br />
          <br />
          This script receives an environment variable called <span class="inline2">TexturesDir</span>, which stores the path to the generated textures.
        </td>
      </tr>
      <tr>
        <td><strong>post_build_step.bat</strong></td>
        <td><strong>post_build_step.sh</strong></td>
        <td>This is executed after the asset compiler has been started for building the game</td>
      </tr>
      <tr>
        <td><strong>remote_build_step.bat</strong></td>
        <td><strong>remote_build_step.sh</strong></td>
        <td>This is executed on the remote machine, when you are on a Windows machine and compiling remotely for macOS/iOS/tvOS or Ubuntu.</td>
      </tr>
      <tr>
        <td><strong>pre_package_step.bat</strong></td>
        <td><strong>pre_package_step.sh</strong></td>
        <td>This is executed before the final packaging step, which is when all files are ready but the final ZIP file or store package is about to be created</td>
      </tr>
      <tr>
        <td><strong>post_package_step.bat</strong></td>
        <td><strong>post_package_step.sh</strong></td>
        <td><em>Only runs when creating a package/executable</em><br />
          <br />
          This is executed after the final packaging step has completed and the final ZIP file or store package has been prepared. It will run locally on the machine where the package command was executed even when compiling for a different device (e.g. Windows to macOS).
        </td>
      </tr>
      <tr>
        <td><strong>post_run_step.bat</strong></td>
        <td><strong>post_run_step.sh</strong></td>
        <td><em>Only runs when testing the game (&quot;Run&quot; or F5 in the IDE), not run when creating a package</em><br />
          <br />
          This is executed when the game is prepared and ready to run. After the script&#39;s execution, the game is started (unless you exit the script with <span class="inline2">1</span>). It will run locally on the machine where the run command was executed even when compiling for a different device (e.g. Windows to macOS).
        </td>
      </tr>
      <tr>
        <th colspan="3">Platform-Specific Steps</th>
      </tr>
      <tr>
        <td><strong>pre_gradle_step.bat</strong></td>
        <td><strong>pre_gradle_step.sh</strong></td>
        <td><span class="important">Android</span> This is executed when the files necessary for the Android tools have been created, but before Gradle is called. You can use this step to access and modify the Android files yourself, before the Android tools compile it into a final executable.</td>
      </tr>
    </tbody>
  </table>
  <p>These script files are supported when building on all target platforms.</p>
  <h2>Extension Version and Options Environment Variables</h2>
  <p>You can retrieve the extension version and any of the extension options in the Batch files/Shell scripts: </p>
  <ul class="colour">
    <li>Extension option: <span class="inline2">YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;</span></li>
    <li>Version number: <span class="inline2">GMEXT_&lt;ExtensionName&gt;_version</span></li>
  </ul>
  <p>Replace <span class="inline2">&lt;ExtensionName&gt;</span> here with the name of the extension you&#39;re using.</p>
  <h2>Disabling Scripts for an Extension</h2>
  <p>If you use multiple extensions that run scripts, for example, Steamworks and GDK, then you&#39;ll want to disable Steamworks when exporting to GDK, and vice-versa.</p>
  <p>For that, see: <a data-xref="{title}" href="../../The_Asset_Editors/Extension_Creation/Disabling_Extensions.htm">How to Disable Extensions?</a></p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Runner_Details.htm">Runner &amp; Compiler</a></div>
        <div>Next: <a data-xref="{title}" href="../Command_Line_Parameters.htm">Command Line Parameters</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Building via Command Line</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page that explains how your project can be compiled and tested through a CLI
" />
  <meta name="rh-index-keywords" content="Building via Command Line" />
  <meta name="search-keywords" content="build, command line, cli, ci, igor, continuous integration" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1 id="h">Building via Command Line</h1>
  <p class="note"><span class="note"><strong>NOTE</strong></span> Building executables via command line requires you to have <a href="../Setting_Up_And_Version_Information/Licencing_Information.htm">logged in to the IDE</a>.</p>
  <p>In addition to building your project through the IDE, <span data-keyref="GameMaker Name">GameMaker</span> allows you to build your projects through a command-line interface using the many options and commands described below. You can use this to build your project, test it and deploy it to multiple platforms by running one batch file, and to set up continuous integration through an automation server such as <a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a>.</p>
  <p>This is done by running the <span class="inline2">Igor.exe</span> executable present within your runtime folder and passing in the options and commands listed on this page.</p>
  <p>By default, Igor can be found in:</p>
  <ul class="colour">
    <li>Windows: <span class="inline2">C:\ProgramData\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\Cache\runtimes\runtime-[version]\bin\igor\&lt;OS&gt;\&lt;architecture&gt;\</span></li>
    <li>macOS: <span class="inline2">/Users/Shared/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Cache/runtimes/runtime-[version]/bin/igor/osx/&lt;architecture&gt;/</span></li>
  </ul>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> You must have logged into the IDE with your account at least once before attempting command line building.</p>
  <p> </p>
  <h1>Igor CI Building</h1>
  <h2>Setting Up</h2>
  <p>To set up CI building on a machine, you will need to do the following:</p>
  <ul class="colour">
    <li>Install <span data-keyref="GameMaker Name">GameMaker</span> and the runtimes needed</li>
    <li>Build the projects through the IDE for the targets required, to make sure that they work fine</li>
    <li>Test building from the command line (see examples below)</li>
    <li>Create a batch file that will do the build that you require within the task (test this from the command line)</li>
    <li>Set up a CI environment (this depends on how you are going to build your games), like <a href="https://www.jenkins.io/" title="Jenkins">Jenkins</a></li>
    <li>Set up your CI task and ensure that all the prerequisites are setup (i.e. source control sync to your project)</li>
    <li>Hook the batch file into the CI task and test within the Jenkins environment</li>
  </ul>
  <h2>Notes</h2>
  <ul class="colour">
    <li>Some platforms may have issues with the length of your file paths, in which case you will need to <span class="inline"><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst" title="subst documentation">subst</a></span> virtual drives on your PC before passing them into your commands</li>
    <li>Some platforms (notably Android) will automatically <span class="inline2">subst</span> a drive while building, so you may need to manually clean this up in the event of an error</li>
  </ul>
  <h2>Options</h2>
  <p>Here are the options that you can use while running the <strong>Igor </strong>executable:</p>
  <table>
    <colgroup>
      <col style="width: 316px;" />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">Description</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[licence_plist_file]</span></td>
        <td style="">The full path to the licence file, either from the IDE or from the <a href="#access_key">Access Key</a> service<br />
          <br />
          To retrieve the licence from the IDE, the paths are as follows:<br />
          Windows: <span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;\licence.plist</span></span><br />
          macOS: <span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;/licence.plist</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">The user folder used for retrieving licence information, alternative to <span class="inline2">/lf</span><br />
          <br />
          On Windows, this will be: <span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;</span></span><br />
          On macOS, this will be: <span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/rp=[runtime_root]</span></td>
        <td style="">The root folder of the runtime</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/project=[project_YYP_file]</span></td>
        <td style="">The full path to the project&#39;s <span class="inline2">.yyp</span> file</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/cache=[cache_dir_path]</span></td>
        <td style="">The cache directory to use (defaults to <span class="inline2">\cache</span> in the current directory)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/temp=[temp_dir_path]</span></td>
        <td style="">The temporary directory to use (defaults to <span class="inline2">c:\temp</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/of=[output_filename]</span></td>
        <td style="">The filename of the output executable without the extension, e.g. <span class="inline2">C:/output/game</span>, which would output the executable at <span class="inline2">C:/output/game.zip</span> (or a different file format depending on the platform)<br />
          <br />
          If this is not specified, a directory named <span class="inline2">output</span> will be created in the same directory as the <span class="inline">.bat</span> file (or where the command is running from), containing the extracted build files
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/tf=[target_file]</span></td>
        <td style="">The actual file name of the ZIP file or NSIS installer that is created</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/config=[configName]</span></td>
        <td style="">The name of the configuration to use (defaults to <span class="inline">Default</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/runtime=YYC|VM</span></td>
        <td style="">The output type (either YYC or VM), defaults to VM</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/j=[NumCPUs]</span></td>
        <td style="">The number of CPUs to use during the build process</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/df=[devices_json_file]</span></td>
        <td style="">The path to your <span class="inline2">devices.json</span> file, required when building to other devices.<br />
          <br />
          On Windows, this will be: <span class="inline2"><span>%appdata%\<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>\&lt;user_name&gt;_&lt;number&gt;\devices.json</span></span><br />
          On macOS, this will be: <span class="inline2"><span>~/.config/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/&lt;user_name&gt;_&lt;number&gt;/devices.json</span></span>
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">/device=[device_name_from_IDE]</span></td>
        <td style="">The name of the target device to build to, as set up in the IDE</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/launch</span></td>
        <td style="">Launch the executable on the target device after building; same as the <a href="../IDE_Navigation/Menus/The_Build_Menu.htm">&quot;Create Executable and Launch&quot; option</a> in the IDE</td>
      </tr>
    </tbody>
  </table>
  <h2 id="h1"><a id="access_key"></a>Access Key</h2>
  <p>The <span class="inline2">/lf</span> option requires a path to your <span class="inline2">licence.plist</span> file, which can be retrieved from your GameMaker installation after you&#39;ve logged into the IDE, as described in the table above.</p>
  <p>However, if you don&#39;t have access to an IDE installation, you can request an access key from the GameMaker website, and generate a <span class="inline2">licence.plist</span> file from it.</p>
  <ul class="colour">
    <li>Go to <a href="https://gamemaker.io/account/access_keys">gamemaker.io/account/access_keys</a>, and log in with an account that has the appropriate licence</li>
    <li>Generate a key and copy it to your clipboard</li>
    <li>Open a command prompt and navigate to the Igor directory (the path is given at the top of this page)
      <ul>
        <li><span class="inline2">cd &lt;igor dir&gt;</span></li>
      </ul>
    </li>
    <li>Generate a licence file using Igor
      <ul>
        <li><span class="inline2">igor runtime FetchLicences -ak=&lt;KeyFromSite&gt; -of=&lt;OutputFileName&gt;</span></li>
      </ul>
    </li>
    <li>The <span class="inline2">licence.plist</span> file generated to the <span class="inline2">-of</span> path can now be used in the <span class="inline2">/lf</span> option</li>
  </ul>
  <h2>Hello World</h2>
  <p>Here is a step-by-step example for running a game on Windows:</p>
  <ul class="colour">
    <li>Open a command prompt window
      <ul>
        <li>Win+R, write <span class="inline2">cmd</span>, press Enter</li>
      </ul>
    </li>
    <li>Navigate to the Igor directory given at the top of this page
      <ul>
        <li><span class="inline2">cd &lt;igor dir&gt;</span></li>
      </ul>
    </li>
    <li>Write <span class="inline2">igor</span> and hit Enter to confirm you are in the correct place. Doing this should give you a list of Igor&#39;s commands. If you get a different result, ensure you are in the correct directory.</li>
    <li>Run a game by supplying the project file, runtime directory, licence file, platform and build type. Enclose each directory in double quotes (<span class="inline2">&quot; &quot;</span>) to ensure spaces are handled properly.
      <ul>
        <li><span class="inline2">igor /project=&quot;&lt;yourProjectDir&gt;\projectname.yyp&quot; /rp=&quot;&lt;runtime dir&gt;&quot; /lf=&quot;&lt;plist dir&gt;\licence.plist&quot; Windows Run</span></li>
      </ul>
    </li>
    <li>Your game should now run!</li>
  </ul>
  <h2>Platform Examples</h2>
  <p>Below you can find examples of build commands for all platforms:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">GX.games</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p>Cleaning GX.games project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Clean</p>
    <p>Running GX.games:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- OperaGX Run</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Windows</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p>Cleaning Windows project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p>
    <p>Building VM for Windows -- <span class="inline">Run</span>, <span class="inline">PackageZip </span>and <span class="inline">PackageNsis</span>:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Run</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Windows PackageZip</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Windows PackageNsis</p>
    <p>Building YYC for Windows-- <span class="inline">Run</span>, <span class="inline">PackageZip </span>and <span class="inline">PackageNsis</span>:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /runtime=YYC -- Windows Run</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Windows PackageZip</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Windows PackageNsis</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">macOS</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p>Cleaning macOS project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Mac Clean</p>
    <p>Building VM for macOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Mac Package</p>
    <p><strong>Note</strong> that on Mac you will need to use mono to run Igor, so you will need to write <span class="inline"><strong>mono</strong></span> before all your commands, e.g.: <span class="inline">mono Igor.exe [options]</span></p>
    <p>Building VM for macOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Mac Package</p>
    <p>Building YYC for macOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Mac Package</p>
    <p>Building YYC for macOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Mac Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Linux / Ubuntu</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p>Cleaning Linux project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Linux Clean</p>
    <p>Building VM for Linux while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Linux Package</p>
    <p>Building YYC for Linux while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Linux Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">HTML5</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p>Cleaning HTML5 project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- HTML5 Clean</p>
    <p>Building HTML5 folder (make sure to specify a target folder with <span class="inline">/tf)</span>:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_folder] -- HTML5 folder</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">iOS</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p>Building VM for iOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- ios Package</p>
    <p>Building VM for iOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ios Package</p>
    <p>Building YYC for iOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- ios Package</p>
    <p>Building YYC for iOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ios Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Android</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p>Cleaning Android project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Windows Clean</p>
    <p>Building an Android APK using VM:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- Android Package</p>
    <p>Building an Android APK using YYC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- Android Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">tvOS</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p>Cleaning tvOS project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- tvos Clean</p>
    <p>Building VM for tvOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] -- tvos Package</p>
    <p>Building VM for tvOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- tvos Package</p>
    <p>Building YYC for tvOS while on a Mac:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC -- tvos Package</p>
    <p>Building YYC for tvOS while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- tvos Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">PS4</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p>Cleaning PS4 project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps4 Clean</p>
    <p>Building VM for PS4 while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps4 Package</p>
    <p>Building YYC for PS4 while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ps4 Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">PS5</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p>Cleaning PS5 project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- ps5 Clean</p>
    <p>Building VM for PS5 while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- ps5 Package</p>
    <p>Building YYC for PS5 while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- ps5 Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Xbox One</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p>Cleaning Xbox One project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOne Clean</p>
    <p>Building VM for Xbox One while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOne Package</p>
    <p>Building YYC for Xbox One while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- XBoxOne Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Xbox Series X/S</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p>Cleaning Xbox Series X/S project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- XBoxOneSeriesXS Clean</p>
    <p>Building VM for Xbox Series X/S:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p>
    <p>Building YYC for Xbox Series X/S:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- XBoxOneSeriesXS Package</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Switch</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p>Cleaning Switch project:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] -- Switch Clean</p>
    <p>Building VM for Switch while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /device=[device_IDE_Name] -- Switch Package</p>
    <p>Building VM for YYC while on a PC:</p>
    <p class="code">Igor.exe /uf=[user_folder] /rp=[runtime_path] /project=[project_YYP_file] /cache=[cache_dir_path] /temp=[temp_dir_path] /of=[output_filename] /tf=[target_file] /runtime=YYC /device=[device_IDE_Name] -- Switch Package</p>
  </div>
  <p> </p>
  <h1>Igor Runtime</h1>
  <p>Here are the options that can be used with the Igor runtime:</p>
  <table>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">Description</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[license_file]</span></td>
        <td style="">Set the direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/ru=[runtime_url]</span></td>
        <td style="">Set the URL to fetch runtime information from (defaults to the stable release)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/rp=[runtime_root]</span></td>
        <td style="">Set the local runtime install folder to list the installed runtimes or install new runtimes</td>
      </tr>
    </tbody>
  </table>
  <p>Here are the commands that can be used with the Igor runtime:</p>
  <h4>Syntax:</h4>
  <p class="code">Igor.exe [command]</p>
  <table>
    <colgroup>
      <col style="width: 237px;" />
      <col style="width: 537px;" />
    </colgroup>
    <tbody>
      <tr>
        <th style="">Command</th>
        <th style="">Description</th>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime List</span></td>
        <td style="">Lists the runtimes available on a feed (version number, date/time of build)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime ListInstalled [-directory]</span></td>
        <td style="">Lists the runtimes available in the current folder (<span class="inline">directory</span>=full path to the folder)<br />
          <br />
          You can specify a directory to look in, but if it&#39;s not specified it will default to the current directory<br />
          <br />
          This also checks whether there is a <span class="inline">receipt.json</span> file and a <span class="inline">manifest</span> folder inside the directory (making sure that it&#39;s actually a runtime)
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime Info [-version]</span></td>
        <td style="">Prints out information about the most recent runtime on the given feed; also needs a licence file to show information regarding the modules available for the user<br />
          <br />
          <span class="inline">version</span> can either by a string used to search through the feed titles (e.g.: <span class="inline">&quot;739&quot;</span> would show information for all builds containing 739 in their version numbers), or it can be <span class="inline">all</span> to show information for all feeds<br />
          <br />
          It will list the modules with the <span class="inline">.zip</span> file names for each module
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime Install [-version]</span></td>
        <td style="">Installs the latest runtime from the given feed using the given <span class="inline">version</span> as a search filter; if that is not specified, it defaults to the latest version. It will get all the modules that the user has on their licence.</td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime Verify [-folder=.]</span></td>
        <td style="">Calculates the checksums for all the installed files and compares them to the checksums written into the manifest <span class="inline">folder</span>. You can specify a folder to check, however if that is not specified it will default to the current directory.<br />
          <br />
          This will flag any files where the checksums don&#39;t match, files that are missing and files that should not be there.<br />
          <br />
          Do note that the manifest files themselves are not verified and a user can alter the manifest files to match the installed ones.
        </td>
      </tr>
      <tr>
        <td style=""><span class="inline">Runtime FetchLicences [-ak] [-of]</span></td>
        <td style="">Generates a licence.plist file (<span class="inline2">-of</span>) from an access key (<span class="inline2">-ak</span>), see <a href="#access_key">Access Key</a></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h1>Igor Testing</h1>
  <p>Here are the options that can be used for testing your builds with Igor:</p>
  <table>
    <tbody>
      <tr>
        <th style="">Option</th>
        <th style="">Description</th>
      </tr>
      <tr>
        <td style=""><span class="inline">/uf=[user_folder]<strong></strong></span></td>
        <td style="">Set the user folder used for retrieving licence information so <span data-keyref="GameMaker Name">GameMaker</span> knows which modules can be installed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/lf=[license_file]</span></td>
        <td style="">Set a direct path to a licence file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/df=[device_file]</span></td>
        <td style="">Set a direct path to a <span class="inline">devices.json</span> file, can be used as an alternative to setting a user folder (<span class="inline">/uf</span>)</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/timeout=[number_of_seconds_to_wait]</span></td>
        <td style="">The timeout to use for the test in seconds, defaults to 120 seconds; the test will be stopped after this timeout is over and will be marked as failed</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/waittime=[number_of_seconds_to_wait]</span></td>
        <td style="">Number of seconds to wait in the main loop before declaring the test as passed, defaults to 30 seconds</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/device=[device_name]</span></td>
        <td style="">Used to look up the device name in the user folder&#39;s <span class="inline">devices.json</span> file</td>
      </tr>
      <tr>
        <td style=""><span class="inline">/target=[list_of_targets]</span></td>
        <td style="">Comma-separated list of targets in the <span class="inline">PLATFORM|DEVICE</span> format, e.g.: <span class="inline">/target=&quot;Windows|Local,HTML|Firefox&quot;</span><br />
          <br />
          If you specify <strong>all</strong>, the tests will attempt to run for every device in the <span class="inline">devices.json</span> file
        </td>
      </tr>
    </tbody>
  </table>
  <p>There is one command that you can use to run tests with Igor:</p>
  <p class="code">Igor.exe Tests RunTests [test_directory/test_filename]</p>
  <p>You must specify either a test directory or a test file name.</p>
  <ul class="colour">
    <li>If it&#39;s a directory, Igor will look for a file called <span class="inline">tests.json</span> in the directory
      <ul>
        <li>If the file <strong>is not found</strong>, Igor will recursively search for <span class="inline"><span data-keyref="Const_ExportProject_Extension">.yyz</span></span> and <span class="inline">.yyp</span> files in the directory
          <ul>
            <li>Each project found will be built and run on Windows</li>
            <li>It will wait till the runner reaches the main loop
              <ul>
                <li>The test passes if the runner is still running after the wait time</li>
                <li>The test fails if the project does not compile within the timeout period, or crashes before the wait time is over</li>
              </ul>
            </li>
          </ul>
        </li>
        <li>If a <span class="inline">tests.json</span> file <strong>is found</strong>, Igor will run the tests described in the file (see example below)</li>
      </ul>
    </li>
    <li>Alternatively, you can supply a direct path to a <span class="inline">tests.json</span> file instead of a directory</li>
  </ul>
  <p> </p>
  <h1>Tests.json File</h1>
  <h2>Format</h2>
  <p>The <span class="inline">tests.json</span> file must have the following format:</p>
  <ul class="colour">
    <li>The JSON file should contain an array of objects</li>
    <li>Each object should describe one test
      <ul>
        <li>The test object must contain these keys:
          <ul>
            <li><span class="inline">name</span>: A name used to report whether the test has passed or failed</li>
            <li><span class="inline">path</span>: A path to a <span class="inline">.yyp</span>, <span class="inline"><span data-keyref="Const_ExportProject_Extension">.yyz</span></span>, <span class="inline">.gml</span>, <span class="inline">.js</span> file or folder for the test</li>
            <li><span class="inline">command</span>: The Igor command for the test (<span class="inline">Run</span>, <span class="inline">CreatePackage</span>, etc. as described above)</li>
          </ul>
        </li>
        <li>The test object may also contain these keys:
          <ul>
            <li><span class="inline">platform</span>: Passed directly through to Igor to do the test</li>
            <li><span class="inline">device</span>: The device name from the <span class="inline">devices.json</span> file</li>
            <li><span class="inline">target</span>: The target in a &quot;<span class="inline">PLATFORM|TARGET&quot;</span> format, e.g.: &quot;<span class="inline">Windows|Local&quot;</span></li>
            <li><span class="inline">timeout</span>: A timeout for the total test including compile and run; if exceeded the test will be stopped and marked as failed</li>
            <li><span class="inline">waittime</span>: The length of time to wait after entering the main loop before deciding whether the test has passed</li>
            <li><span class="inline">owner</span>: the e-mail address of the user who will be e-mailed if this test fails</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
  <h2>Example</h2>
  <p>Here is an example of a <span class="inline">tests.json</span> file:</p>
  <p class="code">[<br />
     {<br />
      &quot;name&quot; : &quot;Game Idea Windows&quot;,<br />
      &quot;path&quot; : &quot;C:/scratch/GameIdea.yyz&quot;,<br />
      &quot;platform&quot; : &quot;Windows&quot;,<br />
      &quot;command&quot; : &quot;Run&quot;,<br />
      &quot;timeout&quot; : &quot;500&quot;,<br />
      &quot;waittime&quot; : &quot;30&quot;<br />
     },<br />
     {<br />
      &quot;name&quot; : &quot;Platformer Game Windows&quot;,<br />
      &quot;path&quot; : &quot;C:/Users/&lt;MY USERNAME&gt;/Documents/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Platformer Game/PlatformerGame.yyp&quot;,<br />
      &quot;target&quot; : &quot;Windows|Local,HTML5|selenium:firefox,PS4|Default&quot;,<br />
      &quot;command&quot; : &quot;Run&quot;<br />
     },<br />
     {<br />
      &quot;name&quot; : &quot;Puzzle Game Windows&quot;,<br />
      &quot;path&quot; : &quot;C:/Users/&lt;MY USERNAME&gt;/Documents/<span data-keyref="GameMaker_Paths_Directory_Name">GameMakerStudio2</span>/Puzzle Game/PuzzleGame.yyp&quot;,<br />
      &quot;platform&quot; : &quot;HTML5&quot;,<br />
      &quot;command&quot; : &quot;Run&quot;,<br />
      &quot;device&quot; : &quot;selenium:chrome&quot;<br />
     }<br />
    ]</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Runner_Details/Runner_Details.htm">Runner &amp; Compiler</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Runner_Details/Compiler_Batch_Files.htm">Compiler Batch Files / Scripts</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Building via Command Line
CLI
Command Line Interface
CI
Continuous Integration
-->
  <!-- TAGS
building_via_command_line
-->
</body>
</html>
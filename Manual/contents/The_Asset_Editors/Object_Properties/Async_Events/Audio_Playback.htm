<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Audio Playback</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the Audio Playback async event." />
  <meta name="rh-index-keywords" content="Objects - Async Audio Playback Event" />
  <meta name="search-keywords" content="Audio Playback,ev_async_audio_playback" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Audio Playback</span></h1>
  <p><img alt="Audio Playback Event" class="center" src="../../../assets/Images/Asset_Editors/Async_AudioPlayback.png" />This event can only be triggered by the <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/Audio_Buffers.htm">audio queue</a> play functions and will return a <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">DS Map</a> stored in the variable <span class="inline2"><a data-xref="{title}" href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm">async_load</a></span>, containing different key/value pairs relating to the audio queue that has triggered the event. The event is triggered by a <a class="glossterm" data-glossterm="callback" href="#">callback</a> when you have selected an audio queue to playback and a buffer in that audio queue has finished playing.</p>
  <p>The following keys will be available in the DS map:</p>
  <ul class="dropspotlist">
    <li class="dropspot">&quot;<span class="inline">queue_id</span>&quot; - the queue index for the queue that has finished playing, as returned by the function <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_create_play_queue.htm"><span class="inline">audio_create_play_queue()</span></a>.</li>
    <li class="dropspot">&quot;<span class="inline">buffer_id</span>&quot; - the <a href="../../../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">buffer</a> that is no longer being played from.</li>
    <li class="dropspot">&quot;<span class="inline">queue_shutdown</span>&quot; - this is set to 0 during normal playback and 1 when the event is received because <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_free_play_queue.htm"><span class="inline">audio_free_play_queue()</span></a> has been called. When this is set to 1, you don&#39;t want to queue up any further data.</li>
  </ul>
  <p>Since an audio queue can be created from multiple buffers, this event can be triggered multiple times for one queue as the end of each section of buffered audio is reached, hence the &quot;buffer_id&quot; key.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> The variable <span class="inline2"><a data-xref="{title}" href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm">async_load</a></span> is only valid in the asynchronous events, as the DS map that it points to is created at the start of the event, then deleted again at the end, with this variable being reset to a value of <span class="inline2">-1</span>. However, all further data structures created from the event must be cleaned up using the appropriate functions.</p>
  <p>In the example of use given below we will create an audio queue with 10 buffered audio sounds added to it and then play the queue:</p>
  <p class="code">audio_queue = audio_create_play_queue(buffer_s16, 11052, audio_mono);<br />
    for (var i = 0; i &lt; 10; i++;)<br />
       {<br />
       audio_queue_sound(audio_queue, audio_buffer[i], 0, buffer_get_size(audio_buffer[i]));<br />
       }<br />
    audio_play_sound(audio_queue, 0, true);</p>
  <p>Every game step now that the recording is detected will trigger an asynchronous Audio Recording event where you can deal with the recorded input something like this:</p>
  <p class="code">var queue = async_load[? &quot;queue_id&quot;];<br />
    var num = 0;<br />
    if (queue == audio_queue) <br />
       {<br />
       for (var i = 0; i &lt; 10; i++;)<br />
          {<br />
          if async_load[? &quot;buffer_id&quot;] == audio_buffer[i]<br />
             {<br />
             buffer_seek(audio_buffer[i], buffer_seek_start, 0);<br />
             num = i;<br />
             }<br />
          }<br />
       if (num == 9) <br />
          {<br />
          audio_stop_sound(audio_queue);<br />
          audio_free_play_queue(audio_queue);<br />
          }<br />
     }</p>
  <p>Here we check the queue ID and if it&#39;s the one we want, we then check the value in the &quot;buffer_id&quot; key to get the buffer that has finished playing. We also then set a local var to that index value for checking later and set the buffer back to the start for that sound. Once our local variable reaches 9, indicating that the queue has finished, we stop the sound playing and free the queue.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Async_Events.htm">Async Events</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Audio_Playback_Ended.htm">Audio Playback Ended</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Asynchronous Audio Playback Event
ev_audio_playback
Audio Playback
-->
  <!-- TAGS
ev_audio_playback
-->
</body>
</html>
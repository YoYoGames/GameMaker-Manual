<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>UI Layers</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page covering the UI Layers functionality of the Room Editor" />
  <meta name="rh-index-keywords" content="Rooms - Inheritance" />
  <meta name="search-keywords" content="room inheritance,inherit,inheritance" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">UI Layers</span></h1>
  <p>You can add a UI layer in <a data-xref="{title}" href="../Rooms.htm">The Room Editor</a> through the <img class="icon" height="22" src="../../assets/Images/Icons/Icon_Add_Layer.png" width="21" /> &quot;<strong>Create Asset</strong>&quot; menu:</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/Editor_Room_UI_CreateLayer.png" />All UI layers are contained in the global &quot;<strong>UI Folder</strong>&quot;, which will be created when you add your first UI layer. The UI Folder (and every UI layer inside it) is shared among all rooms in your project, so UI layers are displayed throughout your game regardless of which room is active.</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_Example.png" />Once you add a UI layer, you can choose whether it should appear on the main game display or inside your viewports separately. You can then add Flex Panels inside the layer and place elements inside Flex Panels.</p>
  <h2>How To Use</h2>
  <p>You can follow the basic steps below to create your UI with UI layers:</p>
  <ol class="colour">
    <li>Add your first UI layer and add Flex Panels within it to create a structure</li>
    <li>Set the properties of your UI layer and Flex Panels from the Inspector, to determine how they are aligned and sized</li>
    <li>Place Object Instances in your Flex Panels to enable runtime interaction</li>
    <li>Place Sprites or Font assets to set up the visuals of your Flex Panels</li>
  </ol>
  <h2>Layer Structure</h2>
  <p>UI layers make use of <a href="../../GameMaker_Language/GML_Reference/Flex_Panels/Flex_Panels.htm">Flex Panels</a> for containing assets. UI layers themselves are limited Flex Panels, can hold other Flex Panels and each Flex Panel can hold one or more assets. Each Flex Panel represents the area occupied by the asset(s) inside it.</p>
  <p>Flex Panels can hold <a href="../Objects.htm">Objects</a>, <a href="../Sprites.htm">Sprites</a>, <a href="../Sequences.htm">Sequences</a>, <a href="../Fonts.htm">Fonts</a> and other Flex Panels. You can drag such assets into the canvas or into the Element List, any such asset will always be added inside a new Flex Panel.</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_Example1.png" />In the above example, a UI layer holds a Flex Panel that then holds three child Flex Panels. Each child Flex Panel contains a sprite. In the canvas, the sprites are displayed in a row with gaps between them, based on the settings of the parent Flex Panel.</p>
  <p>At runtime, you can get the parent <span data-keyref="Type_ID_FlexPanel_Node"><a href="../../GameMaker_Language/GML_Reference/Flex_Panels/Function_Reference/flexpanel_create_node.htm" target="_blank">Flex Panel Node</a></span> of a UI layer by calling layer_get_flexpanel_node. Any of the <a href="../../GameMaker_Language/GML_Reference/Flex_Panels/Function_Reference/section_index.htm">Flex Panel functions</a> can be called on the returned node.</p>
  <h2>Element List</h2>
  <p>When the UI Folder is selected, the Element List displays all the UI layers in your project. Here you can search for elements and change the orientation of the window.</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_ElementList.png" /></p>
  <p>The list first displays any UI Layers that have &quot;<strong>Game View</strong>&quot; set to &quot;<strong>Display</strong>&quot;, and those with &quot;<strong>Game View</strong>&quot; set to &quot;<strong>Viewports</strong>&quot; are displayed under the &quot;<strong>Viewports</strong>&quot; header.</p>
  <p>You can drag your layers, Flex Panels or assets to place them above or below any other item in the list. Elements inside Flex Panels will have a checkbox next to them for toggling visibility.</p>
  <p>Right-clicking on any item in this list will show the following menu:</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_RMB.png" /></p>
  <ul class="colour">
    <li><strong>Add UI Layer</strong>: Adds a new UI Layer. If you right-clicked on a UI layer with &quot;Game View&quot; set to &quot;Viewports&quot; (or a child of such a layer), the new UI layer will be created as a viewport layer. The name of each UI layer must be unique.</li>
    <li><strong>Add Flex Panel</strong>: Adds a new Flex Panel under the selected item.</li>
    <li><strong>Add Folder</strong>: Adds a new folder, this is only used for organisational purposes.</li>
    <li><strong>General options</strong>: You can rename the item, cut/copy/paste, duplicate and delete it.</li>
    <li><strong>Show Instance/Asset names first</strong>: Change whether asset elements should display their asset names or instance names first in the list.</li>
    <li><strong>List options</strong>: Here you can expand/collapse all children under the item or all items in the list, and select all items.</li>
  </ul>
  <h2>Room Toolbox</h2>
  <p>Using UI layers will enable the following extra options in the Room Toolbox:</p>
  <ul class="colour">
    <li><img class="icon" height="24" src="../../assets/Images/Icons/Icon_UIL_Nodes.png" width="24" /> <strong>Show UI Layer node outlines</strong>: This enables outlines for all UI layers and Flex Panels that display the area taken up by each layer/panel. Each layer/panel in the Element List displays a colour that corresponds to the colour of its outline in the Room Canvas.</li>
  </ul>
  <h2>Runtime Draw Order</h2>
  <p>When UI layers are present, the runtime draw order is as follows:</p>
  <ul class="colour">
    <li><strong>Game Draw</strong>: The game is drawn first. If the application surface is enabled (which it is by default), it will be rendered to the screen, otherwise all room layers will be rendered to the <a class="glossterm" data-glossterm="display buffer" href="#">display buffer</a> directly. See <a data-xref="{title}" href="../Object_Properties/Draw_Events.htm">Draw Events</a> for more information.</li>
    <li><strong>Viewport Layers</strong>: Any UI layers with &quot;<strong>Game View</strong>&quot; set to &quot;<strong>Viewports</strong>&quot; are rendered for each viewport separately. The position and size of the viewport are used as the position and size of each UI layer.</li>
    <li><strong>Display Layers</strong>: Any UI layers with &quot;<strong>Game View</strong>&quot; set to &quot;<strong>Display</strong>&quot; are drawn to the screen. The size of the <a href="../../GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_size.htm">GUI layer</a> is used as the size of each UI layer.</li>
    <li><strong>GUI Layer</strong>: Contents of any of the Draw GUI events are then drawn.</li>
  </ul>
  <h2>Inspector Properties</h2>
  <p>You can select a UI layer, Flex Panel or element in the Element List and its properties will be displayed in the Inspector. The sections below describe the properties shown for each type of item in the list.</p>
  <p>These properties are represented at runtime by the <a data-xref="{title}" href="../../GameMaker_Language/GML_Reference/Flex_Panels/Flex_Panels_Styling.htm">Flex Panel Struct Members</a>.</p>
  <h3>UI Layer Properties</h3>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_Properties.png" />A UI layer contains the following main properties:</p>
  <ul class="colour">
    <li><strong>Game View</strong>: You can choose between &quot;<strong>Display</strong>&quot; and &quot;<strong>Viewports</strong>&quot;. With &quot;<strong>Display</strong>&quot;, the layer contents will be rendered directly to the game screen. With &quot;<strong>Viewports</strong>&quot;, the layer contents will be rendered separately for each active viewport in the game. Details about the rendering order are given in the section above for &quot;<strong>Runtime Draw Order</strong>&quot;.</li>
  </ul>
  <p>A UI layer also contains the following flex properties:</p>
  <ul class="colour">
    <li><strong>Direction</strong>: The flex direction, i.e. in which direction the child items should be laid out. &quot;<strong>Column</strong>&quot; displays them from top-to-bottom, &quot;<strong>Row</strong>&quot; displays them from left-to-right, and there are reverse options.</li>
    <li style="text-align: left; "><strong>Align Items</strong>: This controls how the non-absolute children of a container are aligned along its cross axis (i.e. the direction perpendicular to the flex direction). You can stretch the children to fit the size of the cross axis, or align them to the start, end or centre.</li>
    <li><strong>Justify Content</strong>: This controls how the non-absolute children of a flex container are aligned along its main axis (i.e. the flex direction). You can align them to the start, end or centre, or align them from start to end with various spacing options.</li>
    <li><strong>Layout Direction</strong>: The layout direction of this panel and its children. You can choose to inherit from the parent container or choose between Left to Right and Right to Left.</li>
    <li><strong>Wrap</strong>: This controls what happens when children in the container have overflown on the main axis. You can enable wrapping on the cross axis in case of overflow.</li>
    <li><strong>Align Content</strong>: If wrapping is enabled, any items overflowing along the main axis will be laid out across new lines on the cross axis. This property controls how those wrapped lines are distributed along the cross axis.</li>
    <li><strong>Spacing</strong>: This lets you set the margin and padding for the panel (margin will not be available for UI layers). Clicking on any side in the border preview will allow you to edit its size, allowing you to also set all sides at once using the <img class="icon" src="../../assets/Images/Icons/Icon_Link.png" /> button. You can also set the horizontal and vertical gap used by the children of the container.</li>
  </ul>
  <p>The above flex properties are also present in Flex Panels.</p>
  <h3>Flex Panel Properties</h3>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_FlexProperties.png" />A Flex Panel contains the following main properties:</p>
  <ul class="colour">
    <li><strong>Size</strong>: The width and height of the panel. You can set the units to either pixels, percentage of the <a data-xref="{text}" href="../../GameMaker_Language/GML_Reference/Flex_Panels/Flex_Panels.htm#h">Containing Block</a> or automatic, which allows the panel to be automatically resized based on its contents (e.g. size of a Sprite placed inside it).</li>
    <li><strong>Min/Max Size</strong>: Set the minimum and maximum size of the panel in either pixels or a percentage.</li>
    <li><strong>Grow/Shrink</strong>: The grow and shrink values determine how a panel is sized in a container in relation to its siblings. A higher grow value will allow it to be larger in relation to other growing/shrinking panels in its container, and a higher shrink value will make it smaller.</li>
    <li><strong>Clip Contents</strong>: Enable this to clip drawing any contents under this container that exceed its current size. This is useful for windows that may contain more items that it can display at once.</li>
    <li><strong>Position</strong>: Set the position type of the panel.
      <ul>
        <li style="text-align: left; "><strong>Relative (default)</strong>: This panel will participate in the flow of its parent container and will take up space in it. Offsets will be relative to the panel&#39;s position within the flow.</li>
        <li style="text-align: left; "><strong>Absolute</strong>: This panel is removed from the flow of its parent and will not take up space. Offsets will be relative to the <a data-xref="{text}" href="../../GameMaker_Language/GML_Reference/Flex_Panels/Flex_Panels.htm#h">Containing Block</a> which may not be its direct parent.</li>
        <li style="text-align: left; "><strong>Static</strong>: The panel will behave like relative except it will ignore offsets and will not form a <a data-xref="{text}" href="../../GameMaker_Language/GML_Reference/Flex_Panels/Flex_Panels.htm#h">Containing Block</a> for its children.</li>
      </ul>
    </li>
    <li><strong>Align Self</strong>: This controls how this panel is aligned within its container on its cross-axis. This is a way of overriding the &quot;<strong>Align Items</strong>&quot; property set for the parent but only for this individual panel.</li>
    <li><strong>Offset</strong>: Set the offset for this panel from its left, right, top and bottom edges.</li>
  </ul>
  <p>A Flex Panel also contains flex and spacing properties, which are the same as described in the previous section for &quot;<strong>UI Layer Properties</strong>&quot;.</p>
  <h3>Element Properties</h3>
  <p><img class="center" src="../../assets/Images/Asset_Editors/UILayers/UIL_ElementProps.png" />For elements of all asset types, you can toggle visibility, change alignment, set the anchor for rotation, change the position, scale, rotation, colour, frame and animation speed.</p>
  <p>The &quot;Fill Container&quot; settings allow the element to be stretched to fit its containing Flex Panel either on one of the axes or both axes. You can choose whether to maintain aspect ratio or not. You can also tile the element throughout the containing Flex Panel.</p>
  <p>You will see some extra options based on the asset type:</p>
  <ul class="colour">
    <li><strong>Objects</strong>: You can modify the Variable Definitions of the instance and apply Creation Code.</li>
    <li><strong>Text (Fonts)</strong>: You can set text properties such as alignment, various spacing values and wrapping.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Rooms.htm">The Room Editor</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="../../Settings/The_Room_Manager.htm">The Room Manager</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2025 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Room Inheritance
-->
  <!-- TAGS
rooms_inheritance
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide To Using Buffers</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Guide To Using Buffers</span></h1>
  <p>A buffer (in programming) is basically a space within the system memory that is used to store small packets of data for just about anything (for example: data transfer, collisions, colour data, etc.). Since it is held in system memory it is very fast to access, and a buffer would generally be used for very short-term storage, like receiving network information before processing it, or for storing a checkpoint in your game (this is explained in the example given further down the page).</p>
  <p><img alt="Buffer Memory" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Memory.png" />Buffers are created by allocating a space in the system memory, calculated in <a class="glossterm" data-glossterm="byte" href="#">byte</a> <span class="glossextra">s</span>, which is then reserved for your game as long as your game is running or until you delete the buffer using the appropriate function (you can find all the GML buffer functions listed <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">here</a>). This means that even when your game is not in focus (for example, on a mobile device when you take a call the game will be put into the background) the buffer will still exist, however if the game is closed or re-started the buffer will be lost.</p>
  <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> Restarting the game will not clear or delete the buffer! But it will prevent any further access to the previously created buffer as the ID handle will have been lost, causing a memory leak which will crash your game eventually. So, when re-starting a game, remember to delete any buffers first.</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span> permits the creation of four different buffer types. The reason for this is that buffers are designed to be a highly optimised temporary storage medium, and as such you should create a buffer that is appropriate to the type of data that you wish it to store, otherwise you could get errors or cause a bottleneck in your code. Before explaining this further, let&#39;s look at the four available buffer types (defined as <strong>constants </strong>in GML):</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_fixed</span></td>
        <td><br />
          A buffer of a fixed size in bytes. The size is set when the buffer is created and cannot be changed again.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_grow</span></td>
        <td><br />
          A buffer that will <i>grow</i> dynamically as data is added. You create it with an initial size (which should be an approximation of the size of the data expected to be stored), and then it will expand to accept further data that overflows this initial size.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_wrap</span></td>
        <td><br />
          A buffer where the data will <i>wrap</i>. When the data being added reaches the limit of the buffer size, the overwrite will be placed back at the start of the buffer, and further writing will continue from that point.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_fast</span></td>
        <td><br />
          This is a special &quot;stripped down&quot; buffer that is extremely fast to read/write to. However it can only be used with <span class="inline"><span class="inline">buffer_u8</span></span> data types, and must be 1 byte aligned. (Information on <b>data types</b> and <b>byte alignment</b> can be found further down this page).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Those are the buffer types available to you when using <span data-keyref="GameMaker Name">GameMaker</span>, and which one you choose will greatly depend on the use you wish to put it to. For example, a grow buffer would be used for storing a &quot;snapshot&quot; of data to create a save game since you do not know the actual amount of data that is going to be placed in it, or a fast buffer would be used when you know that the values you are working with are all between 0 and 255 or -128 and 127, for example when processing <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> data from an image.</p>
  <p><img alt="Buffer Types" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Types.png" />When creating a buffer, you should always try to create it to a size that is appropriate to the type, with the general rule being that it should be created to accommodate the maximum size of data that it is to store, and if in doubt, use a grow buffer to prevent overwrite errors.</p>
  <p>The actual code to create a buffer would look something like this:</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br />
    That would create a fixed buffer of 16384 bytes and byte-aligned to 2, with the function returning a buffer handle that is stored in a variable for later referencing of this buffer.</p>
  <p>When reading and writing data to a buffer, you do it in &quot;chunks&quot; of data defined by their &quot;data type&quot;. The &quot;data type&quot; sets the number of bytes allocated within the buffer for the value being written, and it is essential that you get this correct otherwise you will get some very strange results (or even errors) for your code.</p>
  <p>Buffers are written to (and read from) <strong>sequentially</strong>, in that one piece of data is written after another, with each piece of data being of a set type. This means that you should ideally be aware of what data you are writing to the buffer at all times. These data types are defined in GML by the following constants:</p>
  <div data-conref="../assets/snippets/buffer_data_type_constants.hts"> </div>
  <p>So, say you have created a buffer and you want to write information to it, then you would use something like the following code:</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>looking at the example above you can see that you can write different types of data to a buffer at the same time (you are only limited to a specific data type when using the <em>fast </em>buffer type), and this data will be added into the buffer sequentially (although its actual position in the buffer will depend on its byte-alignment, explained below). This is the same for reading information from the buffer too, and in the case of the example given above, you would read from the buffer in the same order that you wrote the data, checking for the same data type, e.g.:</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>As you can see, you read out information in the same order that you read it into the buffer. For further information on how to add and remove data from the buffer please see the examples given below.</p>
  <p>If you have been reading through this page you will have seen references to the <strong>byte-alignment </strong>of a buffer. This basically refers to the position that new data will stored at within a given buffer. How does this work? Well, for a single byte aligned buffer, each piece of data is written to the buffer sequentially, with each new data piece being added directly after the previous. However a 2 byte aligned buffer will write each piece of data to intervals of 2 bytes, so that even if your initial write is 1 byte of data, the next write will be moved to align to two bytes:</p>
  <p><img alt="Buffer Byte Alignment" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Buffer_Byte_Alignment.png" />So, if your byte-alignment is set to, say, 4 bytes and you write a single piece of data which is 1 byte in size then do a buffer <strong>tell </strong>(a tell gets the current position for reading/writing for the buffer), you&#39;ll get an <strong>offset </strong>of 1 byte (the offset in this case is the number of bytes from the start of the buffer to the current read/write position).</p>
  <p>However, if you write another piece of data, also 1 byte in size, <em>then </em>do a buffer tell, you&#39;ll get an offset of 5 bytes (even though you have only written 2 bytes of data) as the alignment has padded the data to align it with the 4 byte buffer alignment.</p>
  <p>Basically, what this means is that alignment will only affect <em>where </em>things are written to, so if you do a buffer tell after you write something, it&#39;ll return the current write position which immediately follows the data you&#39;ve previously written. Note, however, that if you then write another piece of data, internally the buffer will move the write position along to the next multiple of the alignment size before actually writing the piece of data.</p>
  <p>Below we have a couple of examples of how to use buffers in a project:</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Buffer Checkpoint</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">A simple example of how a buffer can be used in any <span data-keyref="GameMaker Name">GameMaker</span> game for any platform, is the function <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. This function will take a &quot;snapshot&quot; of the current game state and save it to a pre-defined buffer, which can then be read from to load the game at that point again.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> This function is very limited and it is designed for the beginner to get a checkpoint system up and running quickly, but more advanced users may prefer to code their own system using the File functions, due to the fact that the game will not save any of the dynamic resources that you can create at run-time like data structures, surfaces, added sprites, etc...</p>
    <p class="dropspot">The first thing we need to do is create a new object to control the saving and loading, so you would make one and give it a <strong>Create Event</strong>. In this event, you could place the following code:</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">The first line creates a grow buffer (since we don&#39;t know the final size of the saved data) of 1024 bytes and aligned to 1 byte. A variable is then created to check against and see if the game has been saved or not (this will be used for loading).</p>
    <p class="dropspot">Next we would add a <strong>Keypress Event</strong> (for example) in which we will save the current game state to the created buffer:</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">The above will first set the control variable to <span class="inline">true </span>(so that this is saved when we save the game to the buffer) and then seek to the start of the buffer before writing the current save state into it. Why do we use <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Well, as mentioned already on this page, you read and write to a buffer from the last position that data was added to it. This means that if you don&#39;t set the buffer tell back to the start then when you save you will be adding the data into the buffer at the current buffer read/write position. So, we use the function <span class="inline">buffer_seek()</span> to move the tell to the buffer start.</p>
    <p class="dropspot">We have now saved the current game state to a buffer. The next step would be to code how to load it, probably in another <strong>Keypress Event</strong>:</p>
    <p class="code">if (StateSaved) <br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">The game will then be loaded at the end of the event in which you place the above code.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> This is only for use in the same room, and not for generating complete saved games for after your game has been closed or restarted!</p>
    <p class="dropspot">The final thing to add to the controller object is some &quot;clean up&quot; code. Buffers are stored in memory and as such if you do not clean up when you are finished with them, you can get memory leaks that will eventually lag and crash your game. So you would probably add a <strong>Room End Event</strong> (from the <strong>Other</strong> event category) with:</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">This object can now be placed into a room and on a key press save and load the room state from a buffer.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Network Buffers</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">When working with the <span data-keyref="GameMaker Name">GameMaker</span> <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">networking functions</a>, you have to use buffers to create the data packet that is being sent over the network connection. This example intends to show how this is done, but due to the scope of the networking possibilities, it is only designed to show how to use the buffers themselves, and not the full networking system.</p>
    <p class="dropspot">The first thing we will show is the creation and use of a buffer for the client side of the network connection. This buffer will be used to create small data packets that can then be sent to the server, so in the <strong>Create Event</strong> of an instance we would assign a buffer like this:</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">We make the buffer small (256 bytes) - as it is not intended for holding large amounts of data - then we make it a grow buffer to ensure no errors should we need to add more data to be sent at any time, and the alignment is set to one for convenience.</p>
    <p class="dropspot">Now, let&#39;s say that we want our client to send data to the server. For that we need to create a buffer &quot;packet&quot;, and in this example we are going to send a <strong>Key Press Event</strong>, like when the player presses <em>Left Arrow </em>to move around the game. To do this we write the necessary data to the buffer first then send it off:</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Before writing to the buffer we have set the &quot;tell&quot; to the start of the buffer as networking always takes the data from the start of a buffer. We then write the check value (this will be used by the server to determine the type of event to be processed), then the key being used, and then the state of the key (in this case true for pressed). This buffer is then sent as a data packet by the network function. Note that we do not send the whole buffer! We only send the data written, using the buffer_tell function to return the current read/write position of the buffer (remember that writing to the buffer moves the &quot;tell&quot; to the end of what has been written). This is simply to avoid sending more bytes than is necessary.</p>
    <p class="dropspot">What about receiving the data on the server? The received data packet that must be written into the buffer on the server and then used to update the game. For that we would use the <a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">Networking Asynchronous Event</a> in the network controller object of the server, as this simplified code below shows:</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if (cmd == buffer_read(buff, buffer_u8)) <br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">The asynchronous event will contain a special temporary DS map <span class="inline">async_load</span> (it is removed from memory at the end of the event automatically) which contains different information depending on the type of incoming data from the network. In this case, we are assuming that the map has been checked and found to be a buffer data packet sent from a client. We now check the first piece of data that is in the buffer to see what kind of event has been sent - in this case the value &quot;1&quot; represents a key event, however when coding these things you should define constants to hold these values to simplify things - and then store the key being pressed and its state (<span class="inline">true</span> = pressed, <span class="inline">false</span> = released). This information would then be used to update all the clients with the new status of the sending client player.</p>
    <p class="note"><span data-conref="../assets/snippets/Tag_note.hts"> </span> The buffer that is created from the DS map is automatically removed at the end of the Network Asynchronous Event so there is no need to use <span class="inline" style="font-size: 14px">buffer_delete()</span> here.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Additional_Information.htm">Additional Information</a></div>
        <div style="float:right">Next: <a href="Bitwise_Operators.htm">Bitwise Operators</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <title>Script Functions vs. Methods</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Script Functions vs. Methods</h1>
  <p>This page covers essential information about using script functions vs. methods.</p>
  <h2>Basic Difference</h2>
  <p>A <a href="Script_Functions.htm">script function</a> is created with this syntax:</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>A <a href="Method_Variables.htm">method variable</a> is created with this syntax:</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>You should use the first syntax in scripts, to create global functions that can be called from anywhere in your game. Execution of script functions retains the scope that was in use when the function was called.</p>
  <p>You should use the second syntax when creating functions in <a href="Structs.htm">structs/constructors</a> and instances. This syntax creates a variable containing a method that is bound to the struct or instance that created the function and always uses that scope during execution.</p>
  <h2>Direct Calls</h2>
  <p>You can call both script functions and methods directly by using parentheses <span class="inline2">()</span>,  just like a <a href="Runtime_Functions.htm">runtime function</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>You can also use the function <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> to run a script function, although it&#39;s now a legacy function and not recommended for use.</p>
  <h2>Indirect Calls: Methods</h2>
  <p>You can store a reference to a method in another variable, to call it later through that different variable:</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">NOTE</span> See how the code doesn&#39;t put <span class="inline2">()</span> after <span class="inline2">reset_alpha</span>. That&#39;s because we&#39;re reading the method reference and not calling it.</p>
  <p>In this example, calling <span class="inline2">temp_1</span> will call <span class="inline2">reset_alpha</span>, as it stores a reference to that <strong>method</strong>.</p>
  <p>You are completely fine to pass around a method reference in this way. When using script functions though, there is a caveat.</p>
  <h2>Indirect Calls: Script Functions</h2>
  <p>You can also store a reference to a script function, in another variable:</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Now, you can call <span class="inline2">temp_1</span> by doing this:</p>
  <p class="code">temp_1();</p>
  <p>However, since this variable refers to a <strong>script function</strong>, it first has to convert it into a <strong>method</strong>, and then call it.</p>
  <p>This can easily result in increased memory usage, especially if you&#39;re calling it every frame, because the engine now has to create a new method every frame for this call. </p>
  <p>So, what is the solution?</p>
  <ul class="colour">
    <li>Use <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> to call the script function via its reference, which will not create a method.</li>
    <li>Or, the better solution: convert your script function <a href="../GML_Reference/Variable_Functions/method.htm">into a method</a> when passing its reference.</li>
  </ul>
  <p>To implement the second solution, your code would look like this:</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>This is creating a new method from the <span class="inline2">reset_x</span> script function, using <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Calling <span class="inline2">temp_1()</span> now using parentheses will not increase memory usage, as the method is already created for you.</p>
  <p>Again, this only applies if you&#39;re calling a script function <strong>indirectly</strong>, via a reference stored in a variable. Calling it directly doesn&#39;t cause such problems.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="GML_Overview.htm">GML Code Overview</a></div>
        <div>Next: <a data-xref="{title}" href="Functions/Static_Variables.htm">Static Variables</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>
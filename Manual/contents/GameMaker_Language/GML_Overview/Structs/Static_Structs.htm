<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Static Struct</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining static structs for constructor functions" />
  <meta name="rh-index-keywords" content="Static Structs" />
  <meta name="search-keywords" content="Static Structs, static_get, static_set, is_instanceof" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Static Struct</span></h1>
  <p>Every function has a &quot;static struct&quot;, where its static variables are stored. You can get that struct using <span class="inline3_func"><a data-xref="{title}" href="../../GML_Reference/Variable_Functions/static_get.htm">static_get</a></span>:</p>
  <p class="code">function counter() {<br />
        static count = 0;<br />
        return count ++;<br />
    }<br />
    <br />
    repeat (10) counter();<br />
    <br />
    // Get static struct of counter()<br />
    var _static_counter = static_get(counter);<br />
    <br />
    // Both of these read the same variable<br />
    show_debug_message(counter.count); // 10<br />
    show_debug_message(_static_counter.count); // 10
  </p>
  <p>This is also true for <a href="../Structs.htm#constr">constructor functions</a>. Each constructor has a static struct, where its static variables and static methods are stored.</p>
  <p>Every struct created from the constructor accesses its static variables from that static struct.</p>
  <div data-conref="../../../assets/snippets/Note_Warning_Static_Struct_Call_Once.hts"> </div>
  <h2 id="h">Static Chain</h2>
  <p>When you use constructor inheritance, those constructors form a &quot;static chain&quot; - a chain of static structs where each child links to its parent.</p>
  <p>For example, let&#39;s say you have a constructor <span class="inline2">item</span>, and a constructor <span class="inline2">potion</span> which is a child of <span class="inline2">item</span>:</p>
  <p class="code">function item() constructor {}<br />
    <br />
    function potion() : item() constructor {}<br />
    <br />
    var _potion = new potion();
  </p>
  <p>You can get the static struct of <span class="inline2">potion</span> using <span class="inline2">static_get(potion)</span> - this is where the static variables for <span class="inline2">potion</span> are stored. Let&#39;s call this <span class="inline2">static_potion</span>.</p>
  <p>Now, if you call <span class="inline2">static_get(static_potion)</span>, you will get the static struct for <span class="inline2">item</span>! This is the same struct you would get from <span class="inline2">static_get(item)</span>.</p>
  <p class="code">function item () constructor {}<br />
    function potion () : item () constructor {}<br />
    <br />
    var _potion = new potion();<br />
    var _static_potion = static_get(potion);<br />
    <br />
    show_debug_message(static_get(item) == static_get(_static_potion)); // true (1)
  </p>
  <p>This is because <span class="inline2">item</span> is the parent of the <span class="inline2">potion</span> constructor, so the static struct for <span class="inline2">item</span> is linked to the static struct for <span class="inline2">potion</span>.</p>
  <p>The static structs of the top-level constructor functions, i.e. those that don&#39;t have a parent constructor, share the same parent struct. This struct is the &quot;root&quot; static struct, which has <span class="inline2">undefined</span> as its parent struct: </p>
  <p class="code">var _static_item = static_get(item);         // the static struct of item<br />
    var _root = static_get(_static_item);        // the static struct of all top-level static structs<br />
    var _must_be_undefined = static_get(_root);  // undefined</p>
  <p>This shared struct is the root parent struct of <em>all</em> structs and defines the default <span class="inline3_func">toString</span> function that&#39;s called when the struct is converted to string.</p>
  <p>This means that you can get the full static chain of a struct as follows:</p>
  <p class="code">static_chain = [];<br />
    var _node = static_get(potion);                        // the static struct to start at<br />
    while (!is_undefined(_node))<br />
    {<br />
        array_push(static_chain, _node);<br />
        _node = static_get(_node);<br />
    };<br />
    <br />
    array_foreach(static_chain, show_debug_message);       // output the path to the root struct
  </p>
  <h2>Same Variable Name in Parent &amp; Child Constructor</h2>
  <p>As static variables belong to the constructor in which they&#39;re defined, it is possible to define a static variable in a child constructor with the same name as a static variable of the parent constructor. For example: </p>
  <p class="code">function shape () constructor<br />
    {<br />
        static count = 0;<br />
        count++;<br />
        <br />
        static shapes = [];<br />
        array_push(shapes, self);<br />
    }<br />
    function rectangle () : shape () constructor<br />
    {<br />
        static count = 0;<br />
        count++;<br />
    }<br />
    function square () : rectangle () constructor<br />
    {<br />
        static count = 0;<br />
        count++;<br />
    }<br />
    function ellipse () : shape () constructor<br />
    {<br />
        static count = 0;<br />
        count++;<br />
    }</p>
  <p>Each shape now has its own <span class="inline2">count</span> static variable that keeps track of the number of items of that shape. Child shapes will increment the <span class="inline2">count</span> of their parent shapes as well, as they run their parents&#39; constructors in addition to their own.</p>
  <p class="code">s1 = new shape();        // Added 1 shape<br />
    s2 = new rectangle();    // Added 1 rectangle (and therefore also 1 shape)<br />
    s3 = new square();       // Added 1 square (and therefore also 1 rectangle and 1 shape)<br />
    s4 = new ellipse();      // Added 1 ellipse (and therefore also 1 shape)<br />
    <br />
    show_debug_message($&quot;Number of shapes: {shape.count}&quot;);          // 4<br />
    show_debug_message($&quot;Number of rectangles: {rectangle.count}&quot;);  // 2<br />
    show_debug_message($&quot;Number of squares: {square.count}&quot;);        // 1<br />
    show_debug_message($&quot;Number of ellipses: {ellipse.count}&quot;);      // 1
  </p>
  <h2 id="h2">How the Dot Operator Looks Up a Variable Name</h2>
  <p>Let&#39;s say you&#39;re looking for a specific variable in a struct, using the dot operator (i.e. <span class="inline2">struct.variable_name</span>).</p>
  <p>If the struct contains a non-static variable with that name, the dot operator returns that variable. If it doesn&#39;t, the dot operator returns the first variable in the static chain with that name, checking the current static struct, and then traversing back the entire static chain, if needed, until a variable with that name is encountered. If the variable name cannot be found anywhere in the static chain, <span data-keyref="GameMaker Name">GameMaker</span> will throw an error.</p>
  <p>For example:</p>
  <p class="code">function root() constructor {<br />
        static show = function() {<br />
            show_debug_message(&quot;root&quot;);<br />
        }<br />
    }<br />
    <br />
    function child() : root() constructor { }<br />
    <br />
    function child_with_static_func() : root() constructor {<br />
        static show = function() {<br />
            show_debug_message(&quot;child_with_static_func&quot;);<br />
        }<br />
    }<br />
    <br />
    function child_with_func() : root() constructor {<br />
        show = function() {<br />
            show_debug_message(&quot;child_with_func&quot;);<br />
        }<br />
    }<br />
    <br />
    child1 = new child();<br />
    child1.show();<br />
    <br />
    child2 = new child_with_static_func();<br />
    child2.show();<br />
    <br />
    child3 = new child_with_func();<br />
    child3.show();
  </p>
  <p>The following happens in the above code: </p>
  <ul class="colour">
    <li><span class="inline2">child1</span> is a <span class="inline2">child</span>, which has no <span class="inline3_func">show()</span> method of its own but inherits from <span class="inline2">root</span>. <span class="inline3_func">root.show()</span> is called and <span class="inline2">&quot;root&quot;</span> is output.</li>
    <li><span class="inline2">child2</span> is a <span class="inline2">child_with_static_func</span>, which has a static <span class="inline2">show()</span> method. This method is called, which outputs <span class="inline2">&quot;child_with_static_func&quot;</span>.</li>
    <li><span class="inline2">child3</span> is a <span class="inline2">child_with_func</span>, which inherits from <span class="inline2">root</span> but also has its own (non-static) <span class="inline3_func">show()</span> method. It calls its own <span class="inline3_func">show()</span> method, outputting <span class="inline2">&quot;child_with_func&quot;</span>.</li>
  </ul>
  <h2>Parent&#39;s Static Variable or Method</h2>
  <p>In certain situations you may want to access a static variable or method of the parent constructor from within the child constructor. To achieve this, you can go up the static chain and access the parent&#39;s static variable: </p>
  <p class="code">function parent() constructor<br />
    {<br />
        static init = function() { show_debug_message(&quot;Parent Innit?&quot;); }<br />
    }<br />
    <br />
    function child() : parent() constructor<br />
    {<br />
        static init = function()<br />
        {<br />
            var _static = static_get(self);<br />
            var _static_parent = static_get(_static);<br />
            _static_parent.init(); // Calls the parent&#39;s init()<br />
            <br />
            show_debug_message(&quot;Child Innit!&quot;);<br />
        }<br />
    }
  </p>
  <h2>Checking Inheritance</h2>
  <p>You can use <span class="inline3_func"><a data-xref="{title}" href="../../GML_Reference/Variable_Functions/is_instanceof.htm">is_instanceof</a></span> to check if a struct belongs to the given constructor, or has the constructor as a parent.</p>
  <p>This is done by checking if your struct has the given constructor&#39;s static struct anywhere in its static chain.</p>
  <div data-conref="../../../assets/snippets/is_instanceof_example.hts"> </div>
  <h2 id="h1">Changing The Static Struct</h2>
  <p>The function <span class="inline3_func"><a data-xref="{title}" href="../../GML_Reference/Variable_Functions/static_set.htm">static_set</a></span> is provided to let you change the static struct of a function (constructor or not). This way you can change what static variables are available to a constructor and its structs, and also change the &quot;static chain&quot; that a constructor belongs to.</p>
  <p>The recommended use-case for this function is deserialisation. If you&#39;re loading structs from JSON, those structs won&#39;t belong to any constructors, however you can change that by using <span class="inline3_func"><a data-xref="{title}" href="../../GML_Reference/Variable_Functions/static_set.htm">static_set</a></span> to &quot;apply&quot; a constructor to a struct, so that that struct receives its shared static variables and you can run <span class="inline3_func"><a data-xref="{title}" href="../../GML_Reference/Variable_Functions/is_instanceof.htm">is_instanceof</a></span> to check its kind.</p>
  <div data-conref="../../../assets/snippets/static_set_example.hts"> </div>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Structs.htm">Structs</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="../Struct_Forbidden_Variables.htm">Struct Forbidden Variables</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Static Structs
-->
  <!-- TAGS
static_structs
-->
</body>
</html>
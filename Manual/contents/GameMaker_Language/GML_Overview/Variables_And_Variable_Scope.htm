<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables And Variable Scope</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining variables and their scoping in GML" />
  <meta name="rh-index-keywords" content="Variables And Variable Scope" />
  <meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Variables And Variable Scope</span></h1>
  <p>Variables are the basic unit for most programming operations. Like any programming language, <b>GML</b> uses them.</p>
  <p>They are used to store information in the device&#39;s memory for later (or instant) use, and given a name so you can refer to them in <a href="Runtime_Functions.htm">runtime</a> and <a href="Script_Functions.htm">script functions</a>.</p>
  <p>A variable in <b>GML</b> can store many different <a data-xref="{title}" href="Data_Types.htm">Data Types</a>, like a real number (e.g.: <span class="inline2">100</span>, <span class="inline2">2.456575</span>, <span class="inline2">-56</span>, etc.), a string (e.g.: <span class="inline2">&quot;Hello world!&quot;</span>), an integer (e.g.: <span class="inline2">1</span>, <span class="inline2">556</span>, <span class="inline2">-7</span>), or a boolean (<span class="inline2">true</span> or <span class="inline2">false</span>), as well as other things:</p>
  <p class="code">var _num = 126.4545;<br />
    var _str = &quot;Hello World&quot;;<br />
    new_num = _num * 100;<br />
    global.my_string = _str + &quot; I said&quot;;</p>
  <p>You can also use variables to hold the values returned from functions, for example:</p>
  <p class="code">var _id = instance_nearest(x, y, obj_Tree);<br />
    root = sqrt(1000);<br />
    global.str = string_upper(&quot;Hello World&quot;);</p>
  <p>So, a variable is something that we can name and use to store a value for later use in one or more operations.</p>
  <p>A good &quot;real world&quot; example of a variable is the speed of something, e.g. the speed of a car. A car&#39;s speed is clearly <em>variable</em>, because at some point in time the car will be standing still (i.e. its speed is equal to 0), at another point in time the car will be driving (i.e. its speed is greater than 0). When the car accelerates or slows down, its speed changes. So it makes sense that if you want to store the car&#39;s speed in a <span data-keyref="GameMaker Name">GameMaker</span> game that you store it in a <strong>variable</strong>. In the game, you&#39;d e.g. set the variable to 0 when the game starts and change it whenever you want the car to change its speed.</p>
  <h2>Variable Assignment</h2>
  <p>In GML, like in many programming languages, you first have to create a variable &quot;assignment&quot; before you can use it. This basically means that you tell the computer the name you wish to use for the variable and assign it an initial value. The variable is then given a place in memory to store the value or perform operations on it. A variable assignment takes the form:</p>
  <p class="code">&lt;variable&gt; = &lt;expression&gt;;</p>
  <p>An expression can be a simple value but can also be more complicated, so, rather than assigning a value to a variable, you can also add a value to the current value of the variable using <span class="inline2">+=</span>, for example:</p>
  <p class="code">a = 100;   // Assigning a simple value<br />
    b = 200;<br />
    c = 300;<br />
    a += b;    // Assigning with operation<br />
    a = b + c; // Assigning with expression</p>
  <p class="note"><span class="note">NOTE</span> The GameMaker Language will also accept <span class="inline2">:=</span> for assignments, although this is not typically the most common way to do it:</p>
  <p class="code">&lt;variable&gt; := &lt;expression&gt;;</p>
  <p>Similarly, you can subtract using <span class="inline2">-=</span>, multiply using <span class="inline2">*=</span>, divide using <span class="inline2">/=</span>, or use bitwise operators using <span class="inline2">|=</span>, <span class="inline2">&amp;=</span>, or <span class="inline2"><b>^=</b></span>. You can also add or subtract <i>one</i> from a value using <span class="inline2"><b>++</b></span>, <span class="inline2"><b>--</b></span>. For further information see the section on <a data-xref="{title}" href="Expressions_And_Operators.htm">Expressions And Operators</a>.</p>
  <p>Note that you <i>cannot</i> do the following (or any variation):</p>
  <p class="code">a = b = c = 4;</p>
  <p>And instead it should be done as:</p>
  <p class="code">a = 4;<br />
    b = 4;<br />
    c = 4;</p>
  <h2>Naming Rules</h2>
  <p>When forming variables in <b>GML</b> they must have a name that starts with a letter or the underscore symbol <span class="inline2">_</span> and can contain only letters, numbers, and the underscore symbol <span class="inline2">_</span> with a maximum length of 64 symbols. So, valid variable names are things like <span class="inline2">fish</span>, <span class="inline2">foo_bar</span>, <span class="inline2">num1</span>, or <span class="inline2">_str</span>, while invalid ones would be <span class="inline2">6fish</span>, <span class="inline2">foo bar</span>, or <span class="inline2">*num</span>.</p>
  <p>You cannot use the names of your assets (e.g. Sprites, Scripts, etc.) for your variables, unless you specify an instance or struct (or keywords like <a href="Variables/Global_Variables.htm"><span class="inline2">global</span></a>, <a href="Instance_Keywords.htm"><span class="inline2">self</span></a>) before such a name, e.g. if you have a script called <span class="inline2">Script1</span>, a variable called <span class="inline2">Script1</span> can be defined as <span class="inline2">self.Script1 = &lt;value&gt;;</span> in an instance or a struct. Doing this explicitly defines the scope of such a variable. For more information, see the section below.</p>
  <h2>Variable Scope</h2>
  <p>Variable scope tells which part of your code a variable belongs to, it is determined by where you first define it in your code. Variable scope also tells from where in your code you can access it. If you need to access variables that are in a different scope, you can change the scope.</p>
  <h3>Changing Scope</h3>
  <p>You can access variables in a different scope in two ways: </p>
  <ul class="colour">
    <li>The dot operator, e.g. <span class="inline2">a.b</span>, which means &quot;the variable <span class="inline2">b</span> of <span class="inline2">a</span>&quot;.</li>
    <li>The <a data-xref="{title}" href="Language_Features/with.htm">with</a> statement, e.g. <span class="inline2">with(a) {b = 10;}</span>, which means &quot;execute the following lines of code in <span class="inline2">a</span>&quot;.</li>
  </ul>
  <p>The variable <span class="inline2">a</span> can be either an instance or a struct. You can also use one of the <a data-xref="{title}" href="Instance_Keywords.htm">Instance Keywords</a> or the <span class="inline2">global</span> keyword.</p>
  <p>See <a data-xref="{title}" href="Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a> for detailed information.</p>
  <h3>Types of Scope</h3>
  <p>By default, when you assign variables in <a data-xref="{title}" href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">Object Events</a>, you assign them to <strong>instance </strong>variables, however there are actually four other main variable types when you program with <span data-keyref="GameMaker Name">GameMaker</span>, each with its own <strong>scope</strong>.</p>
  <p>The different kinds of variables and their scope are all outlined in the following pages:</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Variables/Local_Variables.htm">Local Variables</a></li>
    <li><a data-xref="{title}" href="Variables/Instance_Variables.htm">Instance Variables</a></li>
    <li><a data-xref="{title}" href="Variables/Global_Variables.htm">Global Variables</a></li>
    <li><a data-xref="{title}" href="Functions/Static_Variables.htm">Static Variables</a></li>
    <li><a data-xref="{title}" href="Variables/Constants.htm">Constants</a></li>
  </ul>
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"> </span> Constants aren&#39;t &quot;true&quot; variables since they&#39;re replaced by their underlying value by the <a href="../../Introduction/Compiling.htm">Compiler</a> and don&#39;t exist as variables in-game.</p>
  <h2>Built-in Variables</h2>
  <p>The GameMaker Language has multiple different built-in variables that can have any of the above-mentioned scopes (except <i>local</i>). These variables are special as they are included by default as part of the objects and the rooms in the game world. Some built-in global variables are listed in the section mentioned above, and the different parts of the manual for sprites, rooms, objects, etc., also outline the built-in variables available in each case.</p>
  <p>Examples of built-in instance variables are:</p>
  <ul class="colour">
    <li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li>
    <li><a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li>
  </ul>
  <p>And examples of built-in global variables are:</p>
  <ul class="colour">
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm">view_xport</a></span></li>
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Instances/instance_count.htm">instance_count</a></span></li>
    <li><span class="inline"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Rooms/room.htm">room</a></span></li>
  </ul>
  <p>Most built-in variables can be changed and set like other variables, and some can even be <a data-xref="{title}" href="Arrays.htm">Arrays</a>, only you don&#39;t have to set them to create them like you would a regular variable as they will already be initialised to a default value.</p>
  <h2>Variable Functions</h2>
  <p>Finally, there are a number of functions that are dedicated to setting, getting or checking variables in some way, available from the following page:</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Variable Functions</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML Overview</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Data_Types.htm">Data Types</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>
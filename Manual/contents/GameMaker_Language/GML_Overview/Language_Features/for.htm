<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>for</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the for function" />
  <meta name="rh-index-keywords" content="for" />
  <meta name="search-keywords" content="for" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">for</span></h1>
  <p>One of the most used ways to iterate over a <a class="glossterm" data-glossterm="statement" href="#">statement</a> (or statements) multiple times is to use a <span class="inline2">for</span> loop, which has this form:</p>
  <p class="code">for (&lt;assignment&gt;; &lt;expression&gt;; &lt;operation&gt;;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>This works as follows - First the assignment is executed which assigns a value to a variable, then the <a class="glossterm" data-glossterm="expression" href="#">expression</a> is evaluated and, if it is <span class="inline2">true</span>, the statements in the curly brackets <span class="inline2">{ }</span> are executed. Next the operation is performed on the assigned variable and then the expression is evaluated again. This loop will continue until the expression is found to be <span class="inline2">false</span>.</p>
  <p>Now, this may sound complicated when written like that, but you should interpret it as:</p>
  <ol>
    <li>The first assignment initialises the for-loop</li>
    <li>The expression tests whether the loop should be ended</li>
    <li>The statement is performed</li>
    <li>The operation is performed</li>
    <li>Go back to step 2 and perform the expression again and continue or exit the loop</li>
  </ol>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> You can use a <span class="inline2">var</span> statement in the assignment part to initialise multiple variables. See <a data-xref="{title}" href="../Variables/Local_Variables.htm">Local Variables</a>.</p>
  <p>This is extremely useful for doing repetitive tasks that would involve multiple lines of code in any other way, and is commonly used as a counter for evaluating arrays, drawing things, setting incremental values, etc. The following code example illustrates a typical use for this type of statement:</p>
  <p class="code">for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        draw_text(32, 32 + (i * 32), string(i) + &quot;. &quot;+ string(scr[i]));<br />
    }</p>
  <p>The above code initialises a <span class="inline2">for</span> loop, starting at 0 and counting up to (and including) 9, and then uses the loop value of <span class="inline2">i</span> to draw the values stored in an array down the screen. Note how the <span class="inline2">for</span> loop variable <span class="inline2">i</span> is used to not only loop through the array, but to draw a number as well as tell <span data-keyref="GameMaker Name">GameMaker</span> where to draw the values to in the room. This flexibility is one of the main reasons why <span class="inline2">for</span> loops are so important in programming.</p>
  <p><strong>When should you use a <span class="inline">for</span> loop?</strong> Anytime you need to perform a fixed number of iterations over one or more statements while keeping track of the <a class="glossterm" data-glossterm="iteration" href="#">iteration</a> that is currently being run and using that iteration value.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> You will see multiple examples when working with other people of the variables <span class="inline2">i</span> and <span class="inline2">j</span> being used for the loop counter variable. These are <b>not</b> obligatory variable names and you can use anything like <span class="inline2">a</span> or <span class="inline2">foo</span> or whatever. The use of <span class="inline2">i</span> and <span class="inline2">j</span> is simply a standard convention in programming.</p>
  <p>It is worth noting that you can use the special <span class="inline2"><a data-xref="{title}" href="break.htm">break</a></span> and <span class="inline2"><a data-xref="{title}" href="continue.htm">continue</a></span> statements within a <span class="inline2">for</span> loop too. Using <span class="inline2">break</span> will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished, e.g.:</p>
  <p class="code">var _inst = noone;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        _inst = instance_find(obj_Enemy_Parent, i);<br />
        if (instance_exists(_inst))<br />
        {<br />
            if (_inst.object_index == obj_Enemy_Melee)<br />
            {<br />
                break;<br />
            }<br />
        }<br />
    }<br />
    target = _inst;</p>
  <p>The above code loops through the 10 nearest instances of the given &quot;parent&quot; object, and if an instance is found it checks the instance object ID, and if it is an instance of <span class="inline2">obj_Enemy_Melee</span> then the loop is ended using <span class="inline2"><a data-xref="{title}" href="break.htm">break</a></span> and the handle assigned to a variable (if no instance is found, then the keyword <span class="inline2"><span class="inline"><a href="../Instance_Keywords.htm">noone</a></span></span> will be added to the variable).</p>
  <p>An example of using <span class="inline2">continue</span> in a <span class="inline2">for</span> loop would be:</p>
  <p class="code">var _val = 0;<br />
    for (var i = 0; i &lt; 10; i += 1)<br />
    {<br />
        if (val_array[i] &lt;= 0)<br />
        {<br />
            continue;<br />
        }<br />
        _val += val_array[i];<br />
    }<br />
    draw_text(32, 32, &quot;Positive Values Total = &quot; + string(_val));</p>
  <p>This code will check the value stored in each array position of a 10 length 1D <a href="../Arrays.htm">array</a>, and if any are less than or equal to 0 it will <span class="inline2">continue</span> the loop, meaning that the current iteration will end, <span class="inline2">i</span> will be incremented, and the next loop iteration will be started. If the value is greater than 0, then it is added to the local variable <span class="inline2">_val</span>, and after the loop is finished the total value is drawn to the screen.</p>
  <p>For more examples of loop keywords please see the sections on <span class="inline2"><a data-xref="{title}" href="repeat.htm">repeat</a></span>, <span class="inline2"><a data-xref="{title}" href="while.htm">while</a></span>, and <span class="inline2"><a data-xref="{title}" href="do___until.htm">do / until</a></span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Language_Features.htm">Language Features</a></div>
        <div style="float:right">Next: <a href="switch.htm">switch</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
for
-->
  <!-- TAGS
for
-->
</body>
</html>
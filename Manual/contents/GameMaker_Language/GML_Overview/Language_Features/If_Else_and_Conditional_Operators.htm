<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else and Conditional Operators</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">if / else and Conditional Operators</span></h1>
  <p>A fundamental feature of most programming languages is the ability to ask a simple question that gives a boolean <span class="inline">true</span> or <span class="inline">false</span> answer, and in GML this is achieved using the <span class="inline">if</span> keyword. A simple <span class="inline">if</span> condition takes an <a class="glossterm" data-glossterm="expression" href="#">expression</a> and will perform one or more <a class="glossterm" data-glossterm="statement" href="#">statement</a><span class="glossextra">s</span> if the expression resolves as <span class="inline">true</span>, with the following basic form:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Here you are saying that if an expression resolves to <span class="inline">true</span> then do something. Note that the &quot;then&quot; part of the condition is <em>implicit</em>, but there is a <span class="inline">then</span> keyword that can be used (although it&#39;s almost always omitted), so you can also create conditionals like this:</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Apart from <span class="inline">if</span> and <span class="inline">then</span>, you can also use the <span class="inline">else</span> keyword to do something else if the expression being checked evaluates as <span class="inline">false</span>. This &quot;<span class="inline">if... then... else...</span>&quot; form looks like this:</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>In this case the expression will be evaluated, and if it evaluates to <span class="inline">false</span>, the statement after <span class="inline">else</span> is executed, otherwise the initial statement is executed (it&#39;s <span class="inline">true</span>).</p>
  <p class="note"><span class="note">NOTE</span> In the GameMaker language any value that is less than or equal to 0 will evaluate as <span class="inline">false</span>, while any value that is greater than 0 will evaluate as <span class="inline">true</span>.</p>
  <h2>Grouping Expressions &amp; Statements</h2>
  <p>It is a good habit to always put parentheses <span class="inline2">()</span> around the expressions and curly brackets <span class="inline2">{}</span> around the statements in the <span class="inline">if</span> (otherwise only the first statement will be executed), and take a new line in the block for each statement, for example:</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Note that while this is slightly more verbose, it means that there is no ambiguity in the code and that it will compile correctly on all platforms at all times. However, the initial example may not, as explained on the section in the <a href="../Expressions_And_Operators.htm">Expressions And Operators</a> page.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> When comparing two values to see if they are equal, you should use the &quot;<span class="inline">==</span>&quot; operator, and only use the &quot;<span class="inline">=</span>&quot; one for assignment. Currently GameMaker will treat them as interchangeable, but this may change in the future and your code is cleaner and more obvious when using the correct operators for comparisons and assignments.</p>
  <p>To give a proper example of using <span class="inline">if</span>, consider the following code which will move an instance towards the position <span class="inline">x=200</span> in the room when placed in the Step Event:</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <h2>Compound Checks</h2>
  <p>Note that you can also do <i>compound</i> checks in an <span class="inline">if</span>, ie: check various values or expressions in the same statement. These checks can use the various <a href="../Expressions_And_Operators.htm">Combining Operators</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, and <span class="inline">^^</span> xor). When you do this, <span data-keyref="GameMaker Name">GameMaker</span> will evaluate each of them one at a time, and depending on how they evaluate, then the rest may be skipped. For example:</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = game_get_speed(gamespeed_fps);<br />
    }</p>
  <p>Here we are checking using the <span class="inline">&amp;&amp;</span> &quot;and&quot; operator, so it&#39;s checking if <em>both </em>of the conditions in the <span class="inline">if</span> evaluate to <span class="inline">true</span>, and if the first one is <span class="inline">false</span> then the second one won&#39;t even be checked.</p>
  <p>This is called &quot;short circuiting&quot; the code, so when combining expressions to check, you should ensure that the &quot;cheapest&quot; one for performance is always the first to avoid evaluating the more expensive ones if the first evaluates to <span class="inline">false</span>.</p>
  <p>In a similar vein, if a condition will can be evaluated as <span class="inline">true</span> or <span class="inline">false</span> at compile time, then the entire condition will be removed from the code, for example, say you have a <a href="../Variables/Constants.htm">macro</a> <span class="inline">DEBUG_ON</span> for debugging and it can be either <span class="inline">true</span> or <span class="inline">false</span> - when it is set to <span class="inline">false</span> then the following code block will be stripped from the game when it is compiled:</p>
  <p class="code">if (DEBUG_ON == true)<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <h2>Ternary Operators</h2>
  <p>You can also perform <b>conditional operations</b> (also know as <b>ternary</b> operations), which is essentially a &quot;shortcut&quot; way of performing a basic <span class="inline">if</span>. It has the following syntax:</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>The conditional operator &quot;<span class="inline">?</span>&quot; will return one of two given values depending on whether the condition expression evaluates to <span class="inline">true</span> or <span class="inline">false</span>, for example:</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>The above code will check the value of &quot;x&quot; against the value of half the room width and then if it is less it will set &quot;<span class="inline">temp_x</span>&quot; to 32 otherwise &quot;<span class="inline">temp_x</span>&quot; will be room width - 32. Here are a few more examples of use:</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);</p>
  <p>You can nest conditional operations, but if you do then each operation will need to be enclosed in brackets, for example:</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p>Note that conditional operations must be part of an expression and cannot go on the left-hand side of an assignment. For example, the following statement doesn&#39;t work: </p>
  <p class="code">(--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="../GML_Overview.htm">GML Code Overview</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Addressing Variables In Other Instances</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>
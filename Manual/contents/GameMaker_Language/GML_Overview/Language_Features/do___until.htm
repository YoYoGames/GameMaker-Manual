<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>do / until</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until loop" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">do / until</span></h1>
  <p>A <span class="inline">do</span> statement is another way of iterating over one or more <a class="glossterm" data-glossterm="statement" href="#">statement</a><span class="glossextra">s</span> multiple times, and is really a &quot;<span class="inline">do... until</span>&quot; statement as you cannot have one without the other since you are telling <span data-keyref="GameMaker Name">GameMaker</span> to do something until a specific <a class="glossterm" data-glossterm="expression" href="#">expression</a> returns <span class="inline">true</span>. It has this form:</p>
  <p class="code">do<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }<br />
    until (&lt;expression&gt;);</p>
  <p>The statement (which can be a code block of multiple statements within curly brackets <span class="inline">{}</span>) is executed until the expression is found to be <span class="inline">true</span>, and the initial statement is <strong>always executed at least once</strong>. Below you can find an example of a typical way to use <span class="inline">do... until</span>:</p>
  <p class="code">do<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }<br />
    until (place_free(x, y));</p>
  <p>The above code tries to place the current object at a free position and will set the x and y variables at least once, and then perform as many <a class="glossterm" data-glossterm="iteration" href="#">iteration</a><span class="glossextra">s</span> as required until the <span class="inline">place_free()</span> expression returns <span class="inline">true</span>.</p>
  <p><strong>When should you use a <span class="inline">do</span> / <span class="inline">until</span> loop?</strong> It should be used any time you want to repeat one or more statements, but don&#39;t actually know how many times it has to repeat, and want to ensure that the statements are run <em>at least once</em> before the loop ends.</p>
  <p>You can also use the <a href="break.htm"><span class="inline">break</span></a> and <a href="continue.htm"><span class="inline">continue</span></a> statements within your <span class="inline">do</span> loops. Using <span class="inline">break</span> will immediately exit the loop and move on to any code that is in the event or function after the loop should have finished, e.g.:</p>
  <p class="code">var _id = noone;<br />
    do<br />
    {<br />
        _id = list[| 0];<br />
        if (instance_exists(_id))<br />
        {<br />
            break;<br />
        }<br />
        ds_list_delete(list, 0);<br />
    }<br />
    until (ds_list_empty(list));<br />
    <br />
    target = _id;
  </p>
  <p>In the above code, we create a local variable and set it to hold the keyword <a href="../Instance_Keywords.htm">noone</a>. We then perform a <span class="inline">do / until</span> loop checking the first position of a DS list to see if it holds a valid instance ID, and if it does then we <span class="inline">break</span> the loop, otherwise the value for the list position is deleted. After the loop is terminated (either by the <span class="inline">break</span> or because the list is empty) the local variable value is then assigned to the instance variable <span class="inline">target</span>.</p>
  <p>An example of using continue in a <span class="inline">do / until</span> loop would be:</p>
  <p class="code">do<br />
    {<br />
        var _x = random(room_width);<br />
        var _y = random(room_height);<br />
    <br />
        if (instance_position(_x, _y, obj_Enemy))<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br />
    }<br />
    until (instance_number(obj_Enemy) &gt;= 10);
  </p>
  <p>This code will generate a random room position then check if an instance of the object <span class="inline">obj_Enemy</span> exists at that position. If it does, the current loop iteration is terminated using <span class="inline">continue</span> and a new iteration is started, and if it doesn&#39;t then an instance of the object <span class="inline">obj_Enemy</span> is created at the random position. The loop will only terminate when there are 10 or more instances of the object in the room.</p>
  <p>One final note: be careful with your <span class="inline">do</span> loops, as you can easily make them loop forever, in which case your game will hang and not react to any user input anymore and they will have to force close it.</p>
  <p>For more examples of loop keywords please see the sections on <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="while.htm"><span class="inline">while</span></a>, and <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Language_Features.htm">Language Features</a></div>
        <div style="float:right">Next: <a href="for.htm">for</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->
</body>
</html>
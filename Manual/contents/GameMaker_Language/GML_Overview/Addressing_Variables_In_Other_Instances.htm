<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Addressing Variables In Other Instances</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Addressing Variables In Other Instances</h1>
  <p>In the sections dedicated to <a href="Variables_And_Variable_Scope.htm">variables</a> you found out how to create and use variables within a single instance, or on a global scope, but what happens if you want one instance to access a variable in another, different instance?</p>
  <p>There are many cases when you may want to do this, for example in a collision with a bullet object, you may want to find out how much damage the bullet does by accessing a variable in the bullet, or you might want to stop the motion of all the balls in a puzzle, or you might want to move the main character to a particular position, or any number of other situations you typically come across in any game. Thankfully the GameMaker Language comes equipped with mechanisms to achieve this.</p>
  <p>One of the most common methods of accessing or changing a variable in <em>another </em>instance is to use its object name as an identifier, and then use a point <span class="inline2">.</span> to tell <span data-keyref="GameMaker Name">GameMaker</span> that the variable being referenced should be assigned or changed within that specific object&#39;s instance. This is known as &quot;dot notation&quot;, and its syntax is as follows:</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>In practice it would look like this:</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>With the above code you are setting the speed of an instance of <span class="inline2">obj_ball</span>. However if you have more than one instance of the given object in the room, <em>then it will apply to ALL of them equally</em> - unless you are using <b>HTML5</b>, in which case it will affect only <em>one</em>, but you have no way of knowing which one it will affect - so if you need to access all instances of an object, you should be using <span class="inline2"><a data-xref="{title}" href="Language_Features/with.htm">with</a></span>, as that is 100% cross-platform compatible. In general, this format should only be used when you have a single instance of the object in the room, or (as you will see in the next part) when you have a specific <i>instance <b>handle</b></i>.</p>
  <p class="note"><span data-conref="../../assets/snippets/Tag_note.hts"> </span> Reading a variable using an object handle with dot notation (e.g. <span class="inline2">spd = obj_ball.speed</span>) will return the value from the first instance of that object that was created in the room. This is affected by the <a data-xref="{text}" href="../../The_Asset_Editors/Room_Properties/Room_Properties.htm#creation_order">Instance Creation Order</a> if the instances were set up in <a data-xref="{title}" href="../../The_Asset_Editors/Rooms.htm">The Room Editor</a>.</p>
  <p>You can also access a single instance of an object when there are multiple instances within the room using the unique <b>instance name</b> to tell <span data-keyref="GameMaker Name">GameMaker</span> exactly which instance we wish to address. The <b>instance name constant</b> is the unique identifying constant that is given to each and every instance added to a room in your game. You can find this constant by double-clicking on an instance in <a data-xref="{title}" href="../../The_Asset_Editors/Rooms.htm">The Room Editor</a>:</p>
  <p><img alt="The instance constant in the room editor" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Instance_Constant.png" />Note that this name can be be edited and given a more descriptive name - although the name <em>must</em> be unique to the entire game - and it can be used as the left-hand side of the point:</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <div data-conref="../../assets/snippets/Note_Instance_Name_Stores_Handle_InGame.hts"> </div>
  <p>By far the most common and practical method, however, is to use a <i>variable</i> on the left of the point, as long as the variable in question<i> has stored a valid <b>instance handle</b></i>. The following examples illustrate this.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if (instance_exists(_inst))<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>Example 1 finds an instance at the mouse position and changes its speed. Example 2 creates a new instance, changes its direction and sets a custom <span class="inline2">target</span> variable. Both examples target one specific instance using its <strong>instance handle</strong>.</p>
  <p>In Example 1, there is an <span class="inline3_func"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Instances/instance_exists.htm">instance_exists</a></span> call in the code block. This is because using the point method to access or change another instances value will give an error and crash the game if the instance does not exist, and there is the possibility that this is the case in that example.</p>
  <p>We don&#39;t need the check however in Example 2 because we <i>know</i> that the instance is there since we created it. However, if there is <i>any</i> possibility that the instance could be destroyed, deactivated, or otherwise removed from the room while using this method, you should <i>always</i> check beforehand using the <span class="inline3_func"><a data-xref="{title}" href="../GML_Reference/Asset_Management/Instances/instance_exists.htm">instance_exists</a></span> function.</p>
  <p>Note that you cannot use the special <a href="Instance_Keywords.htm">keyword</a> <span class="inline2">all</span> with this method to target all instances (e.g.: <span class="inline2">all.val = 10;</span> would give an error), but you <i>can</i> use the keywords <span class="inline2">other</span> and <span class="inline2">self</span> without issues. For example, using <span class="inline2">other</span> in a <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">collision event</a> to target the instance you collided with:</p>
  <p class="code">// Example 3<br />
    other.hp -= 10;<br />
    <br />
    if (other.hp &lt;= 0)<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }
  </p>
  <p>It is also important to note that you cannot use any function by itself as the left-hand side of an assignment. For example, the following code would give you an error:</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>The return value for the expression in that code example is an instance handle (for the nearest instance) and so it must be enclosed in brackets <span class="inline2">( )</span> to be used in this way and properly address the instance required. The above code would be correctly written as:</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var _inst = instance_nearest(x, y, obj);<br />
    _inst.speed = 0;
  </p>
  <p>These are all perfectly valid ways of reading, changing and setting variables in other instances, and work because the point is actually an <i>operator</i>. It takes a value as the left <a class="glossterm" data-glossterm="operand" href="#">operand</a> and a variable as the right operand, and returns the address of this particular variable in the indicated object or instance. All the object names, constants, IDs, etc. simply represent values and these can be dealt with like any other value.</p>
  <p>The other way to reference variables in another instance is to use the GameMaker Language statement <a data-xref="{title}" href="Language_Features/with.htm">with</a>: </p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if (instance_exists(_enemy))<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="GML_Overview.htm">GML Overview</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="Expressions_And_Operators.htm">Expressions And Operators</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>
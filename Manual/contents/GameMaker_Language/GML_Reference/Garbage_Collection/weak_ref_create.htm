<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>weak_ref_create</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for weak_ref_create" />
  <meta name="rh-index-keywords" content="weak_ref_create" />
  <meta name="search-keywords" content="weak_ref_create,weak references" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">weak_ref_create</span></h1>
  <p>With this function you can create a <a class="glossterm" data-glossterm="weak reference" href="#">weak reference</a> to a <a href="../../GML_Overview/Structs.htm">struct</a> or <a href="../../../Quick_Start_Guide/Objects_And_Instances.htm">instance</a> which can then be used to check if it is still &quot;alive&quot; (referenced) or not in the game. You supply the reference to the struct or instance you want to track, and the function will return another struct which is a weak reference to that struct.</p>
  <h3>Usage Notes</h3>
  <ul class="Disc">
    <li>You can check whether a reference is &quot;strong&quot; or &quot;weak&quot; by using the function <span class="inline3_func"><a data-xref="{title}" href="../Variable_Functions/instanceof.htm">instanceof</a></span>, as a strong reference will return either <span class="inline2">&quot;struct&quot;</span> or the name of the constructor function that created the struct, or <span class="inline2">&quot;weakref&quot;</span> if it&#39;s a weak reference.</li>
    <li>The weak reference struct will have a variable <span class="inline2">ref</span> which can be accessed to get the strong reference to the struct in question, unless it has been garbage collected, in which case it will return <span class="inline2">undefined</span>.</li>
    <li>Passing an instance is the same as passing the <span class="inline2">self</span> variable of that instance, as the returned weak ref points to that <span class="inline2">self</span> struct</li>
  </ul>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">weak_ref_create</span>(struct_to_track)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>struct_to_track</td>
        <td><span data-keyref="Type_Struct"><a href="../../GML_Overview/Structs.htm" target="_blank">Struct</a></span> or <span data-keyref="Type_ID_Instance"><a href="../Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">Object Instance</a></span></td>
        <td>The struct or instance that you want to create a weak reference for</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Struct_WeakRef"><a href="weak_ref_create.htm" target="_blank">Struct Weak Reference</a></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">inventory_ref = <span data-field="title" data-format="default">weak_ref_create</span>(inventory);</p>
  <p>The above code creates a weak reference to a struct and stores it in an instance variable for later use.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Garbage_Collection.htm">Garbage Collection</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="weak_ref_alive.htm">weak_ref_alive</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
weak_ref_create
-->
  <!-- TAGS
weak_ref_create
-->
</body>
</html>
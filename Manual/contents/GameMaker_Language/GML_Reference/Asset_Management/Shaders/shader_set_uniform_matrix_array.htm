<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>shader_set_uniform_matrix_array</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function shader_set_uniform_matrix_array" />
  <meta name="rh-index-keywords" content="shader_set_uniform_matrix_array" />
  <meta name="search-keywords" content="shader_set_uniform_matrix_array" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">shader_set_uniform_matrix_array</span></h1>
  <p>This function sets a shader constant to hold an array of matrix values.</p>
  <p>You must previously have gotten the &quot;handle&quot; of the constant using the function <span class="inline3_func"><a data-xref="{title}" href="shader_get_uniform.htm">shader_get_uniform</a></span>, and you will have to have previously initialised the array as an array of floating point values, where each successive group of 16 floats holds the contents of a 4x4 matrix.</p>
  <p>In the shader you&#39;d define the uniform as follows: </p>
  <p class="code">uniform mat4 u_mTransforms[MAX_TRANSFORMS];</p>
  <p>Every group of 16 floats in the array becomes directly accessible as an element of the uniform array, i.e. the first 16 array elements correspond to <span class="inline2">u_mTransforms[0]</span>, the next 16 elements to <span class="inline2">u_mTransforms[1]</span>, etc.</p>
  <p> </p>
  <div data-conref="../../../../assets/snippets/Note_Set_Uniforms_After_Shader_Set.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">shader_set_uniform_matrix_array</span>(handle, array);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>handle</td>
        <td><span data-keyref="Type_Handle_Shader_Uniform"><a href="shader_get_uniform.htm" target="_blank">Shader Uniform Handle</a></span></td>
        <td>The handle of the shader constant to set.</td>
      </tr>
      <tr>
        <td>array</td>
        <td><span data-keyref="Type_Array"><a href="../../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></td>
        <td>A previously initialised array of floating point values. Its length should be a multiple of 16, i.e. <span class="inline2">number_of_matrices * 16</span>.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">max_transforms = 32;<br />
    arr_transform_matrices = array_create(max_transforms * 16);<br />
    var _arr_matrix = matrix_build_identity();<br />
    var i = 0;<br />
    repeat(max_transforms)<br />
    {<br />
        array_copy(arr_transform_matrices, i * 16, _arr_matrix, 0, 16);<br />
        i++;<br />
    }<br />
    <br />
    shader_set(sh_dynamic_batch);<br />
    shader_params = shader_get_uniform(sh_dynamic_batch, &quot;u_mTransforms&quot;);<br />
    shader_set_uniform_matrix_array(shader_params, arr_transform_matrices);<br />
    vertex_submit(vb_batch, pr_trianglelist, texture);<br />
    shader_reset();
  </p>
  <p>The above code example shows how to initialise an array of matrices and send it to a shader.</p>
  <p>First the maximum number of transforms is defined and an array is created to hold that number of transforms. An identity matrix is then copied to the array to initialise each individual matrix. A shader <span class="inline2">sh_dynamic_batch</span> that defines a <span class="inline2">mat4</span> array uniform named &quot;u_mTransforms&quot; is then set as the current shader and the handle to the uniform is retrieved with <span class="inline3_func"><a data-xref="{title}" href="shader_get_uniform.htm">shader_get_uniform</a></span>. <span class="inline3_func"><span data-field="title" data-format="default">shader_set_uniform_matrix_array</span></span> is then called to set the value of that uniform to the given array. Finally, a vertex buffer stored in the variable <span class="inline2">vb_batch</span> is then submitted.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Shaders.htm">Shaders</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="shader_reset.htm">shader_reset</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
shader_set_uniform_matrix_array
-->
  <!-- TAGS
shader_set_uniform_matrix_array
-->
</body>
</html>
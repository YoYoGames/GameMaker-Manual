<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>skeleton_slot_colour_set</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function skeleton_slot_colour_set" />
  <meta name="rh-index-keywords" content="skeleton_slot_colour_set" />
  <meta name="search-keywords" content="skeleton_slot_colour_set,skeleton_slot_color_set" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>skeleton_slot_colour_set</h1>
  <p>With this function you can set an attachment slot colour and alpha so all sprites attached to it will be drawn with these blend values. Keep in mind that the instance sprite can have a blend colour and alpha setting (<a href="../../Sprite_Instance_Variables/image_blend.htm"><span class="inline">image_blend</span></a> and <a href="../../Sprite_Instance_Variables/image_angle.htm"><span class="inline">image_alpha</span></a>), as can the attachment (see the function <a href="../Attachments/skeleton_attachment_create_colour.htm"><span class="inline">skeleton_attachment_create_colour()</span></a>), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">skeleton_slot_colour_set(slot, colour, alpha);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>slot</td>
        <td><span data-keyref="Type_String">String</span></td>
        <td>The slot name to set, a string</td>
      </tr>
      <tr>
        <td>colour</td>
        <td><span data-keyref="Type_Constant_Colour">Colour</span></td>
        <td>The colour to set, either an integer, a constant, or a hex value.</td>
      </tr>
      <tr>
        <td>alpha</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The alpha to set from 0 to 1.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">slot_list = ds_list_create();<br />
    skeleton_find_slot(mouse_x, mouse_y, slot_list);<br />
    if (!ds_list_empty(slot_list)) <br />
    {<br />
        for (var i = 0; i &lt; ds_list_size(slot_list); ++i)<br />
        {<br />
            if skeleton_slot_colour_get(slot_list[| i]) != c_white<br />
            {<br />
                skeleton_slot_colour_set(slot_list[| i], c_white, 1);<br />
            }<br />
        }<br />
    }</p>
  <p>The above code creates a DS list and then populates it with the slot names found at the position of the mouse in the room. It then loops through the slot list and resets the colour for the found slots to white with an alpha of 1 if the colour is not already white.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Slots.htm">Slots</a></div>
        <div style="float:right">Next: <a href="skeleton_slot_colour_get.htm">skeleton_slot_colour_get</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
skeleton_slot_colour_set
skeleton_slot_color_set
-->
  <!-- TAGS
skeleton_slot_colour_set
-->
</body>
</html>
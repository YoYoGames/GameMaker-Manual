<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>skeleton_attachment_create_colour</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function skeleton_attachment_create_colour" />
  <meta name="rh-index-keywords" content="skeleton_attachment_create_colour,skeleton_attachment_create_color" />
  <meta name="search-keywords" content="skeleton_attachment_create_colour,skeleton_attachment_create_color" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">skeleton_attachment_create_colour</span></h1>
  <p>This function creates an attachment for the instance&#39;s skeletal animation sprite at runtime using a sprite asset from your game, blended with the given colour and alpha value.</p>
  <p>When you create your skeletal animation sprite, you can assign <i>attachment slots</i> and <i>attachments</i> to go in them. These are simply images (sprites) that are separate from the animation but when attached will move along with the bone they are attached to. Normally you would assign these attachments in your animation program (Spine), but with this function you can create your own at runtime using a sprite asset from your game. The function requires that you give the attachment a name (as a string) and then set the <a href="../../Sprite_Instance_Variables/sprite_index.htm"><span class="inline">sprite_index</span></a> and <a href="../../Sprite_Instance_Variables/image_index.htm"><span class="inline">image_index</span></a> to use, as well as the x and y origin (which can be different from that defined by the sprite in the sprite properties), and you can also set any transforms that you wish to be applied to the image when attached as well as the colour to be blended with the image and its alpha (transparency) value. The function will return <span class="inline2">1</span> if the attachment was successfully created, or <span class="inline2">-1</span> if it wasn&#39;t (you supplied an invalid sprite index, or the base sprite is not a Spine sprite).</p>
  <p>It is worth noting that the instance&#39;s sprite can have a blend colour and alpha setting (<span class="inline2"><a data-xref="{title}" href="../../Sprite_Instance_Variables/image_blend.htm">image_blend</a></span> and <span class="inline2"><a data-xref="{title}" href="../../Sprite_Instance_Variables/image_alpha.htm">image_alpha</a></span>), as can the attachment slot (see the function <span class="inline3_func"><a data-xref="{title}" href="../Slots/skeleton_slot_colour_set.htm">skeleton_slot_colour_set</a></span>), and so the final colour and alpha that the assigned attachment sprite for the slot will have will be a composite of all these values.</p>
  <div data-conref="../../../../../../assets/snippets/Skeleton_attachment_exists_before_create.hts"> </div>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">skeleton_attachment_create_colour</span>(name, sprite, ind, xorigin, yorigin, xscale, yscale, rot, colour, alpha);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>name</td>
        <td><span data-keyref="Type_String"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></td>
        <td>The name (as a string) of the attachment to create.</td>
      </tr>
      <tr>
        <td>sprite</td>
        <td><span data-keyref="Type_Asset_Sprite"><a href="../../../../../../The_Asset_Editors/Sprites.htm" target="_blank">Sprite Asset</a></span></td>
        <td>The sprite_index to get the attachment image from.</td>
      </tr>
      <tr>
        <td>ind</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The image_index to get the attachment image from.</td>
      </tr>
      <tr>
        <td>xorigin</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The x origin for the image being used.</td>
      </tr>
      <tr>
        <td>yorigin</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The y origin for the image being used.</td>
      </tr>
      <tr>
        <td>xscale</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The horizontal scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half, etc.</td>
      </tr>
      <tr>
        <td>yscale</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The vertical scaling of the image, as a multiplier: 1 = normal scaling, 0.5 is half, etc.</td>
      </tr>
      <tr>
        <td>rot</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The rotation of the image: 0 = normal, 90 = turned 90° counter-clockwise, etc.</td>
      </tr>
      <tr>
        <td>colour</td>
        <td><span data-keyref="Type_Constant_Colour"><a href="../../../../Drawing/Colour_And_Alpha/Colour_And_Alpha.htm" target="_blank">Colour</a></span></td>
        <td>The colour value to use (A constant, integer or hex value).</td>
      </tr>
      <tr>
        <td>alpha</td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The alpha value to use (from 0 to 1).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Real"><a href="../../../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span> (1 if successful, -1 if not)</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code"><span data-field="title" data-format="default">skeleton_attachment_create_colour</span>(&quot;sword&quot;, spr_Weapons, 0, 0, 80, 1, 1, 90, c_red, 1);<br />
    <span data-field="title" data-format="default">skeleton_attachment_create_colour</span>(&quot;knife&quot;, spr_Weapons, 1, 0, 45, 1, 1, 90, c_yellow, 1);<br />
    <span data-field="title" data-format="default">skeleton_attachment_create_colour</span>(&quot;crossbow&quot;, spr_Weapons, 0, 10, 30, 1, 1, 0, c_white, 0.5);<br />
    skeleton_attachment_set(&quot;slot_leftHand&quot;, choose(&quot;sword&quot;, &quot;knife&quot;, &quot;crossbow&quot;));
  </p>
  <p>The above code would check the currently assigned attachment name for the slot named &quot;slot_leftHand&quot; and if an empty string is returned, a new sprite is attached.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Attachments.htm">Attachments</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="skeleton_attachment_replace.htm">skeleton_attachment_replace</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2025 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
skeleton_attachment_create_colour
skeleton_attachment_create_color
-->
  <!-- TAGS
skeleton_attachment_create_colour
-->
</body>
</html>
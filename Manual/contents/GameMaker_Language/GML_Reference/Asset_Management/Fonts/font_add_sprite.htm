<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>font_add_sprite</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function font_add_sprite" />
  <meta name="rh-index-keywords" content="font_add_sprite" />
  <meta name="search-keywords" content="font_add_sprite" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">font_add_sprite</span></h1>
  <p>With this function you can use a <a href="../../../../The_Asset_Editors/Sprite_Properties/Sprite_Strips.htm">sprite strip</a> to create a new font asset, where each sub-image would be an individual symbol or letter. The index is the UTF-8 map number for the first character to use and the ranges to use are the same as you would for a normal font, starting with &quot;!&quot; but remember that you should only include what you need and that you should be using the <span class="inline3_func"><a data-xref="{title}" href="../../Strings/ord.htm">ord</a></span> function to get the correct UTF-8 value for the starting letter. The created sprite font will then have the sub-images set to an individual glyph from the font, where the &quot;first&quot; glyph will have the image_index of 0. You can define &quot;space&quot; as being any character you want, for example a single line the size that you want the space to be, and all spaces in text will be rendered at that width (but the image chosen will <i>never</i> be rendered), or if you don&#39;t supply a sprite for space then the width of the widest character in the sprite font will be used instead.</p>
  <p>You can also set the spacing for the font to be proportional (<span class="inline2">true</span>) or not (<span class="inline2">false</span>), where a proportional font is spaced based on the actual width of the letters (so the letter &quot;i&quot; takes less room than the letter &quot;w&quot;, for example) while a non-proportional font will be spaced based on the sub-image width, like a monospaced font. Finally, you can define the space to leave between each letter when writing, and this can be any integer value, with 0 being no space (the letters will &quot;touch&quot; if proportional).</p>
  <p>The function returns a handle that should be stored in a variable as this will be needed in all further code that refers to this font. <span data-conref="../../../../assets/snippets/Note_font_add_invalid_handle.hts"> </span></p>
  <p>It is also worth noting that there cannot be any <i>spaces</i> in the character map, so that if you, for example, use &#39;.&#39; and &#39;0&#39; but not &#39;/&#39;, you need to either include &#39;/&#39; anyway or leave a blank sub-image between the two used characters.</p>
  <p>The sprite itself can be a sprite asset from <a data-xref="{title}" href="../../../../Introduction/The_Asset_Browser.htm">The Asset Browser</a> or one loaded from a file using <span class="inline3_func"><a data-xref="{title}" href="../Sprites/Sprite_Manipulation/sprite_add.htm">sprite_add</a></span> first to get the handle of the loaded sprite (which is then used in the function). It&#39;s important to note that for the font alignment functions (like <span class="inline3_func"><a data-xref="{title}" href="../../Drawing/Text/draw_set_halign.htm">draw_set_halign</a></span>) to work as expected when using a sprite font, the sprite should have its origin set to the <i>top left corner</i>. If you use other values then you will need to take the origin offset into consideration when drawing text using the font.</p>
  <div data-conref="../../../../assets/snippets/Note_Font_Remove_With_font_delete.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">font_add_sprite</span>(spr, first, prop, sep);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>spr</td>
        <td><span data-keyref="Type_Asset_Sprite"><a href="../../../../The_Asset_Editors/Sprites.htm" target="_blank">Sprite Asset</a></span></td>
        <td>The sprite to add a font based on.</td>
      </tr>
      <tr>
        <td>first</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The index of the first available character.</td>
      </tr>
      <tr>
        <td>prop</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Set as proportional font or not.</td>
      </tr>
      <tr>
        <td>sep</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The space to leave between each letter.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Asset_Font"><a href="../../../../The_Asset_Editors/Fonts.htm" target="_blank">Font Asset</a></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">global.font = font_add_sprite(spr_HUD_Font, ord(&quot;!&quot;), true, 2);</p>
  <p>The above code will create a new font asset from a sprite asset and store the handle of the new font in the variable <span class="inline2">global.font</span> for later use.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Fonts.htm">Fonts</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="font_add_sprite_ext.htm">font_add_sprite_ext</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2025 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
font_add_sprite
-->
  <!-- TAGS
font_add_sprite
-->
</body>
</html>
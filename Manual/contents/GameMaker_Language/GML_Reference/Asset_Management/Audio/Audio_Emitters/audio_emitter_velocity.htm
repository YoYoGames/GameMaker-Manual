<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_emitter_velocity</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_emitter_velocity" />
  <meta name="rh-index-keywords" content="audio_emitter_velocity" />
  <meta name="search-keywords" content="audio_emitter_velocity" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">title</span></h1>
  <p>This function can be used to give an emitter <em>Doppler </em>effects and simulate audio motion based on the vector that is resolved from the given relative x, y and z positions. If the emitter itself is not ever going to move you would normally not need to set these values, but, for example, if you are making a scrolling shooter game where the enemies come from the right and scroll to the left, you would set this to have a velocity of (hspeed, 0, 0) in the create event of the enemies (and update the emitter of each instance in the step event using <a href="audio_emitter_position.htm"><span class="inline">audio_emitter_position()</span></a>) to give any sounds emitted by the enemy instances the correct Doppler as they pass the player instance (which in turn would be using the function <a href="../Audio_Listeners/audio_listener_position.htm"><span class="inline">audio_listener_position()</span></a> to set the <i>listener</i> to the correct position).</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">audio_emitter_velocity(emitter, vx, vy, vz);</p>
  <table>
    <tbody>
      <tr class="rh-cursor-column">
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>emitter</td>
        <td><span data-keyref="Type_ID_Audio_Emitter">Audio Emitter ID</span></td>
        <td>The index of the emitter to change.</td>
      </tr>
      <tr>
        <td>vx</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The x vector value (default 0).</td>
      </tr>
      <tr>
        <td>vy</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The y vector value (default 0).</td>
      </tr>
      <tr>
        <td>vz</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The z vector value (default 0).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">s_emit = audio_emitter_create();<br />
    audio_emitter_position(s_emit, room_width, 0, 0);<br />
    audio_emitter_velocity(s_emit, -5, 0, 0);</p>
  <p>The above code creates an audio emitter and assigns its index to the variable &quot;s_emit&quot;. This emitter is then placed at a position within the room and given a velocity of 5 pixels per step along the x axis (it will Doppler correctly in relation to the listener as if it had a horizontal speed of 5 pixels per step).</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Audio_Emitters.htm">Audio Emitters</a></div>
        <div style="float:right">Next: <a href="audio_emitter_falloff.htm">audio_emitter_falloff</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
audio_emitter_velocity
-->
  <!-- TAGS
audio_emitter_velocity
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_emitter_gain</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_emitter_gain" />
  <meta name="rh-index-keywords" content="audio_emitter_gain" />
  <meta name="search-keywords" content="audio_emitter_gain" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>audio_emitter_gain</h1>
  <p>This function sets the maximum gain (volume) for the sound. The perceived volume for a sound can change depending on the <a href="audio_emitter_falloff.htm">fall-off value</a> and the position it has relative to the <i>listener</i>, but by setting the gain with this function, the full volume will never exceed the specified gain value. The image below illustrates how gain affects the volume of the emitter when fall-off is greater than 0:</p>
  <p><img alt="Audio Gain Diagram" class="center" src="../../../../../assets/Images/Scripting_Reference/GML/Reference/Audio/Audio_Gain.png" />This function will change the volume of the sound while it is being played as well all subsequent sounds played through the given emitter. Note that on some platforms you can have a gain of greater than 1, although a value of 1 is considered &quot;full volume&quot; and anything greater may introduce audio clipping or distortion.</p>
  <p class="note"><b><span class="note">NOTE</span> </b>the final volume will also be influenced by the global audio gain that has been set by the function <span style="font-size:1px;"><a href="../audio_master_gain.htm"><span class="inline">audio_master_gain()</span></a></span>.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">audio_emitter_gain(emitter, gain);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>emitter</td>
        <td><span data-keyref="Type_ID_Audio_Emitter">Audio Emitter ID</span></td>
        <td>The index of the emitter to change.</td>
      </tr>
      <tr>
        <td>gain</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The maximum gain (default 1).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">if (up)<br />
    {<br />
        gain += 0.05;<br />
        if gain &gt;= 1 up = false;<br />
    }<br />
    else<br />
    {<br />
        gain -= 0.05;<br />
        if gain &lt;= 0 up = true;<br />
    }<br />
    <br />
    audio_emitter_gain(s_emit, gain);
  </p>
  <p>
    The above code increases the variable <span class="inline2">gain</span>, setting the gain of the emitter <span class="inline2">s_emit</span> to this value,
    unless it has reached the max value of 1, which then reduces it, starting the cycle again the other way.
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Audio_Emitters.htm">Audio Emitters</a></div>
        <div style="float:right">Next: <a href="audio_emitter_pitch.htm">audio_emitter_pitch</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
audio_emitter_gain
-->
  <!-- TAGS
audio_emitter_gain
-->
</body>
</html>
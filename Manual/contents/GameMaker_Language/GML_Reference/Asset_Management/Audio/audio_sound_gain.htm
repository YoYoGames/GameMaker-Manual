<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_sound_gain</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_sound_gain" />
  <meta name="rh-index-keywords" content="audio_sound_gain" />
  <meta name="search-keywords" content="audio_sound_gain" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>audio_sound_gain</h1>
  <p>With this function you can fade a sound in or out over a given length of time, or it can be used to set the sound gain instantly.</p>
  <p>The time is measured in milliseconds, and the function requires that you input a final level of gain for the sound to have reached by the end of that time. This gain can be between 0 (silent) and any value greater than 0, although normally you&#39;d consider the maximum volume as 1. Anything over 1 can be used but, depending on the sound used and the platform being compiled to, you may get distortion or clipping when the sound is played back. Note that the gain scale is linear, and to instantly change the gain, simply set the time argument to 0.</p>
  <p>This function will affect <i>all</i> instances of the sound that are playing currently in the room if the index is a sound resource, and the final volume will be the volume at which all further instances of the sound will be played. However if you have used the index returned from a function like <a href="audio_play_sound.htm"><span class="inline">audio_play_sound()</span></a> it will only affect that one instance of the sound.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">audio_sound_gain(index, volume, time);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>index</td>
        <td><span data-keyref="Type_Asset_Sound">Sound Asset</span> or <span data-keyref="Type_ID_Sound_Instance">Sound Instance ID</span></td>
        <td>The index of the sound to set the gain for.</td>
      </tr>
      <tr>
        <td>volume</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>Value for the music volume.</td>
      </tr>
      <tr>
        <td>time</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The length for the change in gain in milliseconds.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">if val<br />
    {<br />
        var snd = audio_play_sound(snd_fountain);<br />
        audio_sound_gain(snd, 0, 0);<br />
        audio_sound_gain(snd, 1, 5000);<br />
    }</p>
  <p>The above code checks a variable and if it returns <span class="inline">true</span> it will then assign the index of a sound to be played to the local variable &quot;snd&quot;. This variable is then used to reduce the volume of that specific sound to 0 and fade up to full volume over 5 seconds.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Audio.htm">Audio</a></div>
        <div style="float:right">Next: <a href="audio_sound_get_gain.htm">audio_sound_get_gain</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
audio_sound_gain
-->
  <!-- TAGS
audio_sound_gain
-->
</body>
</html>
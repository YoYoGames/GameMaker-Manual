<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_play_sound_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="audio_play_sound_ext" />
  <meta name="search-keywords" content="audio_play_sound_ext" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">audio_play_sound_ext</span></h1>
  <p>This function plays any sound asset in your game using any combination of parameters.</p>
  <div data-conref="../../../../assets/snippets/Note_Triggers_Audio_Playback_Event.hts"> </div>
  <p>The function takes its parameters as a <a data-xref="{bookmarkText}" href="../../../GML_Overview/Structs.htm#struct">struct</a>. Depending on the parameters that you provide, the function behaves like <span class="inline2"><a data-xref="{title}" href="audio_play_sound.htm">audio_play_sound</a></span>, <span class="inline2"><a data-xref="{title}" href="audio_play_sound_at.htm">audio_play_sound_at</a></span> or <span class="inline2"><a data-xref="{title}" href="Audio_Emitters/audio_play_sound_on.htm">audio_play_sound_on</a></span>. The only key that is strictly required in the struct is the <span class="inline2">sound</span> key.</p>
  <p>The full list of keys is as follows: </p>
  <ul class="Disc">
    <li><span class="inline2">sound</span> (<span data-keyref="Type_Asset_Sound"><a href="../../../../The_Asset_Editors/Sounds.htm" target="_blank">Sound Asset</a></span> or <span data-keyref="Type_ID_Audio_Queue"><a href="Audio_Buffers/audio_create_play_queue.htm" target="_blank">Audio Queue ID</a></span>, required)</li>
    <li><span class="inline2">priority</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>, optional), defaults to 0</li>
    <li><span class="inline2">loop</span> (<span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span>, optional), defaults to <span class="inline2">false</span></li>
    <li><span class="inline2">gain</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>, optional), defaults to 1.0</li>
    <li><span class="inline2">offset</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>, optional), defaults to the asset-level offset</li>
    <li><span class="inline2">pitch</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>, optional), defaults to 1.0</li>
    <li><span class="inline2">listener_mask</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>, optional), defaults to the emitter-level listener mask/global listener mask</li>
    <li><span class="inline2">emitter</span> (<span data-keyref="Type_ID_Audio_Emitter"><a href="Audio_Emitters/audio_emitter_create.htm" target="_blank">Audio Emitter ID</a></span>, optional), defaults to undefined</li>
    <li><span class="inline2">position</span> (<span data-keyref="Type_Struct"><a href="../../../GML_Overview/Structs.htm" target="_blank">Struct</a></span>, optional), defaults to undefined
      <ul>
        <li><span class="inline2">x</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
        <li><span class="inline2">y</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
        <li><span class="inline2">z</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
        <li><span class="inline2">falloff_ref</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
        <li><span class="inline2">falloff_max</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
        <li><span class="inline2">falloff_factor</span> (<span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>)</li>
      </ul>
    </li>
  </ul>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">audio_play_sound_ext</span>(params);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>params</td>
        <td><span data-keyref="Type_Struct"><a href="../../../GML_Overview/Structs.htm" target="_blank">Struct</a></span></td>
        <td>A struct containing the key-value pairs for each of the parameters that you want to set. The <span class="inline2">sound</span> key is required and takes a <span data-keyref="Type_Asset_Sound"><a href="../../../../The_Asset_Editors/Sounds.htm" target="_blank">Sound Asset</a></span> as a value.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_ID_Sound_Instance"><a href="audio_play_sound.htm" target="_blank">Sound Instance ID</a></span></p>
  <p> </p>
  <h4>Example 1: Playing a basic sound (similar to audio_play_sound)</h4>
  <p class="code"><span data-field="title" data-format="default">audio_play_sound_ext</span>({ sound: snd_ambience });</p>
  <p>The above code plays a sound &quot;snd_ambience&quot;. The sound instance gets a default priority of 0 and won&#39;t be looped. All other sound properties are default as they haven&#39;t been provided in the struct.</p>
  <p> </p>
  <h4>Example 2: Playing a sound on an emitter (similar to audio_play_sound_on)</h4>
  <p class="code">var _sound_params =<br />
    {<br />
        sound: snd_shot,<br />
        priority: 20,<br />
        gain: 1.2,<br />
        pitch: 2,<br />
        emitter: em_north_entrance<br />
    };<br />
    <span data-field="title" data-format="default">audio_play_sound_ext</span>(_sound_params);
  </p>
  <p>The above code first creates a temporary struct <span class="inline2">_sound_params</span>. It stores the settings to play a sound &quot;snd_shot&quot; with a priority of 20, a gain of 1.2 and a pitch of 2 on an existing emitter <span class="inline2">em_north_entrance</span>. It then plays the sound with those settings using <span class="inline2"><span data-field="title" data-format="default">audio_play_sound_ext</span></span>.</p>
  <p> </p>
  <h4>Example 3: Playing a sound at a given position in 3D audio space (similar to audio_play_sound_at)</h4>
  <p class="code">var _sound_params =<br />
    {<br />
        sound: snd_shot,<br />
        pitch: 1.1,<br />
        position:<br />
        {<br />
            x: 100,<br />
            y: 100,<br />
            z: 20<br />
        }<br />
    };<br />
    <span data-field="title" data-format="default">audio_play_sound_ext</span>(_sound_params);
  </p>
  <p>The above code creates a temporary struct <span class="inline2">_sound_params</span>. The struct stores the settings to play a sound &quot;snd_shot&quot; with a pitch of 1.1 at an x  of 100, a y of 100 and z of 20. The sound is then played with those settings using <span class="inline2"><span data-field="title" data-format="default">audio_play_sound_ext</span></span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Audio.htm">Audio</a></div>
        <div>Next: <a data-xref="{title}" href="audio_play_sound_at.htm">audio_play_sound_at</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
audio_play_sound_ext
-->
  <!-- TAGS
audio_play_sound_ext
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>typeof</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function typeof" />
  <meta name="rh-index-keywords" content="typeof" />
  <meta name="search-keywords" content="typeof" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">typeof</span></h1>
  <p>This function returns the data type of any given variable as a string.</p>
  <p> </p>
  <p>The possible return values are listed in the table below:</p>
  <table>
    <tbody>
      <tr>
        <th>String</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="inline">&quot;number&quot;</span></td>
        <td>The variable holds a real (floating point) number - this can include <span class="inline2">NaN</span> and <span class="inline2">infinity</span></td>
      </tr>
      <tr>
        <td><span class="inline">&quot;string&quot;</span></td>
        <td>The variable holds a string</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;array&quot;</span></td>
        <td>The variable references an array</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;bool&quot;</span></td>
        <td>The variable holds a boolean (<span class="inline2">true</span> / <span class="inline2">false</span>)</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;int32&quot;</span></td>
        <td>The variable holds a 32bit integer. This type isn&#39;t supported on HTML5.</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;int64&quot;</span></td>
        <td>The variable holds a 64 bit integer</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;ptr&quot;</span></td>
        <td>The variable holds a pointer</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;undefined&quot;</span></td>
        <td>The variable is undefined</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;null&quot;</span></td>
        <td>The variable holds a null value (this should not be seen normally)</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;method&quot;</span></td>
        <td>The variable holds a function reference</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;struct&quot;</span></td>
        <td>The variable holds a struct reference</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;ref&quot;</span></td>
        <td>The variable holds an instance reference</td>
      </tr>
      <tr>
        <td><span class="inline">&quot;unknown&quot;</span></td>
        <td>Value is unknown. This should <i>never</i> be seen and signifies that something has gone wrong at the most basic level like a memory overwrite</td>
      </tr>
    </tbody>
  </table>
  <p>Please note that there are cases when this function may not return the correct value for a <strong>method</strong>. Consider the following two function definitions:</p>
  <p class="code">a = function()<br />
    {<br />
        // something<br />
    }<br />
    <br />
    function b()<br />
    {<br />
        // Something<br />
    }
  </p>
  <p>Technically, these are both considered methods as they are binding a function to an instance scope variable, however calling <span class="inline3_func"><a data-xref="{title}" href="typeof.htm">typeof</a></span> on function <span class="inline3_func">b</span> will return &quot;number&quot; and <em>not </em>&quot;method&quot;, while calling it on <span class="inline3_func">a</span> will return &quot;method&quot;. This is due to the fact that methods created like the one for <span class="inline3_func">b</span> are assigned script indices (which are integer values), since this is the way that the compiler recognises script functions, even if the function was not defined in a script.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">typeof</span>(variable);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>variable</td>
        <td><span data-keyref="Type_Any"><a href="../../GML_Overview/Data_Types.htm#variable" target="_blank">Any</a></span></td>
        <td>The variable to get the data type of.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_String"><a href="../../GML_Overview/Data_Types.htm" target="_blank">String</a></span> (see table above)</p>
  <p> </p>
  <h4><b>Example:</b></h4>
  <p class="code">var _str = <span data-field="title" data-format="default">typeof</span>(global.ExtensionInput);<br />
    show_debug_message(&quot; <strong>global.ExtensionInput is a &quot; + _str);</strong></p>
  <p>The above code gets the data type held by the given global variable and returns the string to a local variable which is then used to output a message to the console.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Variable_Functions.htm">Variable Functions</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="method.htm">method</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
typeof
-->
  <!-- TAGS
typeof
-->
</body>
</html>
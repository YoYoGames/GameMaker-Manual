<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>static_set</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Reference page for the static_set function" />
  <meta name="rh-index-keywords" content="static_set" />
  <meta name="search-keywords" content="static_set" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">static_set</span></h1>
  <p>This function is used to change the <a href="../../GML_Overview/Structs/Static_Structs.htm">static struct</a> of a struct. You supply the struct to modify, and the new static struct to apply to the struct. You can get the static struct of any struct or function using <span class="inline3_func"><a data-xref="{title}" href="static_get.htm">static_get</a></span>.</p>
  <p>This will override the static chain for the struct, which is used to determine which constructor(s) a struct belongs to, using <span class="inline3_func"><a data-xref="{title}" href="is_instanceof.htm">is_instanceof</a></span>.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_warning.hts"> </span> It&#39;s not recommended to use this function aside from deserialisation use-cases, where you need to load a struct and apply a constructor to it. See: <a data-xref="{text}" href="../../GML_Overview/Structs/Static_Structs.htm#h1">Changing The Static Struct</a></p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> You cannot pass another function to this function. Methods, however, are stored as structs (see: <a data-xref="{text}" href="../../GML_Overview/Method_Variables.htm#h">Methods Are Structs</a>) but the static struct functionality is <strong>disabled</strong> for them, so this function will do nothing when a method is passed.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">static_set</span>(struct, static_struct);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>struct</td>
        <td><span data-keyref="Type_Struct"><a href="../../GML_Overview/Structs.htm" target="_blank">Struct</a></span></td>
        <td>The struct to set the static struct for</td>
      </tr>
      <tr>
        <td>static_struct</td>
        <td><span data-keyref="Type_Struct"><a href="../../GML_Overview/Structs.htm" target="_blank">Struct</a></span></td>
        <td>The new static struct to use for the struct</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example 1: Basic Use</h4>
  <div data-conref="../../../assets/snippets/static_set_example.hts"> </div>
  <p> </p>
  <h4>Example 2: Assigning a Static Struct to a Pure Data Struct</h4>
  <p class="code">function vec2(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
        <br />
        static add = function(_vecb)<br />
        {<br />
            x += _vecb.x;<br />
            y += _vecb.y;<br />
        }<br />
        <br />
        // ...<br />
    }<br />
    <br />
    var _a = new vec2(10, 10);<br />
    var _b = {x: 4, y: 9};<br />
    <br />
    static_set(_b, static_get(vec2));<br />
    <br />
    _b.add(_a);<br />
    <br />
    show_debug_message(_b);
  </p>
  <p>The code above first defines a constructor function to create <span class="inline2">vec2</span> structs. The constructor function assigns the parameters <span class="inline2">_x</span> and <span class="inline2">_y</span> to the struct&#39;s <span class="inline2">x</span> and <span class="inline2">y</span> variables respectively. It also defines a static <span class="inline2">add</span> function (and possibly many others, indicated by the <span class="inline2">// ...</span> comment), which can be used by all structs that have this constructor&#39;s static struct as their static struct.</p>
  <p>Two struct variables are then defined: <span class="inline2">_a</span> is created using the <span class="inline2">vec2</span> constructor function and gets an (x, y) of (10, 10), <span class="inline2">_b</span> is created as a basic struct with just two variables: <span class="inline2">x</span> set to 4 and <span class="inline2">y</span> set to 9.</p>
  <p>The struct variable <span class="inline2">_b</span> is then assigned the static struct of <span class="inline2">vec2</span> using <span class="inline3_func"><span data-field="title" data-format="default">static_set</span></span>, this turns <span class="inline2">_b</span> into a <span class="inline2">vec2</span> struct, making the static variables and functions of <span class="inline2">vec2</span> available to <span class="inline2">_b</span>. After that, <span class="inline2">_a</span> is added to <span class="inline2">_b</span> by calling the <span class="inline2">add</span> function on <span class="inline2">_b</span>. <span class="inline2">_b</span> is then shown using <span class="inline3_func"><a data-xref="{title}" href="../Debugging/show_debug_message.htm">show_debug_message</a></span>. This debug output will show <span class="inline2">{ x : 14, y : 19 }</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Variable_Functions.htm">Variable Functions</a></div>
        <div>Next: <a data-xref="{title}" href="instanceof.htm">instanceof</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
static_set
-->
  <!-- TAGS
static_set
-->
</body>
</html>
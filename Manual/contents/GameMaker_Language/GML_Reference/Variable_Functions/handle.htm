<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>handle_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2022"/>
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css"/>
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content=""/>
  <meta name="topic-comment" content="Function reference page for handle_parse"/>
  <meta name="rh-index-keywords" content="handle_parse"/>
  <meta name="search-keywords" content="handle_parse"/>
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt"/>
</head>
<body>
  <h1><span data-field="title" data-format="default">handle_parse</span></h1>
  <p>This function parses a string to create a <a href="../../GML_Overview/Data_Types.htm">handle reference</a>.</p>
  <p>A handle is represented in a string with this format: <span data-conref="../../../assets/snippets/Handle_Format.hts"> </span>.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> You can use <span class="inline3_func"><a data-xref="{title}" href="../Strings/string.htm">string</a></span> to get the string representation of a handle and <span class="inline3_func"><a data-xref="{title}" href="real.htm">real</a></span> to get the index number that it holds.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">handle_parse</span>(value_string);</p>
  <table>
    <colgroup>
      <col/>
      <col/>
      <col/>
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>value_string</td>
        <td><span data-keyref="Type_String"><a href="../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></td>
        <td>The string representation of the handle, formatted as <span data-conref="../../../assets/snippets/Handle_Format.hts"> </span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Handle"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Handle</a></span> (or <span data-keyref="Type_Undefined"><a href="../../GML_Overview/Data_Types.htm" target="_blank">undefined</a></span> in case of an invalid string)</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">sprite = spr_player;<br/>
    handle_as_string = string(sprite);<br/>
    h = <span data-field="title" data-format="default">handle_parse</span>(handle_as_string);<br/>
    <br/>
    show_debug_message($&quot;{sprite} ({typeof(sprite)})&quot;);<br/>
    show_debug_message($&quot;{handle_as_string} ({typeof(handle_as_string)})&quot;);<br/>
    show_debug_message($&quot;{h} ({typeof(h)})&quot;);
  </p>
  <p>The code above converts the handle of a sprite named <span class="inline2">spr_player</span> to its string representation (<span class="inline2">handle_as_string</span>), and then back into a handle (<span class="inline2">h</span>). It then outputs each of the created instance variables in a debug message, along with its type. This prints the following:</p>
  <p class="code_plain">ref sprite 0 (ref)<br/>
    ref sprite (string)<br/>
    ref sprite 0 (ref)</p>
  <p>You can see that the original reference is converted into a string, which is then parsed back as a reference, which can again be used in functions just like the original reference.</p>
  <p>The values of the handle variables are implicitly converted to their string representation to display them.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Variable_Functions.htm">Variable Functions</a></div>
        <div>Next: <a data-xref="{title}" href="variable_instance_exists.htm">variable_instance_exists</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
handle_parse
-->
  <!-- TAGS
handle_parse
-->

</body></html>
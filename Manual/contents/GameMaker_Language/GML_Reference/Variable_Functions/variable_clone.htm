<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>variable_clone</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="variable_clone" />
  <meta name="search-keywords" content="variable_clone" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">variable_clone</span></h1>
  <p>This function clones the value you pass it and returns the new clone.</p>
  <p>It clones nested structs and arrays up to a given depth (<span data-keyref="Const_Data_Clone_Depth">128</span> by default), which you can override by providing the optional <span class="inline2">depth</span> parameter.</p>
  <h3>Usage Notes</h3>
  <ul class="colour">
    <li>When cloning a struct created using a constructor, the new struct will also be an instance of the original constructor.</li>
    <li><span>When cloning a struct that contains a method whose<span> &quot;</span></span><span>self&quot;</span><span><span> </span>exists in the struct being cloned, the clone of the method in the new struct will be rebound to the clone of the original &quot;self&quot; in the new struct, mirroring the relationships of the original.</span><br />
      <br />
      If the method&#39;s &quot;self&quot; does <em>not</em> exist in the struct being cloned, the clone of the method is bound to the original &quot;self&quot;.
    </li>
    <li>The built-in <a data-xref="{title}" href="../Data_Structures/Data_Structures.htm">Data Structures</a> and <a data-xref="{title}" href="../Asset_Management/Instances/Instances.htm">Instances</a> are <em>not</em> cloned; for this type of variable the actual value (data structure reference or instance handle, respectively) is copied.</li>
    <li>Built-in structs, such as the structs related to sequences and animation curves, cannot be cloned using this function.</li>
  </ul>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">variable_clone</span>(value[, depth]);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>value</td>
        <td><span data-keyref="Type_Any"><a href="../../GML_Overview/Data_Types.htm#variable" target="_blank">Any</a></span></td>
        <td>The value to clone</td>
      </tr>
      <tr>
        <td>depth</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> The maximum depth level to clone the variable, in case this is e.g. a nested struct. The default is <span data-keyref="Const_Data_Clone_Depth">128</span>, the maximum possible value.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Any"><a href="../../GML_Overview/Data_Types.htm#variable" target="_blank">Any</a></span></p>
  <p> </p>
  <h4>Example 1: Basic Use</h4>
  <p class="code">var _the_original = {a: &quot;some text&quot;, b: [1, 2, 3, 4, 5], c: 6};<br />
    var _the_clone = <span data-field="title" data-format="default">variable_clone</span>(_the_original);</p>
  <p>The above code first defines a temporary struct variable <span class="inline2">_the_original</span>. A clone is then created from this variable using <span class="inline3_func"><span data-field="title" data-format="default">variable_clone</span></span>. The new variable is stored in another variable <span class="inline2">_the_clone</span>.</p>
  <p> </p>
  <h4>Example 2: Cloning Methods</h4>
  <p class="code">the_struct = <br />
    {<br />
        my_value: 12,<br />
        my_method: function() { show_debug_message($&quot;My value is: {my_value}&quot;); }<br />
    }<br />
    <br />
    the_new_struct = <span data-field="title" data-format="default">variable_clone</span>(the_struct);<br />
    the_new_struct.my_value = 24;<br />
    <br />
    the_struct.my_method();<br />
    the_new_struct.my_method();
  </p>
  <p>The above code example shows an example where <span class="inline3_func"><span data-field="title" data-format="default">variable_clone</span></span> is used to copy a struct that contains a method.</p>
  <p>First, a struct with two variables is defined: a variable <span class="inline2">my_value</span> that stores the value <span class="inline2">12</span> and a variable <span class="inline2">my_method</span> that stores a method bound to this struct. The struct is stored in a variable <span class="inline2">the_struct</span>. Next, the struct is cloned, including the method it contains. Since the method is bound to the struct itself, its &quot;self&quot; exists in the struct being cloned and the &quot;self&quot; of its clone is rebound to the clone of the original &quot;self&quot; struct. The new struct&#39;s <span class="inline2">my_value</span> variable is then set to <span class="inline2">24</span>. Finally, the method of each struct is called. Calling the original struct&#39;s method outputs <span class="inline2">12</span>, calling the cloned struct&#39;s method outputs <span class="inline2">24</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Variable_Functions.htm">Variable Functions</a></div>
        <div>Next: <a data-xref="{title}" href="is_string.htm">is_string</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
variable_clone
-->
  <!-- TAGS
variable_clone
-->
</body>
</html>
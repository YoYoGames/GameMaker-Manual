<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <title>Array Functions</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Bart Teunis" />
  <meta name="topic-comment" content="The overview page for all array functions, including the more advanced LINQ-like functions." />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="search-keywords" content="array,function" />
  <meta name="rh-index-keywords" content="array,functions" />
</head>
<body>
  <h1><span data-field="title" data-format="default">Array Functions</span></h1>
  <p>There are a few functions associated with the use of <a href="../../GML_Overview/Arrays.htm">Arrays</a> too. These are designed to give you flexibility in your code, and will permit you to create more functional and dynamic arrays when making your games.</p>
  <h2>Basic <span data-field="title" data-format="default">Array Functions</span></h2>
  <ul class="colour">
    <li><a data-xref="{title}" href="array_create.htm">array_create</a></li>
    <li><a data-xref="{title}" href="array_copy.htm">array_copy</a></li>
    <li><a data-xref="{title}" href="array_equals.htm">array_equals</a></li>
    <li><a data-xref="{title}" href="array_get.htm">array_get</a></li>
    <li><a data-xref="{title}" href="array_set.htm">array_set</a></li>
    <li><a data-xref="{title}" href="array_push.htm">array_push</a></li>
    <li><a data-xref="{title}" href="array_pop.htm">array_pop</a></li>
    <li><a data-xref="{title}" href="array_shift.htm">array_shift</a></li>
    <li><a data-xref="{title}" href="array_insert.htm">array_insert</a></li>
    <li><a data-xref="{title}" href="array_delete.htm">array_delete</a></li>
    <li><a data-xref="{title}" href="array_get_index.htm">array_get_index</a></li>
    <li><a data-xref="{title}" href="array_contains.htm">array_contains</a></li>
    <li><a data-xref="{title}" href="array_contains_ext.htm">array_contains_ext</a></li>
    <li><a data-xref="{title}" href="array_sort.htm">array_sort</a></li>
    <li><a data-xref="{title}" href="array_reverse.htm">array_reverse</a></li>
    <li><a data-xref="{title}" href="array_shuffle.htm">array_shuffle</a></li>
    <li><a data-xref="{title}" href="array_length.htm">array_length</a></li>
    <li><a data-xref="{title}" href="array_resize.htm">array_resize</a></li>
    <li><a data-xref="{title}" href="array_length_1d.htm">array_length_1d</a> <span data-conref="../../../assets/snippets/Tag_deprecated.hts"> </span></li>
    <li><a data-xref="{title}" href="array_length_2d.htm">array_length_2d</a> <span data-conref="../../../assets/snippets/Tag_deprecated.hts"> </span></li>
    <li><a data-xref="{title}" href="array_height_2d.htm">array_height_2d</a> <span data-conref="../../../assets/snippets/Tag_deprecated.hts"> </span></li>
    <li><a data-xref="{title}" href="array_first.htm">array_first</a></li>
    <li><a data-xref="{title}" href="array_last.htm">array_last</a></li>
  </ul>
  <h2>Advanced <span data-field="title" data-format="default">Array Functions</span></h2>
  <ul class="Disc">
    <li><a data-xref="{title}" href="array_find_index.htm">array_find_index</a></li>
    <li><a data-xref="{title}" href="array_any.htm">array_any</a></li>
    <li><a data-xref="{title}" href="array_all.htm">array_all</a></li>
    <li><a data-xref="{title}" href="array_foreach.htm">array_foreach</a></li>
    <li><a data-xref="{title}" href="array_reduce.htm">array_reduce</a></li>
    <li><a data-xref="{title}" href="array_concat.htm">array_concat</a></li>
    <li><a data-xref="{title}" href="array_union.htm">array_union</a></li>
    <li><a data-xref="{title}" href="array_intersection.htm">array_intersection</a></li>
    <li><a data-xref="{title}" href="array_filter.htm">array_filter</a></li>
    <li><a data-xref="{title}" href="array_map.htm">array_map</a></li>
    <li><a data-xref="{title}" href="array_unique.htm">array_unique</a></li>
    <li><a data-xref="{title}" href="array_copy_while.htm">array_copy_while</a></li>
  </ul>
  <h2>Extended <span data-field="title" data-format="default">Array Functions</span></h2>
  <ul class="Disc">
    <li><a data-xref="{title}" href="array_create_ext.htm">array_create_ext</a></li>
    <li><a data-xref="{title}" href="array_filter_ext.htm">array_filter_ext</a></li>
    <li><a data-xref="{title}" href="array_map_ext.htm">array_map_ext</a></li>
    <li><a data-xref="{title}" href="array_unique_ext.htm">array_unique_ext</a></li>
    <li><a data-xref="{title}" href="array_reverse_ext.htm">array_reverse_ext</a></li>
    <li><a data-xref="{title}" href="array_shuffle_ext.htm">array_shuffle_ext</a></li>
  </ul>
  <h2 id="h2">Callback Method</h2>
  <p>A callback <a href="../../GML_Overview/Method_Variables.htm">method</a> is passed into an array function, such as <a data-xref="{title}" href="array_foreach.htm">array_foreach</a>, along with an array.</p>
  <p>GameMaker runs your callback method on each element of the given array. For each element in the array, it passes two arguments into your callback method:</p>
  <ul class="colour">
    <li><strong>Value</strong> of the array element</li>
    <li><strong>Index</strong> of the array element</li>
  </ul>
  <p>In your callback method, you can use these arguments to calculate a return value, if the array function requires it (such as <a data-xref="{title}" href="array_map.htm">array_map</a>).</p>
  <p>Based on what your callback method returns for each element, either a result value or a modified copy of the array is returned. However if you&#39;re using one of the <span class="inline2">_ext</span> functions, the original array is modified instead of being copied.</p>
  <h3 id="h">Predicate Method</h3>
  <p>When a callback method is required to only return <span class="inline2">true</span> or <span class="inline2">false</span>, it&#39;s called a <strong>predicate method</strong>. A predicate is used to tell whether an element in the array qualifies a condition.</p>
  <h3>Example: Predicate</h3>
  <p>Let&#39;s create a predicate method to check if an array contains the string <span class="inline2">&quot;apple&quot;</span> inside it.</p>
  <p>For this, we would use the <a href="array_any.htm">array_any</a> function:</p>
  <p class="code">var _array =<br />
    [<br />
        &quot;apple&quot;,<br />
        &quot;banana&quot;,<br />
        &quot;coconut&quot;,<br />
        &quot;dragonfruit&quot;<br />
    ]<br />
    <br />
    var _contains_apple = array_any(_array, function(_val, _ind)<br />
    {<br />
        return _val == &quot;apple&quot;<br />
    });<br />
    <br />
    show_debug_message(_contains_apple); // prints 1 (true)
  </p>
  <p>Our predicate method checks if <span class="inline2">_val == &quot;apple&quot;</span> and returns the result. When this is <span class="inline2">true</span> for any one of the array&#39;s elements, <a href="array_any.htm">array_any</a> returns <span class="inline2">true</span>.</p>
  <p>By default, a predicate method runs on all elements inside the array, however most advanced array functions also take two extra parameters: <span class="inline2">offset</span> and <span class="inline2">length</span>.</p>
  <h3 id="offset_and_length">Offset And Length</h3>
  <p>The <span class="inline2">offset</span> and <span class="inline2">length</span> parameters let you decide which part of the array you want the function to look through, and which direction you want it to go (forwards or backwards).</p>
  <ul class="colour">
    <li>The <span class="inline2">offset</span> is the 0-based index where the function starts operating on the array.
      <ul>
        <li>The <span class="inline2">offset</span> can be a negative number, in which case it will start from the end of the array. For example, an offset of <span class="inline2">-1</span> refers to the last element of the array, <span class="inline2">-2</span> refers to the second-last element, and so on.</li>
      </ul>
    </li>
    <li>The <span class="inline2">length</span> is the number of elements that are checked in the array, starting at the <span class="inline2">offset</span>.
      <ul>
        <li>The <span class="inline2">length</span> can also be negative, in which case the function will operate backwards. For example, if you start with an offset of <span class="inline2">3</span> and a length of <span class="inline2">3</span>, then elements <span class="inline2">3, 4, 5</span> will be covered. With a length of <span class="inline2">-3</span>, elements <span class="inline2">3, 2, 1</span> will be covered.</li>
        <li>You can use <span class="inline2">infinity</span> or <span class="inline2">-infinity</span> as the length to traverse an array to its end or its beginning, respectively.</li>
      </ul>
    </li>
  </ul>
  <p>If the function returns a modified version of the array, only the elements that were operated on will be returned, in the order they were operated in. For example, with an offset of <span class="inline2">3</span> and length of <span class="inline2">3</span>, elements <span class="inline2">3, 4, 5</span> will be operated on and returned as a new array, and the rest of the elements (e.g. <span class="inline2">0, 1, 2, 6, 7, etc.</span>) will be scrapped.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="../GML_Reference.htm">GML Code Reference</a></div>
        <div>Next: <a data-xref="{title}" href="../Asset_Management/Asset_Management.htm">Asset Management</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>array_create_ext</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Bart Teunis" />
  <meta name="topic-comment" content="The reference page for array_create_ext" />
  <meta name="rh-index-keywords" content="array_create_ext" />
  <meta name="search-keywords" content="array_create_ext" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">array_create_ext</span></h1>
  <p>This function creates an array of the given size. For each element in the new array, it calls the given callback function, and applies the return value to that element.</p>
  <p>Using this function you can initialise the array with values that change depending on the array index.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="../../../assets/snippets/Syntax_predicate_general.hts#">Callback function</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p>The callback function supplied in the second argument should take 1 argument, which is the index of the current array element. It can return any type of value, which is stored in the array at that index.</p>
    <h4>Syntax:</h4>
    <p class="code">function(index);</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Argument</th>
          <th>Type</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>index</td>
          <td><span data-keyref="Type_Real"><a target="_blank" href="../../GML_Overview/Data_Types.htm">Real</a></span></td>
          <td>The current array index</td>
        </tr>
      </tbody>
    </table>
  </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">array_create_ext</span>(size, function)</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>size</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The size of the array</td>
      </tr>
      <tr>
        <td>function</td>
        <td><span data-keyref="Type_Function"><a href="../../GML_Overview/Script_Functions.htm" target="_blank">Function</a></span></td>
        <td>The callback function used to initialise each entry</td>
      </tr>
    </tbody>
  </table>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Array"><a href="../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></p>
  <p> </p>
  <h4>Example 1: Basic Use</h4>
  <p class="code">var _f = function(_index)<br />
    {<br />
        return _index + 1;<br />
    }<br />
    array = <span data-field="title" data-format="default">array_create_ext</span>(100, _f);<br />
    show_debug_message(array);</p>
  <p>The above code first creates a temporary function <span class="inline2">_f</span> that takes in an index as an argument, and returns that index with 1 added to it.</p>
  <p>It then uses <span class="inline2"><span data-field="title" data-format="default">array_create_ext</span></span> with the <span class="inline2">_f</span> function which creates an array filled with the integer numbers from 1 to 100.</p>
  <p> </p>
  <h4>Example 2: Array of Structs</h4>
  <p class="code">create_point = function()<br />
    {<br />
        return {x: 0, y: 0};<br />
    }<br />
    array = <span data-field="title" data-format="default">array_create_ext</span>(10, create_point);</p>
  <p>The above code first defines a function that returns a simple struct with an <span class="inline2">x</span> and <span class="inline2">y</span> variable, each set to 0. It then creates an array with a call to <span class="inline3_func"><span data-field="title" data-format="default">array_create_ext</span></span>. The previously created function is passed as the callback function and is called for every element, i.e. 10 times. This creates a new struct for every array element.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Array_Functions.htm">Array Functions</a></div>
        <div>Next: <a data-xref="{title}" href="array_filter_ext.htm">array_filter_ext</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2025 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
array_create_ext
-->
  <!-- TAGS
array_create_ext
-->
</body>
</html>
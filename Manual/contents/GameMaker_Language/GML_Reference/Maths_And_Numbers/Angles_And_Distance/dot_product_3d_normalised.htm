<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>dot_product_3d_normalised</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product_3d_normalised" />
  <meta name="rh-index-keywords" content="dot_product_3d_normalised,dot_product_3d_normalized" />
  <meta name="search-keywords" content="dot_product_3d_normalised,dot_product_3d_normalized" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">title</span></h1>
  <p>The dot product is a value expressing the angular relationship between two vectors and is found by taking two vectors, multiplying them together and then adding the results. The name &quot;dot product&quot; is derived from the centered dot &quot;·&quot;
    that is often used to designate this operation (the alternative name &quot;scalar product&quot; emphasizes the scalar rather than vector nature of the result).</p>
  <p>The actual mathematical formula can be written like this:</p>
  <p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png" /></p>
  <p>In 2D, the dot product of vectors <span class="inline">a[x1,y1]</span> and <span class="inline">b[x2,y2]</span> is <span class="inline">x1x2 + y1y2</span>, so in 3D, the dot product of vectors <span class="inline">a[x1,y1,z1]</span> and <span class="inline">b[x1,y1,z1]</span>    is <span class="inline">x1x2 + y1y2 + z1z2</span>. So, the dot_product_3d in <span data-keyref="GameMaker Name">GameMaker</span> is calculated as:</p>
  <p class="code">a · b = (x1*x2) + (y1*y2) + (z1*z2);</p>
  <p>What about the <i>normalised</i> dot product? The normalised dot product has been corrected in such a way as to bring the return value into the range of -1 and 1 (see <a href="../../../../Additional_Information/Vectors.htm">Vectors</a> for more detailed
    information), which is exceptionally useful in many circumstances, particularly when dealing with lighting and other 3D functions.</p>
  <p> </p>
  <h4><b>Syntax:</b></h4>
  <p class="code">dot_product_3d_normalised(x1, y1, z1, x2, y2, z2)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th><th>Type</th>
        <th>Description</th>
     </tr>
      <tr>
        <td>x1</td><td><span data-keyref="Type_Real"></span></td>
        <td>The x coordinate of the first vector.</td>
     </tr>
      <tr>
        <td>y1</td><td><span data-keyref="Type_Real"></span></td>
        <td>The y coordinate of the first vector.</td>
     </tr>
      <tr>
        <td>z1</td><td><span data-keyref="Type_Real"></span></td>
        <td>The z coordinate of the first vector.</td>
     </tr>
      <tr>
        <td>x2</td><td><span data-keyref="Type_Real"></span></td>
        <td>The x coordinate of the second vector.</td>
     </tr>
      <tr>
        <td>y2</td><td><span data-keyref="Type_Real"></span></td>
        <td>The y coordinate of the second vector.</td>
     </tr>
      <tr>
        <td>z2</td><td><span data-keyref="Type_Real"></span></td>
        <td>The z coordinate of the second vector.</td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var x1, y1, x2, y2;<br/> x1 = 0;<br/> y1 = 1;<br/> z1 = 0;<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> z2 = o_Player.z - z;<br/> if dot_product_3d_normalised(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;</p>
  <p>The above code creates a vector normal along the instances y (up) axis, and then gets the vector of the player object &quot;o_Player&quot; to itself. Finally it calculates the dot product of these two vectors and if it is greater tan 0 it sets the variable
    &quot;above&quot; to true, and if it is less than or equal to 0 it sets it to &quot;false&quot;.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Angles_And_Distance.htm">Angles And Distance</a></div>
        <div style="float:right">Next: <a href="angle_difference.htm">angle_difference</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_3d_normalised
dot_product_3d_normalized
-->
  <!-- TAGS
dot_product_3d_normalised
-->
</body>
</html>
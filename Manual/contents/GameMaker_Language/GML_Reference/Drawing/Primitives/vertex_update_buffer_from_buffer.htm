<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>vertex_update_buffer_from_buffer</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="vertex_update_buffer_from_buffer" />
  <meta name="search-keywords" content="vertex_update_buffer_from_buffer" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">vertex_update_buffer_from_buffer</span></h1>
  <p>This function updates the contents of a vertex buffer using data in the given buffer.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_important.hts"> </span> You cannot pass a <a href="vertex_freeze.htm">frozen</a> vertex buffer as the destination buffer.</p>
  <h3>Usage Notes</h3>
  <ul class="Disc">
    <li>The data in the source buffer should be formatted the same as the destination vertex buffer&#39;s vertex format. If it&#39;s not, you may get unexpected or no results.</li>
    <li>You can use the function <span class="inline3_func"><a data-xref="{title}" href="vertex_format_get_info.htm">vertex_format_get_info</a></span> to get the size and offset of an attribute.</li>
    <li>Writing data outside of the vertex buffer&#39;s current size will resize the vertex buffer as required.</li>
  </ul>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">vertex_update_buffer_from_buffer</span>(dest_vbuff, dest_offset, src_buffer[, src_offset, src_size]);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>dest_vbuff</td>
        <td><span data-keyref="Type_ID_Buffer_Vertex"><a href="vertex_create_buffer.htm" target="_blank">Vertex Buffer ID</a></span></td>
        <td>The vertex buffer to copy to</td>
      </tr>
      <tr>
        <td>dest_offset</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The offset in the destination buffer to start writing the data</td>
      </tr>
      <tr>
        <td>src_buffer</td>
        <td><span data-keyref="Type_ID_Buffer"><a href="../../Buffers/buffer_create.htm" target="_blank">Buffer ID</a></span></td>
        <td>The source buffer to copy from</td>
      </tr>
      <tr>
        <td>src_offset</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> The offset in bytes in the source buffer to start copying. Defaults to 0.</td>
      </tr>
      <tr>
        <td>src_size</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> The size of the data in bytes to copy from the source buffer. Defaults to -1. When -1 the whole buffer is copied.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();     // Three buffer_f32 values<br />
    vertex_format_add_texcoord();        // Two buffer_f32 values<br />
    vertex_format = vertex_format_end();<br />
    <br />
    var _i = 0, _vertex_size = (3 + 2) * buffer_sizeof(buffer_f32), _buff = buffer_create(1000, buffer_fixed, 4);<br />
    repeat(51)<br />
    {<br />
        repeat(3) buffer_write(_buff, buffer_f32, random(500));        // x, y, z<br />
        repeat(2) buffer_write(_buff, buffer_f32, ((_i++ mod 6) &lt; 3)); // u, v<br />
    }<br />
    <br />
    vb = vertex_create_buffer_from_buffer_ext(_buff, vertex_format, 0, 30);<br />
    <span data-field="title" data-format="default">vertex_update_buffer_from_buffer</span>(vb, 0, _buff, 40 * _vertex_size, 3 * _vertex_size);
  </p>
  <p>The code above first creates a new vertex format that consists of a 3D position attribute and a texture coordinate attribute. It then initialises a couple of temporary variables: a loop counter, the source buffer and the size in bytes of a single vertex. The <span class="inline2">(3 + 2)</span> refers to the three float values used to store a position and the two float values to store a UV coordinate. The buffer is then filled with some random values to create a total of 51 randomly positioned vertices, or 17 triangles, stored as <span class="inline2">pr_trianglelist</span> (see <span data-keyref="Type_Constant_Draw_Primitive_Type"><a href="draw_primitive_begin.htm" target="_blank">Primitive Type Constant</a></span>). After that, a new vertex buffer is created from the first 30 vertices in the buffer. Finally, the first three vertices in this vertex buffer are updated with a call to <span class="inline3_func"><span data-field="title" data-format="default">vertex_update_buffer_from_buffer</span></span>; they are overwritten with the data of vertex index 40, 41 and 42 in the original buffer.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Primitives_And_Vertex_Formats.htm">Primitives And Vertex Formats</a></div>
        <div>Next: <a data-xref="{title}" href="vertex_update_buffer_from_vertex.htm">vertex_update_buffer_from_vertex</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
vertex_update_buffer_from_buffer
-->
  <!-- TAGS
vertex_update_buffer_from_buffer
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>draw_vertex_texture_colour</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for draw_vertex_texture_colour" />
  <meta name="rh-index-keywords" content="draw_vertex_texture_colour,draw_vertex_texture_color" />
  <meta name="search-keywords" content="draw_vertex_texture_colour,draw_vertex_texture_color" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">draw_vertex_texture_colour</span></h1>
  <p>This function defines the position of a textured vertex for a primitive. The final look of the primitive will depend on the primitive type chosen to draw (See <span class="inline3_func"><a data-xref="{title}" href="draw_primitive_begin.htm">draw_primitive_begin</a></span> for more information), the order with which you add the vertices to it, the position of the start and end points that you give for the texture sample and the colour and alpha values that you have set. To maintain the texture appearance while changing only the alpha, a value of <span class="inline2">-1</span> (or <span class="inline2">c_white</span>) may be used for the colour argument. To end and draw the primitive you must call <span class="inline3_func"><a data-xref="{title}" href="draw_primitive_end.htm">draw_primitive_end</a></span>.</p>
  <div data-conref="../../../../assets/snippets/Note_Texture_Repeat_Requires_PowerOfTwo.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">draw_vertex_texture_colour</span>(x, y, xtex, ytex, col, alpha)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>x</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The x coordinate of the vertex.</td>
      </tr>
      <tr>
        <td>y</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The y coordinate of the vertex.</td>
      </tr>
      <tr>
        <td>xtex</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The x coordinate within the texture (0 refers to the left edge of the sprite image, 1 refers to the right edge).</td>
      </tr>
      <tr>
        <td>ytex</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The y coordinate within the texture (0 refers the top edge of the sprite image, 1 refers the bottom edge).</td>
      </tr>
      <tr>
        <td>col</td>
        <td><span data-keyref="Type_Constant_Colour"><a href="../Colour_And_Alpha/Colour_And_Alpha.htm" target="_blank">Colour</a></span></td>
        <td>The colour to blend with the texture at this vertex (<span class="inline2">-1</span> or <span class="inline2">c_white</span> for no blending).</td>
      </tr>
      <tr>
        <td>alpha</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The alpha to draw this vertex with (a value from 0 - 1).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">draw_set_colour(c_white);<br />
    var _tex = sprite_get_texture(spr_Background, 0);<br />
    draw_primitive_begin_texture(pr_trianglestrip, _tex);<br />
    draw_vertex_texture_colour(0, 0, 0, 0, c_fuchsia, 1);<br />
    draw_vertex_texture_colour(640, 0, 1, 0, c_yellow, 1);<br />
    draw_vertex_texture_colour(0, 480, 0, 1, c_aqua, 1);<br />
    draw_vertex_texture_colour(640, 480, 1, 1, c_lime, 1);<br />
    draw_primitive_end();</p>
  <p>The above code will draw a 4 vertex triangle strip (making a rectangle) textured with the texture held in the <span class="inline2">_tex</span> variable, and the whole texture will be used to cover the completed primitive, and it will be blended with four different colours.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Primitives_And_Vertex_Formats.htm">Primitives And Vertex Formats</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="vertex_format_begin.htm">vertex_format_begin</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
draw_vertex_texture_colour
draw_vertex_texture_color
-->
  <!-- TAGS
draw_vertex_texture_colour
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gpu_set_state</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for the function gpu_set_state" />
  <meta name="rh-index-keywords" content="gpu_set_state" />
  <meta name="search-keywords" content="gpu_set_state" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">gpu_set_state</span></h1>
  <p>This function will set the current GPU state using the passed-in <span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span>.</p>
  <p>The supplied map can be created using the function <span class="inline3_func"><a data-xref="{title}" href="gpu_get_state.htm">gpu_get_state</a></span>. It contains the following keys: </p>
  <table style="caption-side: top">
    <caption>GPU State DS Map</caption>
    <colgroup>
      <col style="width:33%" />
      <col style="width:33%" />
      <col style="width:33%" />
    </colgroup>
    <tbody>
      <tr>
        <th>Key</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <th colspan="3">Colour &amp; Alpha</th>
      </tr>
      <tr>
        <td>colorwriteenable</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>A bitmask consisting of 4 bits, ordered ABGR, where each bit indicates whether the channel is written to or not. Corresponds to <span class="inline3_func"><a data-xref="{title}" href="gpu_set_colourwriteenable.htm">gpu_set_colourwriteenable</a></span>.</td>
      </tr>
      <tr>
        <td>blendenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether colour blending is enabled. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_blendenable.htm">gpu_set_blendenable</a></span>.</td>
      </tr>
      <tr>
        <td>sepalphaenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>A <strong>read-only</strong> value that indicates whether separate blend mode factors for the RGB and alpha channels are enabled. It will be <span class="inline2">true</span> if you&#39;ve set the blend mode using <span class="inline3_func"><a data-xref="{title}" href="gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha</a></span>, <span class="inline2">false</span> in all other cases.</td>
      </tr>
      <tr>
        <td>srcblend</td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a href="gpu_get_blendmode_ext.htm" target="_blank">Blend Mode Factor Constant</a></span></td>
        <td>The source blend mode factor.</td>
      </tr>
      <tr>
        <td>srcblendalpha</td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a href="gpu_get_blendmode_ext.htm" target="_blank">Blend Mode Factor Constant</a></span></td>
        <td>The source blend mode factor of the alpha channel.</td>
      </tr>
      <tr>
        <td>destblend</td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a href="gpu_get_blendmode_ext.htm" target="_blank">Blend Mode Factor Constant</a></span></td>
        <td>The destination blend mode factor.</td>
      </tr>
      <tr>
        <td>destblendalpha</td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor"><a href="gpu_get_blendmode_ext.htm" target="_blank">Blend Mode Factor Constant</a></span></td>
        <td>The destination blend mode factor of the alpha channel.</td>
      </tr>
      <tr>
        <td>alphatestenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether to enable alpha testing. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_alphatestenable.htm">gpu_set_alphatestenable</a></span>.</td>
      </tr>
      <tr>
        <td>alphatestfunc</td>
        <td><span data-keyref="Type_Constant_Draw_ZComparison"><a href="gpu_get_zfunc.htm" target="_blank">Comparison Function Constant</a></span></td>
        <td>A <strong>read-only</strong> value that indicates the comparison function used by <span data-keyref="GameMaker Name">GameMaker</span> for the alpha test. Always set to <span class="inline2">cmpfunc_greater</span>.</td>
      </tr>
      <tr>
        <td>alphatestref</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The reference value to use for the alpha test, as a value from 0 to 255. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_alphatestref.htm">gpu_set_alphatestref</a></span>.</td>
      </tr>
      <tr>
        <th colspan="3">Depth and Stencil Buffer</th>
      </tr>
      <tr>
        <td>zwriteenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether z-writing is enabled. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_zwriteenable.htm">gpu_set_zwriteenable</a></span>.</td>
      </tr>
      <tr>
        <td>ztestenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether z-testing is enabled. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_ztestenable.htm">gpu_set_ztestenable</a></span>.</td>
      </tr>
      <tr>
        <td>zfunc</td>
        <td><span data-keyref="Type_Constant_Draw_ZComparison"><a href="gpu_get_zfunc.htm" target="_blank">Comparison Function Constant</a></span></td>
        <td>The comparison function to use for z-testing. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_zfunc.htm">gpu_set_zfunc</a></span>.</td>
      </tr>
      <tr>
        <td>stencilenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether to enable the stencil test. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_enable.htm">gpu_set_stencil_enable</a></span>.</td>
      </tr>
      <tr>
        <td>stencilfunc</td>
        <td><span data-keyref="Type_Constant_Draw_ZComparison"><a href="gpu_get_zfunc.htm" target="_blank">Comparison Function Constant</a></span></td>
        <td>The comparison function to use for the stencil test. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_func.htm">gpu_set_stencil_func</a></span>.</td>
      </tr>
      <tr>
        <td>stencilref</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The reference value used for the stencil test. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_ref.htm">gpu_set_stencil_ref</a></span>.</td>
      </tr>
      <tr>
        <td>stencilpass</td>
        <td><span data-keyref="Type_Constant_Draw_StencilOp"><a href="../Depth_And_Stencil_Buffer/The_Depth_And_Stencil_Buffer.htm" target="_blank">Stencil Op Constant</a></span></td>
        <td>The stencil operation to perform when the stencil test passes. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_pass.htm">gpu_set_stencil_pass</a></span>.</td>
      </tr>
      <tr>
        <td>stencilfail</td>
        <td><span data-keyref="Type_Constant_Draw_StencilOp"><a href="../Depth_And_Stencil_Buffer/The_Depth_And_Stencil_Buffer.htm" target="_blank">Stencil Op Constant</a></span></td>
        <td>The stencil operation to perform when the stencil test fails. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_fail.htm">gpu_set_stencil_fail</a></span>.</td>
      </tr>
      <tr>
        <td>stencilzfail</td>
        <td><span data-keyref="Type_Constant_Draw_StencilOp"><a href="../Depth_And_Stencil_Buffer/The_Depth_And_Stencil_Buffer.htm" target="_blank">Stencil Op Constant</a></span></td>
        <td>The stencil operation to perform when the <span>stencil test passes but the depth test fails. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_depth_fail.htm">gpu_set_stencil_depth_fail</a></span>.</span></td>
      </tr>
      <tr>
        <td>stencilwritemask</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>An 8 bit bitmask that determines which bits in the stencil buffer can be written to. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_write_mask.htm">gpu_set_stencil_write_mask</a></span>.</td>
      </tr>
      <tr>
        <td>stencilreadmask</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>An 8 bit bitmask that determines the bits to compare in the stencil test. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_stencil_read_mask.htm">gpu_set_stencil_read_mask</a></span>.</td>
      </tr>
      <tr>
        <th colspan="3">Backface Culling</th>
      </tr>
      <tr>
        <td>cullmode</td>
        <td><span data-keyref="Type_Constant_CullMode"><a href="gpu_get_cullmode.htm" target="_blank">Culling Mode Constant</a></span></td>
        <td>The backface culling mode. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_cullmode.htm">gpu_set_cullmode</a></span>.</td>
      </tr>
      <tr>
        <th colspan="3">Fog</th>
      </tr>
      <tr>
        <td>fogenable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>Whether fog is set to enabled. The first element in the array passed to <span class="inline3_func"><a data-xref="{title}" href="gpu_set_fog.htm">gpu_set_fog</a></span>.</td>
      </tr>
      <tr>
        <td>fogcolor</td>
        <td><span data-keyref="Type_Constant_Colour"><a href="../Colour_And_Alpha/Colour_And_Alpha.htm" target="_blank">Colour</a></span></td>
        <td>The fog colour to use, if enabled. The second element in the array passed to <span class="inline3_func"><a data-xref="{title}" href="gpu_set_fog.htm">gpu_set_fog</a></span>.</td>
      </tr>
      <tr>
        <td>fogstart</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The distance at which the fog starts. The third element in the array passed to <span class="inline3_func"><a data-xref="{title}" href="gpu_set_fog.htm">gpu_set_fog</a></span>.</td>
      </tr>
      <tr>
        <td>fogend</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The distance at which the fog ends. The fourth element in the array passed to <span class="inline3_func"><a data-xref="{title}" href="gpu_set_fog.htm">gpu_set_fog</a></span>.</td>
      </tr>
      <tr>
        <th colspan="3">Textures</th>
      </tr>
      <tr>
        <td>minfilter</td>
        <td><span data-keyref="Type_Constant_Mipmapping_Filter"><a href="../Mipmapping/gpu_set_tex_mip_filter.htm" target="_blank">Mipmapping Filter Constant</a></span></td>
        <td><span>The filtering mode used when textures are drawn minified. Determined by <span class="inline3_func"><a data-xref="{title}" href="gpu_set_texfilter.htm">gpu_set_texfilter</a></span>.</span></td>
      </tr>
      <tr>
        <td>magfilter</td>
        <td><span data-keyref="Type_Constant_Mipmapping_Filter"><a href="../Mipmapping/gpu_set_tex_mip_filter.htm" target="_blank">Mipmapping Filter Constant</a></span></td>
        <td><span>The filtering mode used when textures are drawn magnified. Determined by <span class="inline3_func"><a data-xref="{title}" href="gpu_set_texfilter.htm">gpu_set_texfilter</a></span>.</span></td>
      </tr>
      <tr>
        <td>addressu</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The texture wrapping/clamping mode in the horizontal direction. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_texrepeat.htm">gpu_set_texrepeat</a></span>.</td>
      </tr>
      <tr>
        <td>addressv</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The texture wrapping/clamping mode in the vertical direction. As set with <span class="inline3_func"><a data-xref="{title}" href="gpu_set_texrepeat.htm">gpu_set_texrepeat</a></span>.</td>
      </tr>
      <tr>
        <th colspan="3">Mipmapping</th>
      </tr>
      <tr>
        <td>mipenable</td>
        <td><span data-keyref="Type_Constant_Mipmapping"><a href="../Mipmapping/gpu_get_tex_mip_enable.htm" target="_blank">Mipmapping Constant</a></span></td>
        <td>Whether to enable mipmapping. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_mip_enable.htm">gpu_set_tex_mip_enable</a></span>.</td>
      </tr>
      <tr>
        <td>mipmip</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The minimum mipmap level to use. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_min_mip.htm">gpu_set_tex_min_mip</a></span>.</td>
      </tr>
      <tr>
        <td>maxmip</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The maximum mipmap level to use. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_max_mip.htm">gpu_set_tex_max_mip</a></span>.</td>
      </tr>
      <tr>
        <td>mipfilter</td>
        <td><span data-keyref="Type_Constant_Mipmapping_Filter"><a href="../Mipmapping/gpu_set_tex_mip_filter.htm" target="_blank">Mipmapping Filter Constant</a></span></td>
        <td>The mip filter to use with mipmapping. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_mip_filter.htm">gpu_set_tex_mip_filter</a></span>.</td>
      </tr>
      <tr>
        <td>mipbias</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The bias value to use for mipmapping. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_mip_bias.htm">gpu_set_tex_mip_bias</a></span>.</td>
      </tr>
      <tr>
        <td>maxaniso</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The maximum level of anisotropy to use with the <span class="inline2">tf_anisotropic</span> filter. As set with <span class="inline3_func"><a data-xref="{title}" href="../Mipmapping/gpu_set_tex_max_aniso.htm">gpu_set_tex_max_aniso</a></span>.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">gpu_set_state</span>(ds_map);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>ds_map</td>
        <td><span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span></td>
        <td>The GPU state to set as a <span class="inline">DS Map</span>.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code"><span data-field="title" data-format="default">gpu_set_state</span>(gpu_map);</p>
  <p>The above code sets the GPU state using the map supplied in the variable <span class="inline2">gpu_map</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="GPU_Control.htm">GPU Control</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="gpu_get_sprite_cull.htm">gpu_get_sprite_cull</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
gpu_set_state
-->
  <!-- TAGS
gpu_set_state
-->
</body>
</html>
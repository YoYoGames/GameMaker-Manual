<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gpu_set_depth</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="gpu_set_depth" />
  <meta name="search-keywords" content="gpu_set_depth" />
  <meta name="template" content="assets/masterpages/Manual_Keyword_Page.htt" />
</head>
<body>
  <h1><span data-field="title" data-format="default">gpu_set_depth</span></h1>
  <p>This function sets the depth (i.e. the z coordinate) for <span data-keyref="GameMaker Name">GameMaker</span>&#39;s 2D drawing functions (sprites, shapes, primitives, text, etc.)</p>
  <p><span>By default, <span data-keyref="GameMaker Name">GameMaker</span> uses the layer&#39;s depth when drawing flat graphics, but this function allows you to use your own. This can be used to draw at a different depth, or draw individual sprites/primitives at their own depths.</span></p>
  <p class="note" style="text-align: left; "><span data-conref="../../../../assets/snippets/Tag_important.hts"> </span> This function doesn&#39;t change the depth of the layer when called in a layer begin script (see <span class="inline3_func"><a data-xref="{title}" href="../../Asset_Management/Rooms/General_Layer_Functions/layer_script_begin.htm">layer_script_begin</a></span>). If you need to change the depth of a specific layer in the layer begin script you should do so using <span class="inline3_func"><a data-xref="{title}" href="../../Asset_Management/Rooms/General_Layer_Functions/layer_force_draw_depth.htm">layer_force_draw_depth</a></span> instead.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"> </span> <span data-keyref="GameMaker Name">GameMaker</span><span> only changes the depth when it starts drawing a new layer, so you may want to restore the original depth (saved previously from <span class="inline3_func"><a data-xref="{title}" href="gpu_get_depth.htm">gpu_get_depth</a></span></span><span>) after you&#39;re done drawing, so any subsequent calls will not be affected by your depth change.</span></p>
  <div data-conref="../../../../assets/snippets/Note_Depth_Values_Are_Approximate.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">gpu_set_depth</span>(depth);</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>depth</td>
        <td><span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The new depth value to use for drawing</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example 1: &quot;depth = -y&quot;</h4>
  <p class="code_heading">Draw Event</p>
  <p class="code">var _zwrite = gpu_get_zwriteenable();<br />
    var _ztest = gpu_get_ztestenable();<br />
    gpu_set_zwriteenable(true);<br />
    gpu_set_ztestenable(true);<br />
    var _depth = gpu_get_depth();<br />
    <br />
    gpu_set_depth(-y);<br />
    <br />
    draw_self();<br />
    <br />
    gpu_set_depth(_depth);<br />
    gpu_set_zwriteenable(_zwrite);<br />
    gpu_set_ztestenable(_ztest);
  </p>
  <p>The above code sets the depth used for drawing to the current instance&#39;s <span class="inline2">-y</span>. This gives an easy way to draw instances behind other instances once they move &quot;behind&quot; them, if those instances also have their depth set to <span class="inline2">-y</span>.</p>
  <p>First, z-writing and z-testing are enabled on the GPU using <span class="inline3_func"><a data-xref="{title}" href="gpu_set_zwriteenable.htm">gpu_set_zwriteenable</a></span> and <span class="inline3_func"><a data-xref="{title}" href="gpu_set_ztestenable.htm">gpu_set_ztestenable</a></span>. Their current values are stored in temporary variables <span class="inline2">_zwrite</span> and <span class="inline2">_ztest</span> respectively, as well as the current depth, which is stored in a temporary variable <span class="inline2">_depth</span>. The depth is then set to the instance&#39;s <span class="inline2">-y</span> using <span class="inline3_func"><span data-field="title" data-format="default">gpu_set_depth</span></span> and the instance is drawn normally using <span class="inline3_func"><a data-xref="{title}" href="../Sprites_And_Tiles/draw_self.htm">draw_self</a></span>.</p>
  <p>Finally, depth, z-writing and z-testing are all set to their previous value in order to not affect further drawing.</p>
  <p> </p>
  <h4>Example 2: Drawing an Hourglass Shape using Circles</h4>
  <p class="code_heading">Draw Event</p>
  <p class="code">gpu_set_zwriteenable(true);<br />
    gpu_set_ztestenable(true);<br />
    matrix_set(matrix_view, matrix_build_lookat(220, 0, 90, 0, 0, 90, 0, 0, 1));<br />
    matrix_set(matrix_projection, matrix_build_projection_perspective_fov(60, room_width/room_height, 1, 10000));<br />
    <br />
    var _depth = gpu_get_depth(); // store previous depth<br />
    var _col = draw_get_colour();<br />
    <br />
    var n = 180;<br />
    for (var z = 0; z &lt;= n; z += 10)<br />
    {<br />
        gpu_set_depth(z);<br />
        draw_set_colour(make_color_hsv(z / n * 255, 150, 250));<br />
        draw_circle(0, 0, 40 + lengthdir_x(20, z / n * 360), false);<br />
    }<br />
    <br />
    draw_set_colour(_col);<br />
    gpu_set_depth(_depth);        // restore previous depth
  </p>
  <p>The code above draws a coloured hourglass-like shape in the Draw event.</p>
  <p>First, z-writing and z-testing are enabled (<span class="inline3_func"><a data-xref="{title}" href="gpu_set_zwriteenable.htm">gpu_set_zwriteenable</a></span> and <span class="inline3_func"><a data-xref="{title}" href="gpu_set_ztestenable.htm">gpu_set_ztestenable</a></span>) and an appropriate projection (<span class="inline3_func"><a data-xref="{title}" href="../../Maths_And_Numbers/Matrix_Functions/matrix_build_projection_perspective_fov.htm">matrix_build_projection_perspective_fov</a></span>) and view matrix (<span class="inline3_func"><a data-xref="{title}" href="../../Maths_And_Numbers/Matrix_Functions/matrix_build_lookat.htm">matrix_build_lookat</a></span>) are built and set using <span class="inline3_func"><a data-xref="{title}" href="../../Maths_And_Numbers/Matrix_Functions/matrix_set.htm">matrix_set</a></span>. Next, the current depth value and draw colour are stored so they can be restored later.</p>
  <p>After this, a couple of circles are drawn in a for loop using <span class="inline3_func"><a data-xref="{title}" href="../Basic_Forms/draw_circle.htm">draw_circle</a></span>. The depth used to draw each circle is set to the value of the loop variable <span class="inline2">z</span>, which is increased by 10 every iteration. The radius of the circle varies in a way that the final shape looks like an hourglass shape. The draw colour is changed to bring variation in the colours of the circles.</p>
  <p>Finally, the draw colour and depth are set back to the values they had before, in order to not affect further drawing on the instance&#39;s layer.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="GPU_Control.htm">GPU Control</a></div>
        <div>Next: <a data-xref="{title}" href="gpu_set_fog.htm">gpu_set_fog</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
gpu_set_depth
-->
  <!-- TAGS
gpu_set_depth
-->
</body>
</html>
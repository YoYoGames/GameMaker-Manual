<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>surface_depth_disable</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for surface_depth_disable" />
  <meta name="rh-index-keywords" content="surface_depth_disable" />
  <meta name="search-keywords" content="surface_depth_disable" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">surface_depth_disable</span></h1>
  <p>This function disables (<span class="inline2">true</span>) or re-enables (<span class="inline2">false</span>) automatic depth and stencil buffer creation for <i>all</i> surfaces.</p>
  <p>By default, <em>the depth and stencil buffer are enabled</em>, i.e. a depth <em>and</em> stencil buffer are automatically created for surfaces. This applies to surfaces that you create manually using <span class="inline3_func"><a data-xref="{title}" href="surface_create.htm">surface_create</a></span> as well as to the <span class="inline2"><a data-xref="{title}" href="application_surface.htm">application_surface</a></span>.</p>
  <p>To use this function you call it <i>before</i> creating a surface, and then you can enable it again later (if required). All surfaces created when this setting is disabled will not be created with a depth buffer and so cannot use it when drawn to. This results in the things being drawn to the surface having parity of depth. The images below illustrate this in practice:</p>
  <p><img alt="Surface depth buffer example" class="center" height="381" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Drawing/Surface_Depth_Buffer.png" width="1032" />In the above image, we draw a rectangle and a triangle using a vertex buffer in 3D. The coordinates for the red triangle place it behind the green rectangle, but the code to draw the triangle is called <i>after</i> the code that draws the rectangle. With the depth buffer enabled, the triangle is still drawn behind the rectangle as the 3D depth is being respected. However, when we disable the depth buffer for the surface, only the code order is respected and so the triangle is drawn over the rectangle.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_warning.hts"> </span> Allocating depth buffers essentially <span>doubles the amount of memory required for surfaces</span>. This could be an excessive and unnecessary overhead, especially if your game is very memory intensive.</p>
  <p class="note" style="text-align: left; "><b><span data-conref="../../../../assets/snippets/Tag_note.hts"> </span> </b>To properly preserve depth in 3D when drawing to a surface, not only should you have the depth buffer enabled, you should also have z-writing and z-testing enabled. See the functions <span class="inline3_func"><a data-xref="{title}" href="../GPU_Control/gpu_set_zwriteenable.htm">gpu_set_zwriteenable</a></span> and <span class="inline3_func"><a data-xref="{title}" href="../GPU_Control/gpu_set_ztestenable.htm">gpu_set_ztestenable</a></span> more information.</p>
  <p class="note"><b><span data-conref="../../../../assets/snippets/Tag_note.hts"> </span> </b>If your game is 100% 2D or you know that you don&#39;t need a surface depth buffer, then it should be fine to simply call this function once at the start of the game to disable the buffer.</p>
  <div data-conref="../../../../assets/snippets/Note_disables_clipping_masks.hts"> </div>
  <p>See: <a data-xref="{title}" href="../Depth_And_Stencil_Buffer/The_Depth_And_Stencil_Buffer.htm">The Depth And Stencil Buffer</a></p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">surface_depth_disable</span>(disable);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>disable</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td>If set to <span class="inline2">true</span> the depth buffer will be disabled for newly created surfaces.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var _depth_setting = surface_get_depth_disable();<br />
    surface_depth_disable(false);<br />
    surface_with_depth_and_stencil = surface_create(room_width, room_height);<br />
    surface_depth_disable(true);<br />
    surface_without_depth_and_stencil = surface_create(room_width, room_height);<br />
    surface_depth_disable(_depth_setting);</p>
  <p>The above code stores the current depth buffer setting in a variable and then creates two surfaces, one with depth buffering enabled and one without, before restoring the original setting again.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Surfaces.htm">Surfaces</a></div>
        <div style="float:right">Next: <a href="surface_get_height.htm">surface_get_height</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
surface_depth_disable
-->
  <!-- TAGS
surface_depth_disable
-->
</body>
</html>
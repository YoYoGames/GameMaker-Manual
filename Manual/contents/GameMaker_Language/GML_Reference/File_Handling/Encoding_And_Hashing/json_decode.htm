<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_decode</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_decode" />
  <meta name="rh-index-keywords" content="json_decode" />
  <meta name="search-keywords" content="json_decode" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">json_decode</span></h1>
  <hp>
    <p>This function decodes a piece of JSON and converts it into a <span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span>, ready for use in <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  </hp>
  <p class="note"><b><span data-conref="../../../../assets/snippets/Tag_important.hts"> </span> </b>This function - while still valid - has been superseded by the function <span class="inline3_func"><a data-xref="{title}" href="json_parse.htm">json_parse</a></span>, and we recommend that you only use this function for legacy support.</p>
  <div data-conref="../../../../assets/snippets/Note_What_Is_JSON.hts"> </div>
  <h3>Usage Notes</h3>
  <ul class="colour">
    <li>When decoding JSON arrays, there is a map with the key <span class="inline2">&quot;default&quot;</span> ONLY when an array is the top-level structure, and <strong>only</strong> for that top-level array. Internal lists decode directly to a <span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span> without being enclosed in a DS map.</li>
    <li>If you wrote <span data-keyref="GameMaker Name">GameMaker</span> arrays into the top level, or as the contents of a DS map or DS list, these will be decoded as DS lists, <strong>not</strong> arrays.</li>
    <li>Normally you would know what keys the JSON decodes to, but if not then you can use the <span class="inline3_func"><a data-xref="{title}" href="../../Data_Structures/DS_Maps/ds_map_size.htm">ds_map_size</a></span>, <span class="inline3_func"><a data-xref="{title}" href="../../Data_Structures/DS_Maps/ds_map_find_first.htm">ds_map_find_first</a></span> and <span class="inline3_func"><a data-xref="{title}" href="../../Data_Structures/DS_Maps/ds_map_find_next.htm">ds_map_find_next</a></span> functions to parse the map and get the necessary information.</li>
    <li><span data-keyref="GameMaker Name">GameMaker</span> creates the necessary DS maps and lists from the JSON, and for cleaning up you only need to delete the <b>top-level</b> map or list and <span data-keyref="GameMaker Name">GameMaker</span> will automatically delete from memory all the maps and lists underneath.</li>
    <li>This function allows you to load JSON files with a maximum nesting limit of 128.</li>
    <li>You cannot have 64bit numbers in your JSON, as they will not work correctly due them not being handled by the JSON format.</li>
    <li>If the JSON to be decoded requires a hierarchy of lists and maps within the central DS map, these are decoded too and also created for you, using the following rules (note that these rules apply to the top-level structure only):
      <ul>
        <li><strong>JSON is a single value</strong> - returns a DS map with a single entry &quot;default&quot; that is the value</li>
        <li><strong>JSON is an array of objects or values</strong> - returns a DS map with a single entry &quot;default&quot; that is a DS list of the objects or values</li>
        <li><strong>JSON is an object</strong> - returns a DS map that has the object entries in it</li>
      </ul>
    </li>
  </ul>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">json_decode</span>(string)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>string</td>
        <td><span data-keyref="Type_String"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></td>
        <td>The JSON format string that you are passing to the function for decoding</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span> or -1 (if it fails)</p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var resultMap = json_decode(requestResult);<br />
    var list = ds_map_find_value(resultMap, &quot;default&quot;);<br />
    var size = ds_list_size(list);<br />
    for (var n = 0; n &lt; ds_list_size(list); n++;)<br />
    {<br />
        var map = ds_list_find_value(list, n);<br />
        var curr = ds_map_find_first(map);<br />
        while (is_string(curr))<br />
        {<br />
            global.Name[n] = ds_map_find_value(map, &quot;name&quot;);<br />
            curr = ds_map_find_next(map, curr);<br />
        }<br />
    }<br />
    ds_map_destroy(resultMap);</p>
  <p>The above code will decode a JSON string and parse it to generate a global array.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Encoding_And_Hashing.htm">Encoding And Hashing</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="json_stringify.htm">json_stringify</a></div>
      </div>
    </div>
    <h5> </h5>
  </div>
  <p> </p>
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">json_parse</span></h1>
  <p>This function parses a JSON string and converts it into a collection of nested arrays and structs. An array is the equivalent of a JSON array and a struct is the equivalent of a JSON object.</p>
  <p>The JSON should be either previously created using <span class="inline3_func"><a data-xref="{title}" href="json_stringify.htm">json_stringify</a></span> or should come from any other valid source.</p>
  <p>You supply the string to parse, and the function will return the top-level array or struct which can then be used in your code. If you are not sure of the contents of the JSON, you can use the different <a data-xref="{title}" href="../../Variable_Functions/Variable_Functions.htm">Variable Functions</a> (like <span class="inline3_func"><a data-xref="{title}" href="../../Variable_Functions/typeof.htm">typeof</a></span> and <span class="inline3_func"><a data-xref="{title}" href="../../Variable_Functions/variable_struct_get_names.htm">struct_get_names</a></span> in case of a struct) to check the returned contents.</p>
  <h3>Usage Notes</h3>
  <ul class="colour">
    <li>Trying to parse an invalid value (i.e.: not a string, or invalid JSON) will throw an exception error.</li>
    <li>This function only allows you to load JSON files with a maximum nesting limit of <span data-keyref="Const_JSON_Max_Nesting_Limit">128</span>.</li>
    <li>Data conversions:
      <ul>
        <li><span class="inline2">null</span> values are parsed as <span class="inline2">undefined</span>.</li>
        <li>Any runtime values serialised by <span class="inline3_func"><a data-xref="{title}" href="json_stringify.htm">json_stringify</a></span> will be converted back to runtime values (e.g. <a href="../../../GML_Overview/Data_Types.htm">handles</a> and values like <span class="inline2">int64</span>, <span class="inline2">NaN</span> and <span class="inline2">infinity</span>), however this conversion can be disabled by passing <span class="inline2">true</span> into the optional <span><span class="inline2">inhibit_string_convert</span> argument, meaning these will remain as strings.</span></li>
        <li>See <a data-xref="{text}" href="../../../../Additional_Information/Guide_To_Using_JSON.htm#data_conversions">Data Conversions</a> for a full overview.</li>
      </ul>
    </li>
    <li>See <a data-xref="{title}" href="../../../../Additional_Information/Guide_To_Using_JSON.htm">Guide To Using JSON</a> for more information on how <span data-keyref="GameMaker Name">GameMaker</span> interacts with the JSON format.</li>
  </ul>
  <div data-conref="../../../../assets/snippets/Note_See_Guide_To_Using_JSON.hts"> </div>
  <div data-conref="../../../../assets/snippets/JSON_Filter_Function_Description.hts"> </div>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">json_parse</span>(json, [filter_func], [inhibit_string_convert])</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>json</td>
        <td><span data-keyref="Type_String"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></td>
        <td>The JSON string to parse</td>
      </tr>
      <tr>
        <td>filter_func</td>
        <td><span data-keyref="Type_Function"><a href="../../../GML_Overview/Script_Functions.htm" target="_blank">Function</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Filter function that processes each item. Don&#39;t pass a value or set this to <span class="inline2">undefined</span> if you only want to set <span class="inline2">inhibit_string_convert</span>. Syntax: <span class="inline2">function(key, value) -&gt; new_value</span></td>
      </tr>
      <tr>
        <td>inhibit_string_convert</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Set this to <span class="inline2">true</span> to disable converting strings into runtime references. Default value: <span class="inline2">false</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Struct"><a href="../../../GML_Overview/Structs.htm" target="_blank">Struct</a></span> or <span data-keyref="Type_Array"><a href="../../../GML_Overview/Arrays.htm" target="_blank">Array</a></span></p>
  <p> </p>
  <h4>Example 1:</h4>
  <p class="code">var json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    var data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>The above code creates a new string containing valid JSON, and then calls <span class="inline3_func"><a data-xref="{title}" href="json_parse.htm">json_parse</a></span> to convert that string into a GML struct. It then prints the result to the debug log.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"> </span> You will notice that the JSON string contains a backslash (<span class="inline2">\</span>) before every double quote (<span class="inline2">&quot;</span>) inside it:<br />
    <br />
    <span class="inline2">json = &quot;{ <strong>\&quot; </strong>myObj</span><br />
    <br />
    This is to ensure that the double quote is read as an actual character within the string, instead of being read as part of the code and closing the string prematurely. This way we are using a backslash to &quot;escape&quot; the double quote.<br />
    <br />
    If you are loading JSON from an external file however, there is no need to escape characters in that file.
  </p>
  <hr />
  <p>After parsing the JSON string above, if you know its structure, you can use various <a data-xref="{title}" href="../../Variable_Functions/Variable_Functions.htm">Variable Functions</a> to check and read its contents:</p>
  <p class="code">var data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if (variable_struct_exists(data, &quot;myObj&quot;))<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if (is_struct(data.myObj))<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if (variable_struct_exists(data, &quot;myArray&quot;))<br />
    {<br />
        // Check if it&#39;s an array<br />
        if (is_array(data.myArray))<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>The above code will parse the given JSON string, generating the following console output:</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <h4>Example 2: Filter Function</h4>
  <p class="code">var json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    var data = json_parse(json, function (key, value)<br />
    {<br />
        show_debug_message($&quot;Key: {key}, Value: {value}&quot;);<br />
        return value;<br />
    });
  </p>
  <p>The above code takes the same JSON string from the previous example, and converts it into a GML struct, however this time it uses a filter function.</p>
  <p>The filter function prints the key and value of each item to the Output Log:</p>
  <p class="code_plain">Key: apples, Value: 10<br />
    Key: oranges, Value: 12<br />
    Key: potatoes, Value: 100000<br />
    Key: avocados, Value: 0<br />
    Key: myObj, Value: { apples : 10, oranges : 12, potatoes : 100000, avocados : 0 }<br />
    Key: 8, Value: 1<br />
    Key: 7, Value: 5<br />
    Key: 6, Value: 1<br />
    Key: 5, Value: 0<br />
    Key: 4, Value: 4<br />
    Key: 3, Value: 2<br />
    Key: 2, Value: 2<br />
    Key: 1, Value: 1<br />
    Key: 0, Value: 0<br />
    Key: myArray, Value: [ 0,1,2,2,4,0,1,5,1 ]<br />
    Key: , Value: { myObj : { apples : 10, oranges : 12, potatoes : 100000, avocados : 0 }, myArray : [ 0,1,2,2,4,0,1,5,1 ] }</p>
  <p>Note how the filter function runs on the struct (<span class="inline2">myObj</span>) and array (<span class="inline2">myArray</span>) in the JSON and then also on each item inside the struct and array. It also runs on the root structure with the key set to an empty string (here, seen on the last line).</p>
  <p> </p>
  <h4>Example 3: Overriding Values</h4>
  <p class="code">var json = &quot;{\&quot;prices\&quot;: [2, 5, 1, 2, 4, 5]}&quot;;<br />
    <br />
    var data = json_parse(json, function (key, value)<br />
    {<br />
        return is_real(value) ? value * 1000 : value;<br />
    });<br />
    <br />
    show_debug_message(data);
  </p>
  <p>The above code takes a JSON string containing an array inside a struct. Then <span class="inline3_func"><span data-field="title" data-format="default">json_parse</span></span> is run with a filter function that multiplies each value with 1000, only when it&#39;s a <span data-keyref="Type_Real"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>. Otherwise it simply returns the value itself.</p>
  <p>The resulting structure looks like this:</p>
  <p class="code_plain">{ prices : [ 2000,5000,1000,2000,4000,5000 ] }</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div>
        <div style="float:right">Next: <a href="base64_encode.htm">base64_encode</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>
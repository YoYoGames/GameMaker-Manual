<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>sha1_string_unicode</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for sha1_string_unicode" />
  <meta name="rh-index-keywords" content="sha1_string_unicode" />
  <meta name="search-keywords" content="sha1_string_unicode" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">title</span></h1>
  <p>In cryptography, SHA-1 is a cryptographic hash function designed by the United States <i>National Security Agency</i> and is employed in several widely used applications and protocols like the popular <b>Git</b> where it is used to check for file changes.
    This function will take an input unicode string and returns a 160 bit message digest in ASCII format, for example:</p>
  <p class="code">sha1 input string = &quot;The quick brown fox jumps over the lazy dog&quot;<br/> sha1 output hash = &quot;2fd4e1c6 7a2d28fc ed849ee1 bb76e739 1b93eb12&quot;</p>
  <p>In this way you can generate a secure key which can be stored and used to check the integrity of the information being sent to (or received from) an external server (for example).</p>
  <p class="note"><b>NOTE</b>: There are two formats for the sha1 encoding, UTF-8 and unicode. Both are provided to facilitate communication with different server setups, but the most common to use is unicode.</p>
  <p class="note"><strong>NOTE</strong>: SHA-1 is not completely secure and can be broken. See <a href="https://en.wikipedia.org/wiki/SHA-1">this page</a> for more info.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">sha1_string_unicode(string)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th><th>Type</th>
        <th>Description</th>
     </tr>
      <tr>
        <td>string</td><td><span data-keyref="Type_String"></span></td>
        <td>The string to hash.</td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_String"></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var hash, str;<br/> str = base64_encode(game_data);<br/> hash = sha1_string_unicode(str);<br/> http_get(&quot;http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?hash=&quot; + hash); http_get(&quot;http://www.MacSweeneyGames.com/CatchTheHaggis/gamedata?data=&quot;
    + str);</p>
  <p>The above code will base64 encode a string and then generate a sha1 hash. Finally, both the hash and the encoded string are sent to a server.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Encoding_And_Hashing.htm">File Encoding</a></div>
        <div style="float:right">Next: <a href="sha1_file.htm">sha1_file</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
sha1_string_unicode
-->
  <!-- TAGS
sha1_string_unicode
-->
</body>
</html>
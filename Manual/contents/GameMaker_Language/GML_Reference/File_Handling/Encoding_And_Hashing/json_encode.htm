<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_encode</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_encode" />
  <meta name="rh-index-keywords" content="json_encode" />
  <meta name="search-keywords" content="json_encode" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">json_encode</span></h1>
  <p>This function takes a DS map or array that you have previously created and encodes it as a JSON string which you can then use as (for example) part of an <span class="inline3_func"><a data-xref="{title}" href="../../Asynchronous_Functions/HTTP/http_post_string.htm">http_post_string</a></span> call, or - so it can be stored externally - it can be written to a file.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_important.hts"> </span> This function - while still valid - has been superseded by the function <span class="inline3_func"><a data-xref="{title}" href="json_stringify.htm">json_stringify</a></span>, and we recommend that you only use this function for legacy support.</p>
  <div data-conref="../../../../assets/snippets/Note_What_Is_JSON.hts"> </div>
  <h3>Usage Notes</h3>
  <ul class="colour">
    <li>If using an array as the top-level structure, then the array can only contain valid values or other arrays, and <em>not</em> data structures. For that you should use the appropriate DS functions.</li>
    <li>Care should be taken when writing JSON to an INI file, as the INI specifications can cause issues when using quotes and escape characters. See the function <a href="../Ini_Files/ini_write_string.htm"><span class="inline2">ini_write_string()</span></a> for more information.</li>
    <li>If the provided map contains any circular references, such as references back to the main map itself (forming an infinite loop) or references to maps within the main map forming such infinite loops, such references will be serialised only on the first level where they&#39;re encountered, and converted to <span class="inline2">&quot;null&quot;</span> for deeper references.</li>
    <li>If you encode an int64 to JSON it will write it as an <i>int</i> if it is in the valid range for an int32, as a <i>double</i> if it can do so without losing precision or (if neither of those cases is applicable) as a <i>string</i> with an identifier &quot;<span class="inline2">@i64@</span>&quot; before it and &quot;<span class="inline2">$i64$</span>&quot; after it. When you come to decode the JSON to a map again <span data-keyref="GameMaker Name">GameMaker</span> will pick these identifiers up and re-convert the value to an int64. This does mean that if the JSON is intended for a server or some other non-<span data-keyref="GameMaker Name">GameMaker</span> target, these values will not be appropriate and so should be avoided.</li>
    <li><a href="../../../GML_Overview/Data_Types.htm"><span class="inline2">infinity</span></a> and <a href="../../../GML_Overview/Data_Types.htm"><span class="inline2">NaN</span></a> will be written into the JSON as <span class="inline2">&quot;@@infinity$$&quot;</span> (<span class="inline2">&quot;@@-infinity$$&quot;</span> for negative) and <span class="inline2">&quot;@@nan$$&quot;</span> respectively. These values will be correctly loaded back into memory when the JSON is loaded with <span class="inline3_func"><a data-xref="{title}" href="json_decode.htm">json_decode</a></span>.</li>
  </ul>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_note.hts"> </span> The hierarchical functionality of JSON is available through special DS map and DS list functions (for example <span class="inline3_func"><a data-xref="{title}" href="../../Data_Structures/DS_Maps/ds_map_add_list.htm">ds_map_add_list</a></span> or <span class="inline3_func"><a data-xref="{title}" href="../../Data_Structures/DS_Lists/ds_list_mark_as_map.htm">ds_list_mark_as_map</a></span>), so you are able to encode sub-lists and maps.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">json_encode</span>(map, [prettify])</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>map</td>
        <td><span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span></td>
        <td>A DS map with the information to encode (or an array)</td>
      </tr>
      <tr>
        <td>prettify</td>
        <td><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></td>
        <td><span data-conref="../../../../assets/snippets/Tag_optional.hts"> </span> Whether to pretiffy the output, i.e. insert indentation and line breaks for readability</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_String"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">String</a></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">var hiscore_map, i, str;<br />
    hiscore_map = ds_map_create();<br />
    for (i = 0; i &lt; 10; i ++;)<br />
    {<br />
        ds_map_add(hiscore_map, name[i], score[i]);<br />
    }<br />
    str = json_encode(hiscore_map);<br />
    get[0] = http_post_string(&quot;http://www.angusgames.com/game?game_id=&quot; + string(global.game_id), str)<br />
    ds_map_destroy(hiscore_map);</p>
  <p>The above code creates a <span data-keyref="Type_ID_DS_Map"><a href="../../Data_Structures/DS_Maps/ds_map_create.htm" target="_blank">DS Map</a></span> and then loops through the <span class="inline2">name</span> and <span class="inline2">score</span> arrays, adding each key/value pair to the new map. Next, this map is encoded using <span class="inline3_func"><a data-xref="{title}" href="json_encode.htm">json_encode</a></span> and stored as a string in the variable <span class="inline2">str</span>. This string is then sent to a web server using <span class="inline3_func"><a data-xref="{title}" href="../../Asynchronous_Functions/HTTP/http_post_string.htm">http_post_string</a></span> and the DS map is destroyed to prevent a memory leak as it is no longer needed.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Encoding_And_Hashing.htm">Encoding And Hashing</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="json_encode.htm">json_encode</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_encode
-->
  <!-- TAGS
json_encode
-->
</body>
</html>
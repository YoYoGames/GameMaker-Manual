<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>network_send_raw</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for network_send_raw" />
  <meta name="rh-index-keywords" content="network_send_raw,network_send_binary,network_send_text" />
  <meta name="search-keywords" content="network_send_raw,text WebSockets,network_send_binary,network_send_text" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">network_send_raw</span></h1>
  <p>This function sends a &quot;raw&quot; data packet through the network.</p>
  <p>The function takes the <span data-keyref="Type_ID_Network_Socket"><a href="network_create_socket.htm" target="_blank">Network Socket ID</a></span> to connect through and then you must supply the <span data-keyref="Type_ID_Buffer"><a href="../Buffers/buffer_create.htm" target="_blank">Buffer</a></span> which contains the data to be sent (for more information on buffers see <a href="../Buffers/Buffers.htm">Reference - Buffers</a>) and finally the size (in bytes) of the data packet.</p>
  <p>The data sent is not formatted by <span data-keyref="GameMaker Name">GameMaker</span> in any way and the receiving devices will get the data as a stream which means you will have to handle it yourself. See: <a data-xref="{text}" href="Networking.htm#h">Packet Separation</a></p>
  <p>The function will return the number of bytes of data sent, or a number less than 0 if the send has failed.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_warning.hts"> </span> <span data-conref="../../../assets/snippets/Networking_dont_mix_raw_reg.hts"> </span></p>
  <div data-conref="../../../assets/snippets/Note_Networking_TCP_like.hts"> </div>
  <h2>Options Argument</h2>
  <p>The last argument is optional, and is only used with WebSockets. It allows you to choose between sending binary or text data. Either of these constants can be specified in this argument:</p>
  <table>
    <colgroup>
      <col style="width: 519px;" />
      <col style="width: 743px;" />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2" style=""><span data-keyref="Type_Constant_Network_Send_Type"><a href="network_send_raw.htm" target="_blank">Network Send Type Constant</a></span></th>
      </tr>
      <tr>
        <th style="">Constant</th>
        <th style="">Description</th>
      </tr>
      <tr>
        <td style=""><span class="inline">network_send_binary</span></td>
        <td style="">Send a binary message</td>
      </tr>
      <tr>
        <td style=""><span class="inline">network_send_text</span></td>
        <td style="">Send a text message</td>
      </tr>
    </tbody>
  </table>
  <p>The APIs for some platforms only accept text messages when using WebSockets (e.g. Twitch), so the <span class="inline2">network_send_text</span> constant can be used in such cases. If this argument is not specified, binary data is sent by default.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code"><span data-field="title" data-format="default">network_send_raw</span>(socket, bufferid, size, [options]);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>socket</td>
        <td><span data-keyref="Type_ID_Network_Socket"><a href="network_create_socket.htm" target="_blank">Network Socket ID</a></span></td>
        <td>The id of the socket to use.</td>
      </tr>
      <tr>
        <td>bufferid</td>
        <td><span data-keyref="Type_ID_Buffer"><a href="../Buffers/buffer_create.htm" target="_blank">Buffer</a></span></td>
        <td>The buffer to get the data from.</td>
      </tr>
      <tr>
        <td>size</td>
        <td><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></td>
        <td>The size (in bytes) of the data.</td>
      </tr>
      <tr>
        <td>options</td>
        <td><span data-keyref="Type_Constant_Network_Send_Type"><a href="network_send_raw.htm" target="_blank">Network Send Type Constant</a></span></td>
        <td><span data-conref="../../../assets/snippets/Tag_optional.hts"> </span> Used for WebSockets to choose between text and binary data; if not specified, binary data is sent.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">buff = buffer_load(&quot;player_save.dat&quot;);<br />
    network_send_raw(sock, buff, buffer_get_size(buff));</p>
  <p>The above information loads previously saved data into a buffer in memory and stores the buffer in the variable <span class="inline2">buff</span>. This complete buffer is then send as a raw data packet over the network using the socket identified by the variable <span class="inline2">sock</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Networking.htm">Networking</a></div>
        <div style="float:right">Next: <a href="network_send_udp.htm">network_send_udp</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2023 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
network_send_raw
-->
  <!-- TAGS
network_send_raw
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>keyboard_set_map</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for keyboard_set_map" />
  <meta name="rh-index-keywords" content="keyboard_set_map" />
  <meta name="search-keywords" content="keyboard_set_map" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">keyboard_set_map</span></h1>
  <p>Sometimes when making a game you may wish one key to do the same as another. For example many people use the keys WASD for movement, but then many people <i>also</i> use the arrow keys! So, what to do? Well, you <i>could</i> code the movement system twice, but that is a bit complicated and thankfully redundant as this function permits you to &quot;map&quot; one key to another and so any input from either key will be interpreted as the same. To do this you choose a key that you want to map (key2 - this will be the key that you write the code for) and a key that you want it to be mapped <i>to</i> (key1). After that, keypresses to either key will be interpreted by <span data-keyref="GameMaker Name">GameMaker</span> as coming from key2. You can also use this function to design a system where the user can define their own keys for playing by simply mapping the user input key to the key that you have coded into the game.</p>
  <p>The function takes a keycode value as returned by the function <span class="inline3_func"><a data-xref="{title}" href="../../Strings/ord.htm">ord</a></span> (only <i>capital</i> letters from A-Z or numbers from 0-9), or any of the <span class="inline2">vk_*</span> constants listed on the main <a data-xref="{title}" href="Keyboard_Input.htm">Keyboard Input</a> page.</p>
  <p class="note"><span data-conref="../../../../assets/snippets/Tag_important.hts"> </span> The key you are mapping to (key1) will no longer be usable as it&#39;s actual key symbol once you use this function. For example, if you map the up-arrow to <span class="inline2">&quot;W&quot;</span> then you will no longer be able to detect the press of the <span class="inline2">&quot;W&quot;</span> key as a <span class="inline2">&quot;W&quot;</span>, it will always be considered as the up arrow. To undo this, either map the key to itself - so both key1 and key2 would be <span class="inline2">ord(&quot;W&quot;)</span> - or use the function <span class="inline3_func"><a data-xref="{title}" href="keyboard_unset_map.htm">keyboard_unset_map</a></span>.</p>
  <p> </p>
  <h4><b>Syntax:</b></h4>
  <p class="code"><span data-field="title" data-format="default">keyboard_set_map</span>(key1, key2);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>key1</td>
        <td><span data-keyref="Type_Constant_VK"><a href="Keyboard_Input.htm" target="_blank">Virtual Key Constant (vk_*)</a></span></td>
        <td>This is the key that key1 is to be mapped to</td>
      </tr>
      <tr>
        <td>key2</td>
        <td><span data-keyref="Type_Constant_VK"><a href="Keyboard_Input.htm" target="_blank">Virtual Key Constant (vk_*)</a></span></td>
        <td>This is the key that is to be mapped</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4><b>Returns:</b></h4>
  <p class="code"><span data-keyref="Type_Bool"><a href="../../../GML_Overview/Data_Types.htm" target="_blank">Boolean</a></span></p>
  <p> </p>
  <h4><b>Example:</b></h4>
  <p class="code"><span data-field="title" data-format="default">keyboard_set_map</span>(ord(&quot;A&quot;), vk_left);</p>
  <p>The above example code will map the <span class="inline2">&quot;A&quot;</span> key to the left arrow key. This means that the player can use either the <span class="inline2">&quot;A&quot;</span> <i>or</i> the left arrow key, and that all code written for the left arrow will also respond to the <span class="inline2">&quot;A&quot;</span> key being used instead.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a data-xref="{title}" href="Keyboard_Input.htm">Keyboard Input</a></div>
        <div style="float:right">Next: <a data-xref="{title}" href="keyboard_get_map.htm">keyboard_get_map</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
keyboard_set_map
-->
  <!-- TAGS
keyboard_set_map
-->
</body>
</html>
<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>clickable_add</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for clickable_add" />
  <meta name="rh-index-keywords" content="clickable_add" />
  <meta name="search-keywords" content="clickable_add" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">title</span></h1>
  <p>With this function you can create a custom, clickable, icon that acts as a &quot;button&quot; outside of the game canvas, but within the browser window itself. The function will return an ID value which must be stored in a variable to be used in all further button functions that reference the new clickable. This function is very useful to prevent the browser creating a pop-up window when clicking on the button as it is all done through <span data-keyref="GameMaker Name">GameMaker</span> itself.</p>
  <p>You must first set the position, which is relative to the (0,0) of the browser window (top left corner) and then give the texture page entry for the sprite you wish the button icon to have (see: <a href="../Asset_Management/Sprites/Sprite_Information/sprite_get_tpe.htm"><span class="inline">sprite_get_tpe()</span></a>). You can then specify either a URL to open or a script (from the Asset Browser of <span data-keyref="GameMaker Name">GameMaker</span>) to be opened or run. The &quot;target&quot; parameter that you specify is the same as the standard JavaScript &quot;name&quot; value when you use the <span class="inline">open()</span> method (be aware that all but &#39;_self&#39; may result in the browser blocking, or asking the user if they wish to allow it) and the &quot;params&quot; argument is the same as the JavaScript &quot;specs&quot; parameter for controlling what properties the new window/tab should display (not all browsers may support all features). If you are using the icon to run an internal script, these last two arguments can be left as empty strings &quot;&quot;.</p>
  <p>Valid targets are:</p>
  <table>
    <tbody>
      <tr>
        <th>Target</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>_blank</td>
        <td>Opens the linked document in a new window or tab.</td>
      </tr>
      <tr>
        <td>_self</td>
        <td>Opens the linked document in the same frame as it was clicked (this is default).</td>
      </tr>
      <tr>
        <td>_parent</td>
        <td>Opens the linked document in the parent frame.</td>
      </tr>
      <tr>
        <td>_top</td>
        <td>Opens the linked document in the full body of the window.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Valid parameters are:</p>
  <table>
    <tbody>
      <tr>
        <th>Parameters</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><b>&#39;height=[</b>px<b>]&#39;</b></td>
        <td>The height of the window, with the minimum value being 100.</td>
      </tr>
      <tr>
        <td><b>&#39;width=[</b>px<b>]&#39;</b></td>
        <td>The width of the window, with the minimum value being 100.</td>
      </tr>
      <tr>
        <td><b>&#39;left=[</b>px<b>]&#39;</b></td>
        <td>The left position of the window.</td>
      </tr>
      <tr>
        <td><b>&#39;top=[</b>px<b>]&#39;</b></td>
        <td>The top position of the window (IE only).</td>
      </tr>
      <tr>
        <td><b>&#39;location=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to display the address field (default is 1).</td>
      </tr>
      <tr>
        <td><b>&#39;menubar=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to display the menu bar (default is 1).</td>
      </tr>
      <tr>
        <td><b>&#39;resizable=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not the window is resizable (default is 1).</td>
      </tr>
      <tr>
        <td><b>&#39;scrollbars=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to display scroll bars (default is 1).</td>
      </tr>
      <tr>
        <td><b>&#39;status=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to add a status bar (default is 1).</td>
      </tr>
      <tr>
        <td><b>&#39;titlebar=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to display the title bar. This is ignored unless the calling application is an HTML Application or a trusted dialog box (default is 1);</td>
      </tr>
      <tr>
        <td><b>&#39;toolbar=[</b>boolean<b>]&#39;</b></td>
        <td>Whether or not to display the browser toolbar (default is yes).</td>
      </tr>
    </tbody>
  </table>
  <p><br />
    It is also worth noting that if the URL argument you pass in is the name of a <a href="../../GML_Overview/Script_Functions.htm">script function</a> (ie: it doesn&#39;t start with &quot;http://&quot;) AND the script is called <span class="inline"><b>gmcallback_*</b></span> then you can get direct feeds into an html5 event. <span data-keyref="GameMaker Name">GameMaker</span> script function names are <i>not</i> obfuscated if they begin with <span class="inline">gmcallback_</span>.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">clickable_add(x, y, tpe, url, target, params);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>x</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The x position within the <i>window</i>.</td>
      </tr>
      <tr>
        <td>y</td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td>The y position within the <i>window</i>.</td>
      </tr>
      <tr>
        <td>tpe</td>
        <td><span data-keyref="Type_TPE">Texture Page Entry</span></td>
        <td>The texture page entry for the sprite to be used.</td>
      </tr>
      <tr>
        <td>url</td>
        <td><span data-keyref="Type_String">String</span></td>
        <td>The URL (website address) to link to, or the script to be run.</td>
      </tr>
      <tr>
        <td>target</td>
        <td><span data-keyref="Type_String">String</span></td>
        <td>This is the target area to open the URL in (see description).</td>
      </tr>
      <tr>
        <td>params</td>
        <td><span data-keyref="Type_String">String</span></td>
        <td>The various parameters for the icon (see description).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code"><span data-keyref="Type_ID_Clickable">Clickable ID</span></p>
  <p> </p>
  <h4>Example:</h4>
  <p class="code">home_but = clickable_add(32, 32, sprite_get_tpe(spr_MS_Home, 0), &quot;http://macsweeney_games.com&quot;, &quot;_blank&quot;, &quot;width=700, height=500, menubar=0, toolbar=0, scrollbars=0&quot;);</p>
  <p>The above code creates a clickable DOM icon at the position (32, 32) of the page that the game canvas is running on. The icon uses the sprite referenced from the texture page as &quot;spr_MS_Home&quot; and when clicked the icon will open a new window for the specified URL and with the defined properties for that window.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Web_And_HTML5.htm">Web And HTML5</a></div>
        <div style="float:right">Next: <a href="clickable_add_ext.htm">clickable_add_ext</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
clickable_add
-->
  <!-- TAGS
clickable_add
-->
</body>
</html>
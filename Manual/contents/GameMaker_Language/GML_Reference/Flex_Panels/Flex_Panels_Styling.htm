<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Flex Panel Struct Members</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js" type="module"></script>
  <meta name="rh-authors" content="" />
  <meta name="topic-comment" content="" />
  <meta name="rh-index-keywords" content="Flex_Panels_Styling" />
  <meta name="search-keywords" content="Flex_Panels_Styling" />
  <meta name="template" content="assets/masterpages/Manual_Page.htt" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">Flex Panel Struct Members</span></h1>
  <p>When creating a new <span data-keyref="FlexPanel">Flex Panel</span> node using <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_create_node.htm">flexpanel_create_node</a></span>, you can pass a struct containing information on the node and its children, or a string containing JSON for the same data. For example:</p>
  <div data-conref="../../../assets/snippets/Flex_Panel_example_create_node_with_struct.hts"> </div>
  <p>This defines a root node with child nodes nested within it (and further child nodes within child nodes).</p>
  <h2>Property List</h2>
  <p>The properties that you can define in the struct or JSON string are listed below. The rest of the page describes each property in detail.</p>
  <ul class="colour">
    <li><span class="inline2">name</span></li>
    <li><span class="inline2">data</span></li>
    <li><span class="inline2">nodes</span></li>
    <li><span class="inline2">width</span>, <span class="inline2">height</span></li>
    <li><span class="inline2">minWidth</span>, <span class="inline2">maxWidth</span>, <span class="inline2">minHeight</span>, <span class="inline2">maxHeight</span></li>
    <li><span class="inline2">left</span>, <span class="inline2">right</span>, <span class="inline2">top</span>, <span class="inline2">bottom</span></li>
    <li><span class="inline2">alignContent</span></li>
    <li><span class="inline2">alignItems</span></li>
    <li><span class="inline2">alignSelf</span></li>
    <li><span class="inline2">aspectRatio</span></li>
    <li><span class="inline2">display</span></li>
    <li><span class="inline2">flex</span></li>
    <li><span class="inline2">flexGrow</span></li>
    <li><span class="inline2">flexShrink</span></li>
    <li><span class="inline2">flexBasis</span></li>
    <li><span class="inline2">flexDirection</span></li>
    <li><span class="inline2">flexWrap</span></li>
    <li><span class="inline2">justifyContent</span></li>
    <li><span class="inline2">direction</span></li>
    <li><span class="inline2">gap</span>, <span class="inline2">gapRow</span>, <span class="inline2">gapColumn</span></li>
    <li><span class="inline2">margin</span>, <span class="inline2">marginInline</span>, <span class="inline2">marginLeft</span>, <span class="inline2">marginRight</span>, <span class="inline2">marginTop</span>, <span class="inline2">marginBottom</span>, <span class="inline2">marginStart</span>, <span class="inline2">marginEnd</span>, <span class="inline2">marginHorizontal</span>, <span class="inline2">marginVertical</span></li>
    <li><span class="inline2">padding</span>, <span class="inline2">paddingLeft</span>, <span class="inline2">paddingRight</span>, <span class="inline2">paddingTop</span>, <span class="inline2">paddingBottom</span>, <span class="inline2">paddingStart</span>, <span class="inline2">paddingEnd</span>, <span class="inline2">paddingHorizontal</span>, <span class="inline2">paddingVertical</span></li>
    <li><span class="inline2">border</span>, <span class="inline2">borderLeft</span>, <span class="inline2">borderRight</span>, <span class="inline2">borderTop</span>, <span class="inline2">borderBottom</span>, <span class="inline2">borderStart</span>, <span class="inline2">borderEnd</span>, <span class="inline2">borderHorizontal</span>, <span class="inline2">borderVertical</span></li>
    <li><span class="inline2">start</span>, <span class="inline2">end</span></li>
    <li><span class="inline2">horizontal</span>, <span class="inline2">vertical</span></li>
    <li><span class="inline2">position</span>, <span class="inline2">positionType</span></li>
  </ul>
  <p>The sections below describe what type of values you can pass for each property.</p>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_important.hts"> </span> Each property also has GML functions for setting and getting that property for a node. However, the types of values that a setter function accepts may be different from the type of value you can give it in the struct/JSON. Ensure you read the page for the function you are trying to use for information on its argument types.</p>
  <h2>Basic Properties</h2>
  <h3>Name</h3>
  <p class="note">Struct property: <span class="inline2">name</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_set_name.htm">flexpanel_node_set_name</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_get_name.htm">flexpanel_node_get_name</a></span></p>
  <p>You can give each node an optional, non-unique name. This can help you identify a node when using the final layout data in your systems.</p>
  <h3>Data</h3>
  <p class="note">Struct property: <span class="inline2">data</span><br />
    Function: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_get_data.htm">flexpanel_node_get_data</a></span></p>
  <p>You can give a node a <span class="inline2">data</span> member which is a struct that can store any data you like. It does not affect the layouts and is for your own use.</p>
  <p>When this member is not supplied, a node is still created with an empty data struct, which can be retrieved at any time. The returned struct can be modified and it affects what is returned with future calls to the function for the same node.</p>
  <h3>Nodes</h3>
  <p class="note">Struct property: <span class="inline2">nodes</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_insert_child.htm">flexpanel_node_insert_child</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_remove_child.htm">flexpanel_node_remove_child</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_remove_all_children.htm">flexpanel_node_remove_all_children</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/flexpanel_node_get_child.htm">flexpanel_node_get_child</a></span></p>
  <p>The <span class="inline2">nodes</span> member is an array. This array defines the child nodes under the current node, where each node is a struct with the same format described on this page.</p>
  <p>You can nest nodes inside nodes, e.g.:</p>
  <div data-conref="../../../assets/snippets/Flex_Panel_example_create_node_with_struct.hts"> </div>
  <h2 id="h20">Styling Properties</h2>
  <p class="note"><span data-conref="../../../assets/snippets/Tag_note.hts"> </span> You can also refer to <a href="https://www.yogalayout.dev/docs/styling/">Yoga&#39;s styling documentation</a> for information beyond what this page describes.</p>
  <h3 id="h19">Width and Height</h3>
  <p class="note">Struct properties: <span class="inline2">width</span>, <span class="inline2">height</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_width.htm">flexpanel_node_style_set_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_height.htm">flexpanel_node_style_set_height</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_width.htm">flexpanel_node_style_get_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_height.htm">flexpanel_node_style_get_height</a></span></p>
  <p>These properties define the width and height of the &quot;border box&quot; of the node, which is the collective size of the node&#39;s content, padding and border.</p>
  <p>Both width and height can take the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;auto&quot;</span>: This is the default value. It calculates the width or height of the node based on its content (e.g. child nodes).</li>
    <li>A <span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span> value, e.g. <span class="inline2">64</span>: This defines a size in absolute pixels, however depending on other properties, this may or may not be the <a href="Function_Reference/flexpanel_node_layout_get_position.htm">final size</a> of the node.</li>
    <li>Percentage value as string, e.g. <span class="inline2">&quot;50%&quot;</span>: This defines the width or height as a percentage of its <a data-xref="{text}" href="Flex_Panels.htm#h">Containing Block</a>&#39;s width or height.</li>
  </ul>
  <h3 id="h18">Min/Max Width and Height</h3>
  <p class="note">Struct properties: <span class="inline2">minWidth</span>, <span class="inline2">maxWidth</span>, <span class="inline2">minHeight</span>, <span class="inline2">maxHeight</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_min_width.htm">flexpanel_node_style_set_min_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_max_width.htm">flexpanel_node_style_set_max_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_min_height.htm">flexpanel_node_style_set_min_height</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_max_height.htm">flexpanel_node_style_set_max_height</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_min_width.htm">flexpanel_node_style_get_min_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_max_width.htm">flexpanel_node_style_get_max_width</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_min_height.htm">flexpanel_node_style_get_min_height</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_max_height.htm">flexpanel_node_style_get_max_height</a></span></p>
  <p>These properties define the minimum and maximum size the node must maintain in each dimension. It accepts absolute pixel values (<span data-keyref="Type_Real"><a href="../../GML_Overview/Data_Types.htm" target="_blank">Real</a></span>) and percentage values (<span data-keyref="Type_String"><a href="../../GML_Overview/Data_Types.htm" target="_blank">String</a></span> ending with <span class="inline2">%</span>) (as described in the previous section).</p>
  <h3 id="h3">Aspect Ratio</h3>
  <p class="note">Struct property: <span class="inline2">aspectRatio</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_aspect_ratio.htm">flexpanel_node_style_set_aspect_ratio</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_aspect_ratio.htm">flexpanel_node_style_get_aspect_ratio</a></span></p>
  <p>This is the aspect ratio that the node must maintain and corresponds to the horizontal axis.</p>
  <p>For example, an aspect ratio of <span class="inline2">1</span> will result in a square node, <span class="inline2">2</span> will be a 2:1 rectangle where its width is twice as much as its height, <span class="inline2">0.5</span> will make the width half the size of the height.</p>
  <h3 id="h12">Insets</h3>
  <p class="note">Struct properties: <span class="inline2">left</span>, <span class="inline2">right</span>, <span class="inline2">top</span>, <span class="inline2">bottom</span>, <span class="inline2">start</span>, <span class="inline2">end</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_position.htm">flexpanel_node_style_set_position</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_position.htm">flexpanel_node_style_get_position</a></span></p>
  <p>These properties define the distance between an edge of the node and the same edge of its parent&#39;s node, with positive values moving the node toward the centre, and negative values moving it away from the centre.</p>
  <p>For example, a <span class="inline2">left</span> value of <span class="inline2">20</span> will place the node&#39;s left edge 20 pixels to the right of the parent&#39;s left edge. A <span class="inline2">right</span> value of <span class="inline2">40</span> will move the node so its right edge is 40 pixels to the left of its parent&#39;s, without resizing the node.</p>
  <p>These values also accept percentages as strings.</p>
  <p><span class="inline2">left</span> and <span class="inline2">top</span> will always take precedence over <span class="inline2">right</span> and <span class="inline2">bottom</span>, respectively. <span class="inline2">start</span> and <span class="inline2">end</span> change depending on the <a href="#direction">Layout Direction</a>.</p>
  <h3 id="h17">Position Type</h3>
  <p class="note">Struct properties: <span class="inline2">position</span>, <span class="inline2">positionType</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_position_type.htm">flexpanel_node_style_set_position_type</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_position_type.htm">flexpanel_node_style_get_position_type</a></span></p>
  <p>This defines the position type of the node. You can pass any one of the following strings:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;relative&quot;</span> (default): This node will participate in the flow of its parent container and will take up space in it. Inset positions (<span class="inline2">left</span>, <span class="inline2">top</span>, etc.) will be relative to the node&#39;s position within the flow.</li>
    <li><span class="inline2">&quot;absolute&quot;</span>: This node is removed from the flow of its parent and will not take up space. Inset positions will be relative to the <a data-xref="{text}" href="Flex_Panels.htm#h">Containing Block</a> which may not be its direct parent.</li>
    <li><span class="inline2">&quot;static&quot;</span>: The node will behave like relative except it will ignore insets and will not form a <a data-xref="{text}" href="Flex_Panels.htm#h">Containing Block</a> for its children.</li>
  </ul>
  <h3 id="h14">Margin</h3>
  <p class="note">Struct properties: <span class="inline2">margin</span>, <span class="inline2">marginInline</span>, <span class="inline2">marginLeft</span>, <span class="inline2">marginRight</span>, <span class="inline2">marginTop</span>, <span class="inline2">marginBottom</span>, <span class="inline2">marginStart</span>, <span class="inline2">marginEnd</span>, <span class="inline2">marginHorizontal</span>, <span class="inline2">marginVertical</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_margin.htm">flexpanel_node_style_set_margin</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_margin.htm">flexpanel_node_style_get_margin</a></span></p>
  <p>This is the space around the outside of the node. You can define it for all edges or for a specific edge. Accepts pixel values and percentages.</p>
  <h3 id="h15">Padding</h3>
  <p class="note">Struct properties: <span class="inline2">padding</span>, <span class="inline2">paddingLeft</span>, <span class="inline2">paddingRight</span>, <span class="inline2">paddingTop</span>, <span class="inline2">paddingBottom</span>, <span class="inline2">paddingStart</span>, <span class="inline2">paddingEnd</span>, <span class="inline2">paddingHorizontal</span>, <span class="inline2">paddingVertical</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_padding.htm">flexpanel_node_style_set_padding</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_padding.htm">flexpanel_node_style_get_padding</a></span></p>
  <p>This is the spacing between the inner edges of the node and its children. You can define it for all edges or for a specific edge. Accepts pixel values and percentages.</p>
  <p>For nodes that don&#39;t have a defined width/height, this will increase the width/height.</p>
  <h3 id="h16">Border</h3>
  <p class="note">Struct properties: <span class="inline2">border</span>, <span class="inline2">borderLeft</span>, <span class="inline2">borderRight</span>, <span class="inline2">borderTop</span>, <span class="inline2">borderBottom</span>, <span class="inline2">borderStart</span>, <span class="inline2">borderEnd</span>, <span class="inline2">borderHorizontal</span>, <span class="inline2">borderVertical</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_border.htm">flexpanel_node_style_set_border</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_border.htm">flexpanel_node_style_get_border</a></span></p>
  <p>This acts the same as padding.</p>
  <h3 id="h11">Gap</h3>
  <p class="note">Struct properties: <span class="inline2">gap</span>, <span class="inline2">gapRow</span>, <span class="inline2">gapColumn</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_gap.htm">flexpanel_node_style_set_gap</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_gap.htm">flexpanel_node_style_get_gap</a></span></p>
  <p>This is the added distance between each row and column of the flex container and affects distances between child nodes. You can apply to both axes with <span class="inline2">gap</span> or apply only to rows or columns.</p>
  <h3 id="layout">Layout Direction</h3>
  <p class="note">Struct properties: <span class="inline2">direction</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_direction.htm">flexpanel_node_style_set_direction</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_direction.htm">flexpanel_node_style_get_direction</a></span></p>
  <p>This is the layout direction of the node and its children. You can pass either of two strings:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;ltr&quot;</span>: Flex panels are laid out from left to right. The <span class="inline2">start</span> inset refers to <span class="inline2">left</span> and <span class="inline2">end</span> refers to <span class="inline2">right</span>.</li>
    <li><span class="inline2">&quot;rtl&quot;</span>: Flex panels are laid out from right to left. The <span class="inline2">start</span> inset refers to <span class="inline2">right</span> and <span class="inline2">end</span> refers to <span class="inline2">left</span>.</li>
  </ul>
  <p>This can be set for an entire layout tree when <a href="Function_Reference/flexpanel_calculate_layout.htm">calculating its layout</a>.</p>
  <h3 id="h8">Flex Direction</h3>
  <p class="note">Struct properties: <span class="inline2">flexDirection</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex_direction.htm">flexpanel_node_style_set_flex_direction</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex_direction.htm">flexpanel_node_style_get_flex_direction</a></span></p>
  <p>This is the direction in which non-absolute children of the node are laid out. This direction is known as the main axis, and the direction perpendicular to this is known as the cross axis.</p>
  <p>You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;column&quot;</span> (default): Align children from top to bottom.</li>
    <li><span class="inline2">&quot;row&quot;</span>: Align children from left to right.</li>
    <li><span class="inline2">&quot;column-reverse&quot;</span>: Align children from bottom to top.</li>
    <li><span class="inline2">&quot;row-reverse&quot;</span>: Align children from right to left.</li>
  </ul>
  <p>The <span class="inline2">justifyContent</span> property controls how child nodes are laid out on the main axis, and <span class="inline2">alignItems</span> controls how they are placed on the cross axis.</p>
  <h3 id="h6">Flex Wrap</h3>
  <p class="note">Struct properties: <span class="inline2">flexWrap</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex_wrap.htm">flexpanel_node_style_set_flex_wrap</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex_wrap.htm">flexpanel_node_style_get_flex_wrap</a></span></p>
  <p>This controls what happens when children in the container have overflown on the main axis. By default, they will overflow or shrink depending on their properties.</p>
  <p>You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;no-wrap&quot;</span> (default): Default behaviour, no wrapping</li>
    <li><span class="inline2">&quot;wrap&quot;</span>: Child nodes are wrapped on overflow, with each new line being placed on the cross axis</li>
    <li><span class="inline2">&quot;wrap-reverse&quot;</span>: Child nodes are wrapped but the order of the lines is reversed</li>
  </ul>
  <p>The <span class="inline2">alignContent</span> property controls how the wrapped lines on the cross axis are laid out.</p>
  <h3 id="h7">Flex Basis</h3>
  <p class="note">Struct properties: <span class="inline2">flexBasis</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex_basis.htm">flexpanel_node_style_set_flex_basis</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex_basis.htm">flexpanel_node_style_get_flex_basis</a></span></p>
  <p>This is the default size of an item within its flex container before any flex grow or shrink is applied. For a row container this affects the width, and for a column container this affects the height.</p>
  <h3 id="h9">Flex Grow</h3>
  <p class="note">Struct properties: <span class="inline2">flexGrow</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex_grow.htm">flexpanel_node_style_set_flex_grow</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex_grow.htm">flexpanel_node_style_get_flex_grow</a></span></p>
  <p>This controls how the node grows within its flex container depending on the remaining space in the container. It&#39;s a positive weight value with a default of 1.</p>
  <p>For example, having a 400px container with a 40px node and then a node with <span class="inline2">flexGrow: 1</span> will give the second node any remaining space within the container.</p>
  <p>Any values other than 1 determine how a node is sized against other growing nodes in the same container, e.g. the node with a larger value will be given more size.</p>
  <p>Also see the <strong>Flex</strong> property below.</p>
  <h3 id="h10">Flex Shrink</h3>
  <p class="note">Struct properties: <span class="inline2">flexShrink</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex_shrink.htm">flexpanel_node_style_set_flex_shrink</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex_shrink.htm">flexpanel_node_style_get_flex_shrink</a></span></p>
  <p>This controls how the node shrinks within its flex container when there is overflow. It&#39;s a positive weight value with a default of 1.</p>
  <p>Any values other than 1 determine how a node is shrinked against other growing nodes in the same container.</p>
  <p>Also see the <strong>Flex</strong> property below.</p>
  <h3 id="h5">Flex</h3>
  <p class="note">Struct properties: <span class="inline2">flex</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_flex.htm">flexpanel_node_style_set_flex</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_flex.htm">flexpanel_node_style_get_flex</a></span></p>
  <p>This is shorthand for the <span class="inline2">flexGrow</span> and <span class="inline2">flexShrink</span> properties. It will act as <span class="inline2">flexGrow</span> when the value is positive, and <span class="inline2">flexShrink</span> when it&#39;s negative.</p>
  <h3 id="h13">Justify Content</h3>
  <p class="note">Struct properties: <span class="inline2">justifyContent</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_justify_content.htm">flexpanel_node_style_set_justify_content</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_justify_content.htm">flexpanel_node_style_get_justify_content</a></span></p>
  <p>This controls how the non-absolute children of a flex container are aligned along its main axis (i.e. the direction of <span class="inline2">flexDirection</span>).</p>
  <p>You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;flex-start&quot;</span> (default): Align children to the start of the main axis, as set in <span class="inline2">flexDirection</span>.</li>
    <li><span class="inline2">&quot;flex-end&quot;</span>: Align children to the end of the main axis, acting as the opposite of <span class="inline2">flexDirection</span>.</li>
    <li><span class="inline2">&quot;center&quot;</span>: Align children to the centre of the main axis.</li>
    <li><span class="inline2">&quot;space-between&quot;</span>: Align children from the start of the container to the end, inserting space between each child to fill the container.</li>
    <li><span class="inline2">&quot;space-around&quot;</span>: Similar to <span class="inline2">space-between</span> but distributes the space before the first child and after the last child as well.</li>
    <li><span class="inline2">&quot;space-evenly&quot;</span>: Similar to <span class="inline2">space-around</span> but the spacing between the edges and the children, and between each child node, is exactly the same.</li>
  </ul>
  <h3 id="h1">Align Items</h3>
  <p class="note">Struct properties: <span class="inline2">alignItems</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_align_items.htm">flexpanel_node_style_set_align_items</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_align_items.htm">flexpanel_node_style_get_align_items</a></span></p>
  <p>This controls how the non-absolute children of a flex container are aligned along its cross axis (i.e. the direction perpendicular to <span class="inline2">flexDirection</span>).</p>
  <p>You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;stretch&quot;</span> (default): Stretch children to fit the size of the cross axis.</li>
    <li><span class="inline2">&quot;flex-start&quot;</span>: Align children to the start of the cross axis.</li>
    <li><span class="inline2">&quot;flex-end&quot;</span>: Align children to the end of the cross axis.</li>
    <li><span class="inline2">&quot;center&quot;</span>: Align children to the centre of the cross axis.</li>
    <li><span class="inline2">&quot;baseline&quot;</span>: Align children along a common baseline. Individual children can be set to be the reference baseline for their parents.</li>
  </ul>
  <h3 id="h2">Align Self</h3>
  <p class="note">Struct properties: <span class="inline2">alignSelf</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_align_self.htm">flexpanel_node_style_set_align_self</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_align_self.htm">flexpanel_node_style_get_align_self</a></span></p>
  <p>This is the same as <span class="inline2">alignItems</span> (described above) however instead of being applied to a container, this is applied directly to a child node, and affects its cross-axis alignment within its container. This property overrides the <span class="inline2">alignItems</span> value set for its parent container.</p>
  <h3 id="h">Align Content</h3>
  <p class="note">Struct properties: <span class="inline2">alignContent</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_align_content.htm">flexpanel_node_style_set_align_content</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_align_content.htm">flexpanel_node_style_get_align_content</a></span></p>
  <p>If <span class="inline2">flexWrap</span> is set to <span class="inline2">wrap</span> or <span class="inline2">wrap-reverse</span>, any items overflowing along the main axis will be laid out across new lines on the cross axis. This property controls how those wrapped lines are distributed along the cross axis.</p>
  <p>You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;flex-start&quot;</span> (default): Align children to the start of the cross axis.</li>
    <li><span class="inline2">&quot;flex-end&quot;</span>: Align children to the end of the cross axis.</li>
    <li><span class="inline2">&quot;center&quot;</span>: Align children to the centre of the cross axis.</li>
    <li><span class="inline2">&quot;space-between&quot;</span>: Align children from the start of the container to the end along the cross axis, inserting space between each child to fill the container.</li>
    <li><span class="inline2">&quot;space-around&quot;</span>: Similar to <span class="inline2">space-between</span> but distributes the space before the first child and after the last child as well.</li>
    <li><span class="inline2">&quot;space-evenly&quot;</span>: Similar to <span class="inline2">space-around</span> but the spacing between the edges and the children, and between each child node, is exactly the same.</li>
  </ul>
  <h3 id="h4">Display</h3>
  <p class="note">Struct properties: <span class="inline2">display</span><br />
    Functions: <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_set_display.htm">flexpanel_node_style_set_display</a></span>, <span class="inline3_func"><a data-xref="{title}" href="Function_Reference/Styling_Functions/flexpanel_node_style_get_display.htm">flexpanel_node_style_get_display</a></span></p>
  <p>This controls which layout mode the node follows. You can choose from the following values:</p>
  <ul class="colour">
    <li><span class="inline2">&quot;flex&quot;</span> (default): The default layout behaviour.</li>
    <li><span class="inline2">&quot;none&quot;</span>: Disables the node. This effectively functions as the node being removed from the tree, as it&#39;s not included in any calculations.</li>
  </ul>
  <p> </p>
  <p> </p>
  <!--</div>-->
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Back: <a data-xref="{title}" href="Flex_Panels.htm">Flex Panels</a></div>
        <div>Next: <a data-xref="{title}" href="Function_Reference/section_index.htm">Flex Panel Functions</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2024 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Flex_Panels_Styling
-->
  <!-- TAGS
Flex_Panels_Styling
-->
</body>
</html>